<manpage {driver(i)} "Driver Interface">

<section SYNOPSIS>

<itemlist>

<section DESCRIPTION>

A driver(i) object is a module of code that implements the effects of a
particular type of attitude driver, e.g., an activity situation or
civilian casualties.<p>

Each driver type is defined by a Snit type
ensemble within the ::driver:: namespace that is created using the
driver(sim) "type define" subcommand.  For example, the CIVCAS
driver is defined by code that looks like

<pre>
driver type define CIVCAS {f} {
    # Definition script
}
</pre>

resulting in a type ensemble called <code>driver::CIVCAS</code>.  The
definition script is simply a Snit type ensemble definition script.<p>

Every driver ensemble must implement the subcommands defined
in this interface; it may also define other commands as needed.
Thus, a driver is essentially a special kind of module.<p>

<subsection "Rule Sets">

The driver type ensemble must implement one or more rule sets for 
the given driver type, along with an appropriate subcommand for triggering
them.  This subcommand is usually called <iref assess>; its arguments will
vary depending on the driver type.  The rule sets themselves will use the
dam(sim) API.<p>

<subsection "Firing Dictionaries">

The input to a rule set is called a <i>firing dictionary</i>, or 
<i>fdict</i>.  When a rule fires, the <i>fdict</i> is saved in the
<b>rule_firings</b> table for later use.  Part of the job of the driver
type's ensemble is to translate that saved <i>fdict</i> into human-readable
text.<p>

The firing dictionary should contain all inputs to the rule set; it should
also contain the driver type name (e.g., "CIVCAS") under the key <b>dtype</b>.
<p>

<subsection "Driver IDs and Signatures">

There can be many instances of a given driver type, and these are identified
by numeric driver IDs.  For example, casualties to civilian group A are distinct
from casualties to civilian group B, and each gets its own driver ID.  Driver
IDs are assigned on the basis of <i>signatures</i>.  A driver type's signature
is a subset of the parameters in its firing dictionary; this subset is
identified in the <code>driver type define</code> call.  In the CIVCAS example
shown above, the signature is <i>f</i>, that is, the name of the civilian group
that took the casualties.<p>

Driver IDs are assigned automatically by <code>[dam rule]</code> the first 
time a rule fires for the given driver type and signature.<p>

Note that the signature, properly speaking, is not a dictionary, but rather a list of zero or more parameter values drawn from the <i>fdict</i>.<p>

<subsection "Families of Driver Types">

Some driver types, like CIVCAS, are unique, and will live in modules named
after them, e.g., "<code>driver_civcas.tcl</code>"; others, like the various 
activity situations, are part of a large family of very similar driver types.
Because they share a common pattern and often common infrastructure code,
it is convenient to put them into a single mdoule, e.g.,
"<code>driver_actsit.tcl</code>".  This module will generally contain the 
the following blocks of code:<p>

<ul>
    <li> An ensemble for the whole family, e.g., <code>driver::actsit</code>.
        This ensemble will contain the <iref assess> method, and any shared
        infrastructure.  Each situation type's <iref narrative> method, for
        example, will usually be delegated back to this ensemble.  Indeed, this
        ensemble will probably provide a driver definition call that will 
        add the relevant <code>delegate</code> statements to the situation's
        definition script.<p>

    <li> An ensemble for each specific driver type, containing the rule sets
        and other driver-type specific subcommands, possibly delegating them
        back to the family ensemble.<p>
</ul>

See "<code>driver_actsit.tcl</code>" as an example.<p>


<section "SUBCOMMANDS">

Each <xref driver(i)> ensemble must implement at least the following
subcommands.  Most will taking a firing dictionary, or <i>fdict</i> as
an argument.<p>

<deflist subcommands>

<defitem assess {assess <i>args...</i>}>

Every driver type (or family of driver types) will have an <iref assess>
subcommand of some kind that triggers the driver type's rule set(s).
Sometimes the subcommand will have arguments that either comprise or will
lead to an <i>fdict</i>; more commonly, the subcommand will do its own 
sweep of the available data, identifying events and situations that need to
be assessed.<p>

<defitem detail {detail <i>fdict ht</i>}>

Writes a detailed block of HTML text describing a particular 
rule-firing into an <xref htools(n)> buffer <i>ht</i>.  The text 
should include all of the data in the <i>fdict</i>.<p>

<defitem getid {getid <i>fdict</i>}>

Given an <i>fdict</i>, assigns or retrieves a driver ID based on the
signature.  This subcommand is defined automatically when the driver type
is defined.  It is generally called only by <code>[dam rule]</code>.<p>

<defitem narrative {narrative <i>fdict</i>}>

Returns a human-readable one-line narrative description of rule firing,
for use in tables and lists.  The narrative can and should contain 
links of the form

<pre>
    {<i>entity</i>:<i>id</i>}
</pre>

which will be translated into plain text or into HTML links as required.<p>

<defitem sigline {sigline <i>signature</i>}>

Given a specific driver's signature, as saved in the <b>drivers.signature</b>
column by <code>[dam rule]</code>, return a one-line description of the 
driver for use in tables and lists.<p>


</deflist subcommands>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original interface.

</manpage>



