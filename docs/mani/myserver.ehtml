<manpage {myserver(i)} "my:// Server Interface">

<section SYNOPSIS>

<itemlist>

<section DESCRIPTION>

A myserver(i) object is an object that can serve application data
(often HTML text) to the GUI given one of a number of supported
"my:" URLs.  As such, it is conceptually similar to an HTTP server;
however, it resides within the application and serves data back to the
application.<p>

The purpose of a myserver(i) is to provide a single namespace for all
important data in the application, so as to provide:<p>

<ul>
  <li> One-stop shopping for GUI data queries.
  <li> Isolation of the GUI from the underlying data structures.
</ul>

At present, this interface is limited to data retrieval; in time,
operations for data update may be added, in line with the REST
architecture.<p>

Clients will usually use an instance of <xref myagent(n)> to query a
myserver(i).<p>

<subsection "URL Syntax">

The server names all resources by means of URLs with the scheme "my:".
The syntax of "my:" URLs is identical to that of "http:" URLs, except
that the username, port, and password fields are ignored:<p>

<pre>
    my://{server}/{path}?{query}#{fragment}
</pre>

A myserver(i) is entitled to presume that it is given URLs with the
scheme "my" and the proper <i>server</i> name, which are really the
domain of the <xref myagent(n)> used to query the server.<p>

The myserver(i) will take note of the <i>path</i>, and may choose to
look at the <i>query</i>; it will always ignore the <i>fragment</i>,
which is also the responsibility of the <xref myagent(n)>.<p>

<section "SUBCOMMANDS">

Each <xref myserver(i)> ensemble must implement at least the following
subcommands.

<deflist subcommands>

<defitem get {get <i>url</i> ?<i>contentTypes</i>?}>

Retrieves the <i>url</i> from the server.  If the <i>url</i> cannot be
retrieved for any reason, the server must throw an error with error
code <b>NOTFOUND</b>; the error message should be a human-readable
message explaining why the resource cannot be found.<p>

The <i>contentTypes</i> argument, if given, is a list of content types
accepted by the client.  Browse the server's <iref urlhelp> resource
to see what URLs are accepted, and what content types they can
provide; the list will usually include
<b>text/html</b>.  Standard MIME types should be used when
appropriate; Tcl/Tk data formats should have names like
<b>tcl/linkdict</b> or <b>tk/image</b>.  The server must document any
server-specific content types.<p>

If <i>contentTypes</i> is empty, the server will return the first
available content type for the requested <i>url</i>.  Otherwise, it
will return the first content type listed in <i>contentTypes</i> which
is available for the requested <i>url</i>.<p>

Note that the content types listed in <i>contentTypes</i> can include
wild cards, e.g., <b>text/*</b> and <b>*/*</b>.<p>

On success, the <iref get> command returns a dictionary with the
following keys:<p>

<deflist getdict>

<defitem url {url}>

The complete URL given to the server.  This is of interest because the
<xref myagent(n)> might have performed address resolution; hence,
the URL given to the server might not be the same as the URL given to
the agent.<p>

<defitem contentType {contentType}>

The content type of the returned content.<p>

<defitem content {content}>

The returned content itself.

</deflist>

<section "STANDARD URLS">

Each myserver(i) should accept the following URLs:<p>

<deflist urls>

<defitem urlhelp {/urlhelp}>

This URL should return a <b>text/html</b> page documenting the
server's URL schema.  The entry for each resource should include the
content types available for that resource.<p>

<defitem urlhelp/path {/urlhelp/<i>path</i>}>

This URL should return a <b>text/html</b> page documenting the
resource given by <i>path</i>, in the same format as <iref urlhelp>.<p>

</deflist urls>

</deflist subcommands>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original interface.

</manpage>



