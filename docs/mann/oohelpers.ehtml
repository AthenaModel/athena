<manpage {projectlib(n) oohelpers(n)} "TclOO Convenience Package">

<section SYNOPSIS>

<pre>
package require projectlib <version>
namespace import ::projectlib::*
</pre>

<itemlist>

<section DESCRIPTION>

The oohelpers(n) package contains commands that make using TclOO a bit 
easier.<p>

<section "GENERAL COMMANDS">

This module defines the following commands to be used with TclOO classes
and objects.<p>

<deflist commands>

<defitem "isa" {isa <i cls obj>}>

Returns 1 if <i obj> is an instance of <i cls> or one of its subclasses,
and 0 otherwise.<p>

<defitem "isancestor" {isancestor <i parent child>}>

Returns 1 if <i parent> is an ancestor class of the <i child> class
(including being a direct superclass), and 0 otherwise.<p>

</deflist commands>

<section "CLASS-DEFINITION COMMANDS">

This module defines the following commands to be used in class definitions or
with <code>oo::define</code>:<p>

<deflist define>

<defitem "meta" {meta <i name value>}>

Defines a class metadata variable, a constant <i value> that can be retrieved
from the class object and from its instances by calling the method of the
same <i name>.  For example,<p>

<example>
oo::class create myclass {
    meta title "The Class's Title"
}
</example>

is equivalent to

<example>
oo::class create myclass {
    self method title {} {
        return "The Class's Title"
    }
    method title {} {
        return [[self class] title]
    }
}
</example>

<defitem "typemethod" {typemethod <i>method arglist body</i>}>

<b>Deprecated.</b> In class definitions, the syntax "<tt self method>" is
equivalent to "<tt typemethod>" as defined here.<p>

Defines a method on the class's class object.  In other words,

<example>
oo::class create myclass {
    typemethod init {} { ... }
}
</example>

is equivalent to

<example>
oo::class create myclass
oo::objdefine myclass {
    typemethod init {} { ... }
}
</example>


</deflist define>

<section "BODY COMMANDS">

This module defines the following commands for use in method bodies
(including constructor and destructor bodies):<p>

<deflist body>

<defitem "mymethod" {mymethod <i>method</i> ?<i>args...</i>?}>

Returns a command prefix consisting of a call to the current object's
named <i>method</i> plus any additional arguments.  The command prefix
can be called by other objects even if the method is unexported.<p>

</deflist body>

<section ENVIRONMENT>

This package requires Tcl 8.5 or later.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>










