<manpage {projectlib(n) httpagent(n)} "http(n) User Agent">

<section SYNOPSIS>

<pre>
package require projectlib 1.0
namespace import ::projectlib::httpagent
</pre>

<itemlist>

<section DESCRIPTION>

In HTTP-parlance, a "user agent" is a program that accesses an HTTP
server.  An instance of httpagent(n) is an object that clients can use
to access data from web servers across the network using either the
"http" or "https" protocols.  As such, httpagent(n) is a wrapper 
around Tcl's built-in <xref tcl:http(n)> package; it provides the 
following benefits:<p>

<ul>
    <li> All non-successful results are reported using a single 
         mechanism.
    <li> Redirection is handled automatically.
    <li> Support for "https" is enabled automatically.
    <li> An application can create multiple instances, each with its
         own http(n) configuration.
</ul><p>

At present, only "GET" requests are supported.<p>

<subsection "Agent States">

At any time, the agent is in one of the following states, as indicated by
the <iref state> method:<p>

<deflist states>
<defopt IDLE>
No requests have yet been sent, or the agent has been
<iref reset>; there is no status data to retrieve.<p>

<defopt WAITING>
A request is pending.<p>

<defopt TIMEOUT>
The most recent request timed out.<p>

<defopt ERROR>
The most recent request completed with an error.  See 
<iref status> for nature of the error, and <iref error> for details.<p>

<defopt OK>
The request completed successfully, and data was retrieved.  See 
<iref data> for the data and <iref meta> for the HTTP headers.<p>

</deflist>

<section COMMANDS>

<deflist commands>

<defitem httpagent {httpagent <i>name</i> ?<i>options...?</i>}>

Creates a new httpagent(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<iref httpagent> returns the fully-qualified form of the
<i>name</i>.<p>

The httpagent(n) may be created with the following options:<p>

<deflist options>

<defopt {-command <i>cmd</i>}>

All HTTP requests are handled asynchronously.  This command is called
when the current request is complete.  It can be overridden by the
<iref get> method's <b>-command</b> option.<p>

<defopt {-contenttypes <i>list</i>}>

Specifies the list of content types acceptable to this client, e.g.,
<b>text/html</b>.  This list is used to configure <xref tcl:http(n)>
prior to each request.<p>

<defopt {-timeout <i>msec</i>}>

Specifies the length of the network timeout for all HTTP requests,
in milliseconds. The default is 10,000 milliseconds.<p>

</deflist options>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of httpagent(n) has the following subcommands:<p>

<deflist instance>

<defitem data {<i>object</i> data}>

Returns the data associated with the most recent request, or "" if none.
This is usually useful only if the <iref state> is <b>OK</b>; however,
it will also be populated for certain error conditions (e.g., 404
errors).<p>

<defitem error {<i>object</i> error}>

When the <iref state> is <b>ERROR</b>, returns details about the 
specific error.<p>

<defitem get {<i>object</i> get <i>url</i> ?<i>option value...</i>?}>

Requests the <i>url</i>'s content.  The following options may be used:<p>

<deflist options>
<defopt {-command <i>cmd</i>}>

Specifies the command to call when the request is complete, overriding
the object's <b>-command</b> option. This method will throw an error
if neither option is set.<p>

<defopt {-query <i>dict</i>}>
Specifies a dictionary of query keywords and values.  The query will
be properly formatted and appended to the URL.<p>

</deflist options>

All requests are asynchronous; when the request is complete, the
<b>-command</b> callback will be called, and can query the agent's
<iref state> for the result.<p>

<defitem httpinfo {<i>object</i> httpinfo}>

Returns a dictionary of low-level information about the most recent
request; the keywords are <b>status</b>, <b>code</b>, <b>ncode</b>,
and <b>error</b>, corresponding to the equivalent 
<code>http::*</code> commands in <xref tcl:http(n)>.<p>

<defitem meta {<i>object</i> meta ?<i>name</i>?}>

Called with no argument, returns the dictionary of HTTP headers 
received for the most recent request, or the empty dictionary if
the most recent request failed.<p>

If <i>name</i> is given, returns the value of the named header,
or "" if the header was not present.<p>

<defitem reset {<i>object</i> reset}>

Cancels any pending request and cleans up the result of any previous
request, returning the <iref state> to <b>IDLE</b>.<p>

<defitem state {<i>object</i> state}>

Returns the current state of the agent; see <xref "Agent States">.<p>

<defitem status {<i>object</i> status}>

Returns the current status of the agent: a human-readable string that
corresponds to the <iref state>, but often with more information.<p>

<defitem token {<i>object</i> token}>

Returns the <xref tcl:http(n)> "token" for the most recent request, or
"" if none.  This call should be used only as an aid to debugging.<p>

<defitem url {<i>object</i> url}>

Returns the URL used for the last request.  If the last request was 
redirected, then it will be the URL to which it was redirected.

</deflist instance>

<section "SEE ALSO">

<xref myserver(i)>.

<section ENVIRONMENT>

Requires Tcl 8.5 or later.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>










