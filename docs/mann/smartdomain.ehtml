<manpage {projectlib(n) smartdomain(n)} "smartdomain(i) Content Handler">

<section SYNOPSIS>

<pre>
package require projectlib <version>
</pre>

<itemlist>

<section DESCRIPTION>

smartdomain(n) is domain handler for <xref ahttpd(n)> that is used to
handle dynamic application content.  The application creates an 
instance of smartdomain(n) and registers specific URLs and handlers with
it.  The URLs can contain place-holder variables, which will be
automatically matched and provided to the handlers.<p>

<b TBD:> Eventually we will rearchitect <xref myserver(n)> to be a 
simple server that serves up <xref smartdomain(n)> content; then one
smartdomain(n) instance can be used with both <xref ahttpd(n)> and 
<xref myserver(n)>.  That work has not yet been done.<p>

A smartdomain is associated with a particular server domain, i.e., with a
subtree of the server's file system: e.g, "<tt /my/subdomain>" or 
"<tt /mydomain>".  
All URLs defined with the smartdomain will be within this subtree.  In 
addition, the smartdomain defines the URL 
"<tt><i domain>/urlschema.html</tt>" which
documents the accepted URLs within the domain.<p>

<subsection "Fallbacks">

If a requested URL matches a directory within the domain, and that 
directory defines an "<tt index.html>" file, the server will be 
redirected to the "<tt index.html>" file.  Otherwise, the content
will be "not found".<p>

<section "COMMANDS">

<tt ::projectlib::smartdomain> is an <tt oo::class>.  It provides the 
following commands.<p>

<deflist commands>

<defitem "smartdomain create" {smartdomain create <i name domain>}>

Creates a new instance of smartdomain(n) with the given command <i name>
for the given <i domain>.  The <i domain> must begin with "/".<p>

<defitem "smartdomain new" {smartdomain new <i domain>}>

Creates a new instance of smartdomain(n) for the given <i domain> and
returns the instance's name.  The <i domain> must begin with "/".<p>

</deflist commands>


<section "INSTANCE COMMANDS">

Instances of smartdomain(n) provide the following subcommands.<p>

<deflist instance>

<defitem ahttpd {<i obj> ahttpd}>

Installs the smartdomain for use with <xref ahttpd(n)>, which should 
already be initialized.<p>

<defitem myserver {<i obj> myserver <i name>}>

Installs the smartdomain for use with the named <xref myserver(n)>.
<b TBD: Not yet implemented.><p>

<defitem url {<i obj> url <i suffix handler docstring>}>

Defines a new URL within the domain.  The <i suffix> is the URL's
suffix within the domain, beginning with a "/" and ending with a 
file name and extension.  For example, if the domain is "<tt /mydomain>" 
and the full URL will be "<tt /mydomain/this/that/theother.html>", then the 
<i suffix> should be "<tt /this/that/theother.html>".<p>

The file extension is required; it is used to determine the URL's 
content-type.<p>

The <i suffix> may contain place-holders for any path component but the
filename, e.g., "<tt /actor/{a}/index.html>" or 
"<tt /group/{g}/index.html>".  The place-holder is a variable that will
be matched against the requested URL.  If "<tt /actor/fred/index.html>" is
requested, then "{a}" will match "fred".  The place-holder must be the
entire path component, and must be wrapped in "{" and "}" as shown.<p>

The <i handler> is a command prefix that will be called when the URL
suffix is matched.  To it will be added:<p>

<ul>
<li> The smartdomain(n) object name.<p>
<li> One argument for each place-holder in the <i suffix>, giving the
     actual content from the requested URL.<p>
<li> The name of the <xref ahttpd(d)> request array variable, "data".<p>
<li> A dictionary of parsed query data from the requested URL.<p>
</ul>

The <i handler> may:<p>

<ul>
<li> Return data of a type consistent with the URL's file extension.<p>
<li> Throw <b NOTFOUND> to indicate that the place-holder values
     match no available data (i.e., if there is no actor with the
     given name).<p> 

<li> Throw <b>{HTTPD_REDIRECT <i newurl>}</b> to redirect to a 
     different URL (though this is frowned on).<p>
</ul> 

The <i docstring> should describe the data returned by the URL in
general terms, and document any place-holders.<p>

<defitem urltree {<i obj> urltree <i root handler docstring>}>

<b TBD:> This handler type was added to support the on-line help pages, 
but we might write a different domain handler for that purpose.  In that
case, this might go away.><p>

Defines a <i handler> for a subtree of the domain.  The <i root> is the 
subtree's root within the domain, beginning with a "/".  For example, if 
the domain is "<tt /mydomain>" and the full URL will be 
"<tt /mydomain/this/that/...>", then the 
<i root> should be "<tt /this/that>".<p>

The <i root> may contain place-holders in any path component 
(as for <iref url>).  Note that <iref url> and <iref urltree> handlers are
matched in the order of definition; if the first registered handler is
an <iref urltree> handler with root "/{mydir}" then it will match all
URLs received by the domain and no other handler will ever be called.<p>

The <i handler> is a command prefix that will be called when the URL
suffix is matched.  To it will be added:<p>

<ul>
<li> The smartdomain(n) object name.
<li> One argument for each place-holder in the <i root>, giving the
     actual content from the requested URL.<p>
<li> The remainder of the URL following the <i root>.
<li> The name of the <xref ahttpd(d)> request array variable, "data".<p>
<li> A dictionary of parsed query data from the requested URL.<p>
</ul>

The <i handler> may:<p>

<ul>
<li> Return data of a type consistent with the URL's file extension.<p>
<li> Throw <b NOTFOUND> to indicate that the place-holder values
     match no available data (i.e., if there is no actor with the
     given name).<p> 

<li> Throw <b>{HTTPD_REDIRECT <i newurl>}</b> to redirect to a 
     different URL (though this is frowned on).<p>
</ul> 

The content-type of the returned data will be determined from the 
file extension of the last component of the requested URL; if there
is no extension, then it will be "text/plain".  
<b TBD:> This is not very good.  If we retain this feature, we need
a way to specify the default content-type for the subtree, and to
set it explicitly for particular requests.<p>

The <i docstring> should describe the data returned by the URL in
general terms, and document any place-holders.<p>


</deflist instance>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>





