<manpage {projectlib(n) gofer(n)} "Gofer Type Manager">

<section SYNOPSIS>

<pre>
package require projectlib 1.0
namespace import ::projectlib::*
</pre>

<itemlist>

<section DESCRIPTION>

The gofer(n) command and its subcommands are used to create and manage
gofer types, as defined by <xref gofer(i)>.  Briefly, a gofer type allows 
a user to select one of a number of rules for producing a particular kind of
output value, and then can produce the desired output on demand.<p>

The gofer type object does all of the work of managing the 
various rules; the implementor simply needs to define the rules as
<xref gofer_rule(i)> objects.<p>

The general structure is as follows.  The application defines a gofer type
using <iref gofer define>, and then adds rules to it using 
<iref gofer rule> and <iref gofer rulefrom>.  The new type can then be
used to create, validate, and evaluate gofer values of its type.  The type
definition includes a <xref dynaform(n)> specification used when editing
values of the type; see <xref gofer(i)> for full details.<p>

gofer(n) also defines a number of commands for use in defining rules;
see <xref "RULE HELPERS">.<p>

<section COMMANDS>

This module defines the following commands:<p>

<deflist commands>

<defitem "gofer check" {gofer check}>

This command, intended for use by the Athena test suite, does a sanity
check of all defined gofer types.  For each gofer type, it verifies that:<p>

<ul>
    <li> The type has a <b>by_value</b> rule with one
         key, <b>raw_value</b> 
    <li> The type's dynaform has <b>_type</b> and <b>_rule</b> selectors 
         as its first two fields (note that <b>_type</b> is added 
         automatically by <iref gofer define>).
    <li> The <b>_rule</b> selector cases are one-to-one with the type's
         rules.
    <li> Each case's fields are one-to-one with the matching rule's keys.
</ul><p>

It will throw an error for the first problem it finds; if no problems are
found, it returns "OK".<p>

<defitem "gofer construct" {gofer construct <i>typename rulename</i> ?<i>args...</i>?}>

Constructs a gopher type value (i.e., a <i>gdict</i>) for the named type and,
giving the arguments relevant for the rule (i.e., values for the rule's
keys).<p>


<defitem "gofer define" {gofer define <i>name formspec</i>}>

Creates a new gofer type with the given <i>name</i>; it will be represented
as a Tcl command with full name "<code>::gofer::<i>name</i></code>".  The
name must be an identifier in upper case.<p>

The <i>formspec</i> is a <xref dynaform(n)> form specification; it tells
the application how to display and edit the type's values.  The <i>formspec</i>
must begin with a selector called <b>_rule</b> with one case for each of the
type's rules, and the case names must match the rule names.<p>

In addition, the form may contain appropriate labels, prose, and formatting.<p>

<b>NOTE:</b> <iref gofer define> will insert an invisible <b>_type</b> field at the beginning of the <i>formspec</i>, so that the record edited using
the dynaform will be a valid gofer dictionary (gdict).<p> 

For example,<p>

<pre>
    rc "" -width 3in -span 3
    label {
        Enter a rule for selecting a set of civilian groups.
    }

    rc "" -for _rule
    selector _rule {
        case BY_VALUE "By name" {
            cc "  " -for raw_value
            enumlonglist raw_value -dictcmd {::civgroup namedict} \
                -width 30 -height 10 
        }

        case RESIDENT_IN "Resident in" {
            cc "  " -for nlist
            enumlonglist nlist -dictcmd {::nbhood namedict} \
                -width 30 -height 10
        }
    }
</pre> 

<defitem "gofer eval" {gofer eval <i>gdict</i>}>

Evaluates the <i>gdict</i>, which is 
assumed to be valid, returning the specified data.  The call simply 
identifies the gofer type and delegates
to the type's <iref eval> method.<p>

<defitem "gofer narrative" {gofer narrative <i>gdict</i> ?-brief?}>

Returns the narrative string for the given <i>gdict</i>, which is 
assumed to be valid.  The call simply identifies the gofer type and delegates
to the type's <iref narrative> method.  If <b>-brief</b> is given, long
lists will be truncated in the result.<p>

<defitem "gofer rule" {gofer rule <i>typename rulename keys body</i>}>

Creates a new gofer rule object for type <i>typename</i>; the rule will
have symbolic name <i>rulename</i>, which must be an identifier in upper case;
it must match one of the <b>_rule</b> cases in the type's dynaform spec.
The <i>keys</i> is a list of the gofer dictionary keys required by the rule.
The <i>body</i> is a <code>snit::type</code> body which defines the rule's
<code>construct</code>, <code>eval</code>, <code>narrative</code>, and
<code>validate</code> type methods (the <code>keys</code> type method is defined automatically).<p>

The rule object's Tcl command name will be 
<code>::gofer::<i>typename</i>::<i>rulename</i></code>.<p>

gofer(n) provides a number of helper commands for use in writing gofer rules;
and the application can provide its own helper commands as well.
See <xref "RULE HELPERS"> for details.<p>

<defitem "gofer rulefrom" {gofer rulefrom <i>typename rulename object</i>}>

Links an existing <xref gofer_rule(i)> object to the gofer type with
name <i>typename</i> using symbolic rule name <i>rulename</i>.  This allows
multiple gofer types to use a single rule.<p>

<defitem "gofer validate" {gofer validate <i>gdict</i>}>

Validates a gofer dictionary of arbitrary type, returning it in canonical form
or throwing <b>INVALID</b> on error.  On success, the <i>gdict</i> is
guaranteed to reference some known gofer type and be valid according to that
type.<p>

</deflist commands>

<section "INSTANCE COMMAND">

gofer(n) objects have the following subcommands:<p>

<deflist instance>

<defitem blank {<i>type</i> blank}>

Returns a blank value of the given type, i.e.,<p>

<pre>
    _type CIVGROUPS _rule {}
</pre>

<defitem dynaform {<i>type</i> dynaform}>

Returns the name of the type's <xref dynaform(n)>.<p>

<defitem eval {<i>type</i> eval <i>gdict</i>}>

Evaluates the <i>gdict</i> to produce the desired output value, e.g., 
a particular list of civilian groups.<p>

<defitem keys {<i>type</i> keys <i>rule</i>}>

Returns a list of the <i>gdict</i> keys required by the named <i>rule</i>.<p>

<defitem name {<i>type</i> name}>

Returns the gofer type's name, e.g., "CIVGROUPS".<p>

<defitem narrative {<i>type</i> narrative <i>gdict</i> ?-brief?}>

Returns a human-readable narrative description of the rule given the
parameters in the <i>gdict</i>.  The narrative is stated as a noun phrase 
so that it can be included in other strings (e.g., in 
<xref tactic(i)> narratives).<p>

If the <b>-brief</b> option is included, then the length of the narrative
is constrained in cases where the full narrative could be 
arbitrarily long, e.g., rule parameters whose values are lists are
truncated with an ellipsis.  There is no hard constraint, but 
typical brief narratives should be no more than about 120 characters.<p>

<defitem rules {<i>type</i> rules}>

Returns a list of the names of the type's rules.<p>

<defitem validate {<i>type</i> validate <i>gdict</i>}>

Validates the <i>gdict</i>, throwing <b>INVALID</b> on error and returning
the <i>gdict</i> in canonical form on success.  See 
<xref gofer(i)> for a description of canonical form.<p>

</deflist instance>

<section "RULE CONSTRUCTORS">

In addition to the subcommands listed above, the type will have a
subcommand for each rule which constructs a value with the right keys
for that type.  The subcommand will have the same name as the rule,
e.g., <b>by_value</b>, and will take one argument for each key, in the
order they are listed by the rule's <code>keys</code> method.<p> 

<section "RULE HELPERS">

Rule object typemethods are often similar or identical across a number of
rules, and so it makes sense to abstract out common functionality into 
helper commands.  Gofer(n) provides a number of such helpers, listed below,
which can be using in any gofer rule; in addition, the application can define
its own in the <code>::gofer::</code> namespace, and a specific gofer type can
define its own in the <code>::gofer::<i>typename</i></code> namespace.  All
such commands are automatically visible in the type's gofer rule typemethods.<p>

gofer(n) defines the following commands for use in the bodies of 
gofer rules.<p>

<deflist helpers>
<defitem joinlist {joinlist <i>list</i> ?<i>maxlen</i>? ?<i>delim</i>?}>

Joins the elements of a list together using a delimeter string <i>delimi</i>,
which defaults to "<code>, </code>".  If <i>maxlen</i> is the empty string
(the default) then all of the list elements will be included in the output.
If <i>maxlen</i> is an integer, then it is the maximum number of list elements
to include in the output.  The remainder will be truncated and replaced by 
an ellipsis ("<code>...</code>").<p>

<defitem listval {listval <i>noun vcmd list</i>}>

Gofer rules often have parameters whose value is a list of entities, e.g..,
a list of groups or actors or neighborhoods.  In this case, the rule's 
<code>validate</code> method must validate each of the elements, putting it
in canonical form, and throwing an error if the list is empty.<p>

The command handles the bulk of the work for this pattern.  Given a <i>list</i>
of elements, it validates each of them using a validation command <i>vcmd</i>,
where <i>vcmd</i> is a command prefix taking one additional argument, a 
list element.  The command must validate the element, throwing
<b>INVALID</b> on error and returning the element in canonical form on 
success.<p>

If the <i>list</i> is empty, <iref listval> throws <b>INVALID</b>
with an error message that includes <i>noun</i>, which should be a plural
noun.<p>

On success, <iref listval> returns the canonicalized list.<p>

<defitem "listnar" {listnar <i>snoun pnoun list</i> ?-brief?}>

Returns a narrative string for a <i>list</i> of items, where
<i>snoun</i> is a singular noun or noun phrase for a list item and 
<i>pnoun</i> is a plural noun or noun phrase for a list of items.  
These inputs are used as follows.<p>

If <i>list</i> contains one item, the string is "<i>snoun</i> <i>item</i>",
e.g., "group SHIA".  The <i>snoun</i> can be the empty string, in which
case the result is simply "<i>item</i>", e.g., "SHIA".<p>

If <i>list</i> contains more than one item, the string is 
"<i>pnoun</i> (<i>items...</i>)", e.g., "these groups (SUNN, SHIA)".<p>

If the <b>-brief</b> option is included, then the list will be truncated
to no more than 8 items using <iref joinlist>.<p>

</deflist helpers>

<section ENVIRONMENT>

This package requires Tcl 8.5 or later.

To use the package in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the package
directory.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.<p>

</manpage>






