<manpage {athena(n) comparison(n)} "Athena Scenario Comparison">

<section SYNOPSIS>

<pre>
package require athena <version>
</pre>

<itemlist>

<section DESCRIPTION>

The <xref athena(n)> command <xref athena(n) "athena diff"> compares two
scenarios for significant differences, and returns a comparison(n) object
that contains them.  The comparison(n) object provides
information about the differences in a variety of formats, and is also
used to drill down on particular differences for more information.<p> 

<section "COMMANDS">

comparison(n) provides the following commands:<p>

<deflist commands>

<defitem "::athena::comparison create" {comparison create <i>obj</i> <i s1 t1 s2 t2>}>

Creates a new comparison(n) instance named <i>obj</i>, and
returns the fully qualified object name.  The object will contain
a comparison of scenarios <i s1> and <i s2> (which might be identical)
at times <i t1> and <i t2>.<p>

If <i s1> and <i s2> are not identical, then they are checked for
compatibility.  The requirements are still evolving, but include:

<ul>
    <li> Identical neighborhood names
    <li> Identical actor names
    <li> Identical group names
</ul><p>

The object is initially empty.  Practically speaking, comparison(n) 
objects will usually be created and populated by 
<xref athena(n) "athena diff">.<p>

</deflist commands>

<section "INSTANCE COMMANDS">

Each instance of comparison(n) provides the following subcommands:<p>

<deflist instance>

<defitem add {<i obj> add vartype val1 val2 keys...}>

<b>This command is used when populating the object; clients should rarely
if ever need it.</b><p>

This command compares two values of a given variable type, and retains
them if the difference is significant.  The <i vartype> is the barename of
an <tt ::athena::vardiff::*> class, (e.g., <tt nbsecurity>).  
The values <i val1> and <i val2>
are the values of a variable of the given <i vartype> from 
<i s1>@<i t1> and <i s2>@<i t2>.  The <i keys...> are the key values for
the specific variable/<xref vardiff(n)> subclass.  For example, the key
value for the <tt>nbsecurity/<i n></tt> variable is a neighborhood name, and the
key values for the <tt>support/<i n>/<i a></tt> variable are a 
neighborhood name and an actor name.<p>

Returns the resulting <xref vardiff(n)> instance, or "" if the variable
wasn't significant.  Note that if the same variable is checked multiple
times, the previously saved instance will be returned the second and
subsequent times.<p>

<defitem addtop {<i obj> addtop vartype val1 val2 keys...}>

<b>This command is used when populating the object; clients should rarely
if ever need it.</b><p>

This command is identical to <iref add>, but marks the variable (if 
significant) as a top-level significant output.  Note that a variable
can be both a top-level significant output and a significant input to
another variable.<p>

<defitem chain {<i obj> chain <i subcommand> ?<i args...>?}>

This command has a family of subcommands for retrieving causality 
chains in different data formats.<p>

<deflist chain>

<defitem "chain dump" {<i obj> chain dump <i varname>}>

Returns a text string that lists all of the variables in <i varname>'s
causality chain in tree form.<p>

<defitem "chain huddle" {<i obj> chain huddle <i varname>}>

Returns a huddle(n) object representing a list of the <xref vardiff(n)> objects
in <i varname>'s causality chain.  The tree structure is defined by 
each object's <tt inputs> field.<p>

<defitem "chain json" {<i obj> chain json <i varname>}>

Returns a JSON object representing a list of the <xref vardiff(n)> objects
in <i varname>'s causality chain.  The tree structure is defined by 
each object's <tt inputs> field.<p>

</deflist chain>

<defitem contribs {<i obj> contribs <i subcommand> <i keys...>}>

Determines contributions by driver for the curve indicated by the 
subcommand and keys (e.g., <tt mood> and a civilian group name; 
see <xref mars:uram(n)>'s <xref mars:uram(n) contrib> subcommand).
Returns a flat list <tt>{<i drid> <i val1> <i val2> ...}</tt> of the
contributions made by the driver in each scenario.<p>

The driver ID used, <i drid>, is an ID consisting of the driver's type
(the rule set name) and signature tokens joined together with "/", e.g.,
"ENI/SUNN" (effect of ENI on group SUNN) or "PATROL/NB1/BLUE" (effect of
patrolling by force group BLUE in neighborhood NB1).<p>

<defitem diffs {<i obj> diffs <i subcommand> ?<i args...>?}>

Asks for the set of significant differences; the <i subcommand> determines
the output format.<p>

<deflist diffs>

<defitem "diffs dump" {<i obj> diffs dump ?-toplevel?}>

Returns a dump of the signicant differences as a simple text table.  This
format is usually used for debugging.  If <tt -toplevel> is given, the
output includes only the top-level differences.<p>

<defitem "diffs huddle" {<i obj> diffs huddle ?-toplevel?}>

Returns a dump of the signicant differences as a huddle(n) list containing
difference records.  This dump can be included into a larger huddle(n)
object for conversion to JSON.  If <tt -toplevel> is given, the
output includes only the top-level differences.<p>

<defitem "diffs json" {<i obj> diffs json ?-toplevel?}>

Returns a dump of the signicant differences as a JSON list containing
difference records.  If <tt -toplevel> is given, the
output includes only the top-level differences.<p>

</deflist diffs>

<defitem exists {<i obj> exists <i varname>}>
Returns 1 if variable <i varname> has been determined to be significant
in the comparison, in either the initial set of significant outputs or
as part of a causality chain.<p>

<defitem explain {<i obj> explain <i varname>}>

Computes the causality chain for variable
<i varname>, adding the <xref vardiff(n)> objects to the list for 
<i varname>'s significant inputs, and then for those variable's 
significant inputs, and so forth.  If differences have already been
computed for <i varname>, does nothing.<p>

<defitem getbytype {<i obj> getbytype ?-toplevel?}>

Returns a dictionary of lists of the known <xref vardiff(n)> objects
by variable type.  If <tt -toplevel> is given, the
output includes only the top-level differences.<p>

<defitem getchain {<i obj> getchain <i varname>}>

Returns a list of <xref vardiff(n)> objects representing the named
variable and all of the variables in its causality chain.<p>

<defitem getdiff {<i obj> getdiff <i name>}>

Given a variable name, returns the variable's <xref vardiff(n)> object,
or "" if none.<p>

<defitem list {<i obj> list ?-toplevel?}>

Returns a list of the <xref vardiff(n)> objects that have been added to the
comparison.  If <tt -toplevel> is given, the
output includes only the top-level differences.<p>

<defitem reset {<i obj> reset}>

Resets the comparison object back to its empty state.<p>

<defitem s1 {<i obj> s1 ?<i subcommand args...>?}>

Called with no arguments, returns the <xref athena(n)> scenario
object for scenario <i s1>.  Otherwise, the remaining arguments are
passed along to <i s1> as a subcommand and the result is returned.<p>

<defitem s2 {<i obj> s2 ?<i subcommand args...>?}>

Called with no arguments, returns the <xref athena(n)> scenario
object for scenario <i s2>.  Otherwise, the remaining arguments are
passed along to <i s2> as a subcommand and the result is returned.<p>

<defitem t1 {<i obj> t1}>

Returns the value of <i t1>, a simulation time in integer weeks.<p>

<defitem t2 {<i obj> t2}>

Returns the value of <i t2>, a simulation time in integer weeks.<p>

<defitem validate {<i obj> validate <i varname>}>

Validates variable <i varname>, returning <i varname> if it is a significant
variable in the comparison, and throwing INVALID otherwise.<p>


</deflist instance>

<section ENVIRONMENT>

Requires Tcl 8.6 or later.<p>

<section AUTHOR>

Will Duquette<p>

</manpage>





