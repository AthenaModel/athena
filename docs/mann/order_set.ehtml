<manpage {projectlib(n) order_set(n)} "Order Set Class">

<section SYNOPSIS>

<pre>
package require projectlib <version>
</pre>

<itemlist>

<section DESCRIPTION>

The <tt ::projectlib::order_set> class is part of the Mars Order Processing
framework, which includes <xref orderx(n)>, <xref order_set(n)>, and
<xref order_flunky(n)>.  See <xref orderx(n)> for an overview of the
framework.<p>

An order_set(n) instance is used to define a collection of related order
classes, which will all be subclasses of <xref orderx(n)> or an equivalent.
As part of defining the order classes, order_set(n) ensures that each
class defines the required <xref oohelpers(n) meta>data and does some
other load-time checks.<p>


<section COMMANDS>

The following commands create instances of order_set(n):<p>

<deflist>

<defitem "order_set create" {::projectlib::order_set create <i name> ?<i baseClass>?}>

Creates a new instance of <tt ::projectlib::order_set>
called <i name>.  By default, orders defined using this class will have 
<tt ::projectlib::orderx> as their superclass; if <i baseClass> is given,
it will be used instead.<p>

<defitem "order_set new" {::projectlib::order_set new ?<i baseClass>?}>

Creates a new instance of <tt ::projectlib::orderx> with an arbitrary
name.  By default, orders defined using this class will have 
<tt ::projectlib::orderx> as their superclass; if <i baseClass> is given,
it will be used instead.<p>
</deflist>

<section "INSTANCE COMMAND">

Each instance of order_set(n) has the following subcommands.<p>

<deflist instance>

<defitem define {<i obj> define <i order body>}>

Defines a new order class for an order called <i order>.  The new class's
fully qualified name will be "<i obj>::<i order>".  The <i body> is an 
<tt oo::define> script for the new class; it will define the class's 
<xref oohelpers(n) meta>data and methods.<p>

The new class will have the superclass specified when the order set was
created.<p>

In addition to defining the new class, <iref define> does the following:<p>

<ul>
<li> Defines <xref oohelpers(n) meta> <tt name> to the be the unqualified
    <i order> name.<p>

<li> Defaults <xref oohelpers(n) meta> <tt title> to the order name.<p>

<li> Defaults <xref oohelpers(n) meta> <tt sendstates> to the 
    empty list.<p>

<li> Defaults <xref oohelpers(n) meta> <tt form> to the empty string.<p>

<li> Defaults <xref oohelpers(n) meta> <tt parmtags> to the empty 
     dictionary.<p>

<li> Declares the <xref orderx(n)> instance variable <tt parms()> 
    explicitly, so that it can be used without declaration in the 
    class's methods.<p>

<li> If the class defines a <tt form>, creates the related 
    <xref mars:dynaform(n)> and checks it against the order's parameter
    list.<p>

<li> Remembers the order class for later introspection.<p>
</ul>

<defitem reset {<i obj> reset}>

Resets the object, deleting all defined classes.  Note that created
dynaforms are not destroyed, as <xref mars:dynaform(n)> doesn't support
that.<p>

<defitem names {<i obj> names}>

Returns a list of the unqualified names of the defined orders.<p>

<defitem exists {<i obj> exists <i order>}>

Returns 1 if there's an order called <i order> in the set, and 0 
otherwise.<p>

<defitem validate {<i obj> validate <i order>}>

Validates the <i order> name, converting it upper case and returning it,
or throwing <b INVALID> if the order isn't in the set.<p>

<defitem class {<i obj> class <i order>}>

Returns the order's full class name.<p>

<defitem title {<i obj> title <i order>}>

Returns the order's title.<p>

</deflist instance>

<section "SEE ALSO">

<xref order_flunky(n)>, <xref orderx(n)>.

<section ENVIRONMENT>

orderx(n) requires Tcl 8.5 or later, plus TclOO.

To use orderx(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the projectlib(n)
library directory.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>





