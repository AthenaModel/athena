<manpage {projectlib(n) beanpot(n)} "Bean Container">

<section SYNOPSIS>

<pre>
package require projectlib <version>
namespace import ::projectlib::*
</pre>

<itemlist>

<section DESCRIPTION>

An <xref bean(n)> object is a TclOO object that can be automatically 
checkpointed and restored as part of the program's state, i.e., as part 
of an Athena scenario.  Every bean is defined in the context of a
beanpot(n) object; beans in the same pot are saved and restored together.
The beanpot(n) is also responsible for creating bean objects, 
assigning bean IDs (which are unique and persistent within a pot) and for
various bean-ID-related queries.<p>

Essentially, the application will create a bean pot for each distinct set of 
beans in memory (i.e., a pot for each scenario), and then use that pot to 
manage, save, and restore the set of beans.  All beans should be created
using beanpot(n)'s <iref new> subcommand.<p>

Each bean knows what pot it is in; the pot's instance command is stored
in the bean's <tt pot> instance variable, which cannot be changed.<p>

<subsection "Bean IDs">

Every instance of <xref bean(n)> and its subclasses has a unique numeric 
ID within its bean pot; beans can be looked up given their IDs.  
The ID is stored in a predefined instance 
variable called <code>id</code>, which cannot be changed.<p>

The bean ID is assigned by the bean pot's <iref new> method when the bean
is first created, and persists across <iref checkpoint> and 
<iref restore>.<p>


<subsection "Detecting Changes">

Each beanpot(n) instance is a <xref saveable(i)>, so that the beans in a 
pot can be checkpointed and restored with the Athena scenario.  
Consequently, beanpot(n) needs to know when there are unsaved changes to 
beans.  Bean subclass methods can signal that
changes have been made by calling their pot's <iref markchanged> method.
Further, the bean's <xref bean(n) "set"> method always sets the changed 
flag.  Thus, it is often useful for bean methods to set instance variables 
using the <tt set> method, like this:

<pre>
    my set <i>var</i> <i>value</i>
</pre>

A method that makes many changes to the subclass's own variables can instead
use the normal Tcl <code>set</code> command, and call
<iref markchanged> when done.<p>

The <xref bean(n)> class provides <tt lappend> and <tt ldelete> 
methods as well, for modifying list-valued variables with notification.
In general, all <xref bean(n)> methods that update instance variables 
notify the containing beanpot automatically.<p>

<subsection "Checkpoint/Restore">

Each beanpot(n) instance is a <xref saveable(i)>, and thus can be plugged
into Athena's checkpoint/restore mechanism.  Note that bean IDs are 
preserved across checkpoint/restore, but bean object names are not.<p>

The beanpot(n)'s <iref checkpoint> method doesn't actually return a 
checkpoint.  Rather, it's a trigger for the pot to save its beans in its
configured <tt -rdb>'s <tt beans> table.  The entries are tagged with 
the pot's <tt -dbid>, which defaults to "<tt pot>".<p>

<subsection "Delete/Undelete">

The <iref delete> and <iref undelete> commands support 
cascading deletion of beans with undo.  To delete a bean, pass its ID
to <iref delete>, which returns a checkpoint-like delete set.  To 
undo the deletion, pass the delete set to <iref undelete>.<p>

<section "CLASS COMMANDS">

This module defines the following commands:<p>

<deflist commands>

<defitem "beanpot" {beanpot <i name> ?<i options>?}>

Creates a new beanpot object with the given <i name> and options, within
which new beans may be created.  The pot's contents may be checkpointed 
and restored.  When the pot is <iref reset> or destroyed, all beans 
contained within it are destroyed as well.<p>

The valid options are as follows:<p>

<deflist options>

<defopt {-rdb <i rdb>}>

Gives the name of the run-time database (RDB), an 
<xref scenariodb(n)> instance.  Checkpoints and restores will be done
relative to this RDB.<p>

If the <tt -rdb> is not set, the bean pot cannot be checkpointed or 
restored.<p>

This option is read-only after the bean pot is created.<p>

<defopt {-dbid <i dbid>}>

The application can checkpoint multiple bean pots to a single
<tt -rdb>.  When a bean pot is checkpointed, its entries are tagged with
the <i dbid>, which defaults to "<tt pot>".  If an application uses 
multiple bean pots with respect to a single scenario, each pot should
be given a <tt -dbid> corresponding to its role.<p>

It is an error for two bean pots two have the same <tt -rdb> and 
<tt -dbid> in the same application.<p>

This option is read-only after the bean pot is created.<p>

</deflist options>

</deflist commands>

<section "INSTANCE COMMANDS">

Each instance of the beanpot(n) type has the following subcommands:<p>

<deflist instance>

<defitem "changed" {<i pot> changed}>

Returns 1 if any of the pot's bean data has changed, and 0 otherwise.  
(This is part of beanpot(n)'s <xref saveable(i)> interface.)<p>

<defitem "cget" {<i pot> cget <i>option</i>}>

Returns the value of the named configuration option.  See
<iref beanpot> for a list of options.<p> 

<defitem "checkpoint" {<i pot> checkpoint ?-saved?}>

Checkpoints the beans in the pot to the configured <tt -rdb>, tagging
them with the configured <tt -dbid>.  If <b>-saved</b> is given, then
the <iref changed> flag is cleared.  (This is part of
beanpot(n)'s <xref saveable(i)> interface.)<p>

<defitem "configure" {<i pot> configure <i>option value ...</i>}>

In principle, this sets the value of one or more of the 
<xref beanpot(n)> configuration options; however, all of the options
are read-only after the pot is created.<p>


<defitem "delete" {<i pot> delete <i>id</i>}>

Deletes the bean with the given <i>id</i>, and returns a "delete set" 
that can be used to undelete it (under normal undo conditions).  If the
bean owns other beans and uses bean slots properly 
(see <xref bean(n)>) the owned beans will be 
included in the delete set and will be undeleted
with their owner.<p>

<defitem "dump" {<i pot> dump}>

Returns a dump of information about all beans in the pot.<p>

<defitem "forget" {<i pot> forget <i>id</i>}>

<b>Private.</b> Unregisters the bean with the given <i>id</i> when it is 
destroyed.  This command is solely for the use of the <xref bean(n)>
and should not be used by other clients.<p>

<defitem "get" {<i pot> get <i>id</i>}>

Returns the bean object with the given ID, throwing an error if there is 
no such bean in the pot.<p>

<defitem "has" {<i pot> has <i>id</i>}>

Returns 1 if the pot contains a bean with the given <i>id</i>, and
0 otherwise.<p>

<defitem "hasa" {<i pot> hasa <i cls id>}>

Returns 1 if the pot contains a bean with the given <i id> which is also
a member of the given <i cls> (or one of its subclasses) and 0 
otherwise.<p>

<defitem "ids" {<i pot> ids ?<i cls>?}>

By default, returns a list of the IDs of all beans in the pot.  If
<i cls> is given, returns a list of the IDs of the beans that are 
members of that class or its subclasses.<p>


<defitem "lastid" {<i pot> lastid}>

Returns the unique ID of the most recently created bean in the pot
(which is, not coincidentally, the bean with the largest ID number).<p>

<defitem "markchanged" {<i pot> markchanged}>

Sets the pot's <iref changed> flag.  A bean instance should call 
this when it knows that its data has changed.  Note that all 
<xref bean(n)> subcommands that modify the bean's data call this routine
automatically.<p>

<defitem "new" {<i pot> new <i cls> ?<i args...>?}>

Creates an instance of the named <xref bean(n)> subclass, <i cls>,  
passing any additional arguments to the subclass constructor, and 
returning the new object's name.  The new bean
is automatically assigned an ID and placed in the pot.<p>

The bean's name will include the <i pot>, an indicator of the bean's
subclass, and the bean's ID, as an aid to debugging.<p>

<defitem "nextid" {<i pot> nextid}>

Returns the unique ID that will be assigned to the next bean to be created.
Application code should generally not need to call this, though it might
be useful in some circumstances.  Note that <iref setnextid> can
be used to control ID assignment.<p>

<defitem "reset" {<i pot> reset}>

Deletes all beans from the pot resets the pot to its creation state.  
This command is primarily for use by the test suite, though it can
also be called when creating a new scenario.<p>

<defitem "restore" {<i pot> restore <i>checkpoint</i> ?-saved?}>

Triggers the restoration of a checkpoint stored in the 
<tt -rdb>; the <i>checkpoint</i> value is empty and ignored.  By
default, the <iref changed> flag is set; if <b>-saved</b> is given,
the <iref changed> flag is cleared.  (This is part of
beanpot(n)'s <xref saveable(i)> interface.)<p>

<defitem "setnextid" {<i pot> setnextid <i>nid</i>}>

Sets the bean ID, <i>nid</i>, to be returned the next time 
<iref nextid> is used to assign a bean ID.  The <i>nid</i> must
be greater than <iref lastid> to have any effect.<p>

This command is for use in <xref order(n)> <xref order(n) setredo>
scripts, to ensure that an order produces the same bean IDs on redo.<p>


<defitem "uncreate" {<i pot> uncreate <i>bean</i>}>

This command is used by the undo code for bean(n) mutators that create new 
beans.  This command verifies that the <i>bean</i> is
the most recently created bean and destroys it<p> 

<defitem "undelete" {<i pot> undelete <i>deleteSet</i>}>

Undoes a call to <iref delete> given the <i>deleteSet</i> returned
by <iref delete>.  Normal undo conditions apply; if any other changes
have been made to beans since the deletion, they must be undone first.<p>

<defitem "validate" {<i pot> validate <i>id</i>}>

Returns <i id> unchanged if there is a bean with that ID in the pot, and
throws <b INVALID> otherwise.<p>

<defitem "valclass" {<i pot> valclass <i cls id>}>

Returns <i id> unchanged if there <iref isa> bean with that class and ID
in the pot, and throws <b INVALID> otherwise.<p>

<defitem "view" {<i pot> view <i>id</i> ?<i>view</i>?}>

Returns a view dictionary for the bean with the given <i>id</i>.<p>

</deflist instance>


<section ENVIRONMENT>

This package requires Tcl 8.5 or later, plus the TclOO package.<p>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

New module, based on code abstracted from <xref bean(n)>.<p>

</manpage>




