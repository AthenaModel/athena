<manpage {athena(n) athenadb(n)} "Athena Private Scenario Type">

<section SYNOPSIS>

<pre>
package require athena <version>
</pre>

<itemlist>

<section DESCRIPTION>

athenadb(n) is a Snit type whose instances represent entire Athena
scenarios.  It is the main type in the <xref athena(n)> library; 
creating an instance of athenadb(n) creates all of the other objects 
required by a scenario.  It is also a utility object for all objects in 
the scenario; it passes itself to all objects it creates, and they use it 
as the primary means of accessing other objects.<p>

athenadb(n) is a <b private> type, to be used only within the library code.
Note that <xref athena(n)>, the public interface to the library, is a thin
wrapper around athenadb(n), providing only the public operations.<p>


<section "COMMANDS">

This module defines the following commands:<p>

<deflist commands>

<defitem "athenadb create" {athenadb create <i name> ?<i options...>?}>

Creates a new instance of athenadb(n) called <i name>, which becomes a 
Tcl command defined in the current scope; <iref athenadb create> returns
the fully-qualified form of the name.<p>


The following options may be used:<p>

<deflist options>

<defopt {-adbfile <i filename>}>

Specifies the name of an Athena scenario (<tt *.adb>) file.  If given,
the file is loaded immediately.<p>

<defopt {-executivecmd <i cmd>}>

A callback command to be used to define application-specific executive
commands.  It is called with on additional argument, the scenario's
<xref executive(n)> component.  This option is read-only after creation.<p>

<defopt {-logdir <i dirname>}>

Specifies the name of log directory; athenadb(n) should create a 
logger(n) object with this <tt -logdir>.<p>

If the object uses background processing, the background thread 
should use the log directory name created by appending ".bg" to this 
directory name.<p>

<defopt {-scratch <i dirname>}>

Names a scratch directory where athenadb(n) can write debugging files.
Defaults to the current working directory.<p>

<defopt {-subject <i name>}>

Specifies the subject <i name> used for any <xref mars:notifier(n)>
events sent by the object.  By default, the <i name> defaults to the
object's fully-qualified command name.<p>

For example, 
athenadb(n) wraps an <xref mars:sqldocument(n)> object used to contain
the scenario's run-time database (RDB).  When monitoring is enabled, the
RDB can generate <xref mars:notifier(n)> events as tables are updated.<p>

</deflist options>

</deflist commands>

<section "INSTANCE COMMAND">

Each athenadb(n) instance has many subcommands, most of which correspond
to a particular subcomponent; e.g., the <tt civgroup> subcommand corresponds
to the module that handles the editing of civilian group entities.<p>

Because this is a private module, and because the list of such components
changes over time, few of these subcommands will be documented here. 
Rather, the man page documents those athenadb(n) subcommands defined 
directly by athenadb(n) <i itself>.  Note that
such athenadb(n) subcommands that are also exposed by 
<xref athena(n)> are listed here, but documented there.<p> 

<deflist instance>

<defitem adbfile {<i obj> adbfile}>
<defitem advance {<i obj> advance ?<i options...>?}>
<defitem busy {<i obj> busy <i subcommand> ?<i args...>?}>
<defitem canlock {<i obj> canlock}>
<defitem dbsync {<i obj> dbsync}>
<defitem enter {<i obj> enter <i options...>}>
<defitem idle {<i obj> idle}>
<defitem interrupt {<i obj> interrupt}>
<defitem interruptible {<i obj> interruptible}>
<defitem is {<i obj> is <i predicate>}>
<defitem isbusy {<i obj> isbusy}>
<defitem load {<i obj> load <i filename>}>
<defitem lock {<i obj> lock}>
<defitem locked {<i obj> locked}>
<defitem paste {<i obj> paste <i subcommand> ?<i args...>?}>
<defitem progress {<i obj> progress ?<i value>?}>
<defitem rdb {<i obj> rdb <i subcommand> ?<i args>?}>
<defitem reset {<i obj> reset}>
<defitem save {<i obj> save ?<i filename>?}>
<defitem state {<i obj> state}>
<defitem statetext {<i obj> statetext}>
<defitem unlock {<i obj> unlock}>
<defitem unlocked {<i obj> unlocked}>
<defitem unsaved {<i obj> unsaved}>
<defitem version {<i obj> version}>

These commands and their subcommands are documented in the 
<xref athena(n)> man page.<p>

<defitem eval {<i obj> eval ...}>
<defitem delete {<i obj> delete ...}>
<defitem exists {<i obj> exists ...}>
<defitem grab {<i obj> grab ...}>
<defitem last_insert_rowid {<i obj> last_insert_rowid ...}>
<defitem monitor {<i obj> monitor ...}>
<defitem onecolumn {<i obj> onecolumn ...}>
<defitem query {<i obj> query ...}>
<defitem schema {<i obj> schema ...}>
<defitem tables {<i obj> tables ...}>
<defitem ungrab {<i obj> ungrab ...}>

These commands and their subcommands provide read/write access to the
underlying run-time database (RDB), a <xref scenariodb(n)> object.<p>

<defitem component {<i obj> component <i name>}>

Returns the fully-qualified command name for the named component, so that
it can be passed to other objects that need direct access.  The following
components are accessible:<p>

<deflist components>
<def {clock}>
The instance's simulation clock, a <xref weekclock(n)> object.<p>

<def {rdb}>
The instance's run-time database object, a <xref scenariodb(n)> object.<p>

</deflist components>

<defitem cprofile {<i obj> cprofile ?<i depth>? <i component args...>}>

This is exactly like <iref profile>, but the command to call is an
<xref athenadb(n)> subcomponent called as a subcommand of <i obj>.<p>


<defitem delete {<i obj> delete ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem eval {<i obj> eval ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem exists {<i obj> exists ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem grab {<i obj> grab ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem last_insert_rowid {<i obj> last_insert_rowid}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem loadtemp {<i obj> loadtemp <i filename>}>

Loads the scenario from the named <tt *.adb> file into this scenario
object, throwing away any previous data.  The scenario will be marked
<iref unsaved>, and the <i filename> will not be remembered. Afterwards, 
the scenario will be <i locked> or <i unlocked> depending on the loaded 
data.<p>

Together with <iref savetemp>, this command allows athenadb(n) to save 
itself to a temporary file, run some process on the contents of that file
(i.e., in another thread) and load the results, while setting the 
<iref unsaved> flag properly and not changing the user's <iref adbfile>.<p>

<defitem log {<i obj> log <i level component message>}>

Adds a message to the scenario's log by passing the arguments to the
<tt logcmd>.  If <i component> is the empty string, the last part of the
scenario's <tt -subject> is used; otherwise, the specified <i component>
is joined to the <tt -subject> with a ".".  Thus, if <tt -subject> is 
"adb" then the econ model logs as "adb.econ".<p>

<b TBD:> This might be silly.  We can't include multiple scenarios in 
one log without confusion, because they'll all have different simulation
times.  Reconsider this.<p>

<defitem marksaved {<i obj> marksaved}>

Marks the RDB and all components saved.<p>

<defitem monitor {<i obj> monitor ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem notify {<i obj> notify <i component event> ?<i args...>?}>

Sends a <xref mars:notifier(n)> event on behalf of <xref athena(n)>.  If
the <i component> name is "", then the event is sent by the 
<tt -subject>; otherwise, the <tt -subject> is suffixed with 
"<tt>.<i component></tt>"<p>

<defitem onecolumn {<i obj> onecolumn ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem order {<i obj> order <i subcommand> ?<i args...>?}>

<b TBD:> Document these in athena(n).<p>

The subcommands of this command are passed along to the scenario's
"order flunky".  Most subcommands are documented by the
<xref mars:order_flunky(n)> man page; the Athena-specific subcommands
are as follows:<p>

<deflist order>

<defitem "monitor" {<i obj> order monitor ?<i flag>?}>

Sets and queries the monitor flag.  If set, RDB changes taking place
during order execution are monitored, and relevant notifier events are
sent to the application.  See <xref athena(n)> for details.<p>

Defaults to true.<p>

<defitem "transactions" {<i obj> order transactions ?<i flag>?}>

Sets and queries the transaction flag.  If set, all orders are executed
in the context of an SQL transaction; if the order throws an error, the
transaction is rolled back, thus preventing corruption of the RDB.<p>

Defaults to true.<p>

</deflist order>

<defitem profile {<i obj> profile ?<i depth>? <i command...>}>

Calls the command once using <tt time>, in the caller's context,
and the logs the outcome, returning the commands return value.
In other words, you can prefix any statement with 
"<tt><i obj> profile</tt>" and profile that call without changing code
or adding new routines.<p>

If the <i depth> is given, it must be an integer; that many "*" characters
are added to the beginning of the log message.  This is useful when 
profiling calls within another profiled call.<p>

<defitem query {<i obj> query ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem rdbfile {<i obj> rdbfile}>

Returns the name of the scenario's run-time database (RDB) file.  Note
that this will change on <iref load> or <iref reset>.<p>

<defitem safe {<i obj> safe <i subcommand> <i args>}>

This command configures the underlying RDB, a <xref scenariodb(n)> object,
for readonly mode using an SQLite3 authorizer command and the executes the
given athenadb(n) subcommand in that context.  Thus, to process an SQL
query with no danger that it will modify the database, one can write code
like this:

<example>
# Do this
puts [$myathenadb safe query $sql]

# Not this
puts [$myathenadb query $sql]
</example>

The <iref safe> command will work with any athenadb(n) subcommand, but it's
intended primarily for use with <iref eval>, <iref exists>,
<iref onecolumn>, and <iref query>.<p>

<defitem savetemp {<i obj> savetemp <i filename>}>

Saves the scenario to disk as an <tt .adb> file called <i filename>.  
Any existing file of the same name is deleted.  The state of the 
loaded scenario is completely unchanged.<p>

On failure, throws "<tt SCENARIO SAVE>".<p>

<defitem schema {<i obj> schema ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem scratch {<i obj> scratch ?<i args...>?}>

Called with no arguments, returns the <tt -scratch> directory.  Any
arguments are joined to the scratch directory as by <tt file join>, and
the resulting path is returned.<p>

<defitem send {<i obj> send}>
This command is delegated to the underlying <xref order_flunky(n)> 
component.<p>

<defitem tables {<i obj> tables ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

<defitem tkloaded {<i obj> tkloaded}>

Returns 1 if Tk is loaded, and 0 otherwise.<p>

<defitem ungrab {<i obj> ungrab ...}>
This command is delegated to the underlying <xref scenariodb(n)> object.<p>

</deflist instance>

<section "COMPONENTS">

The following components are exposed as athenadb(n) subcommands.  See
the code for details of their APIs.  Note that <xref athena(n)> documents
those component subcommands which are made available by the public 
facade.<p>

<topiclist>
<topic aam>
<topic abevent>
<topic absit>
<topic activity>
<topic actor>
<topic agent>
<topic agent>
<topic aram>
<topic autogen>
<topic background>         
<topic bgslave>         
<topic broadcast>
<topic bsys>           
<topic cap>            
<topic cash>           
<topic civgroup>       
<topic control>        
<topic control_model>  
<topic coop>           
<topic coverage_model> 
<topic curse>          
<topic demog>          
<topic econ>           
<topic executive>      
<topic exporter>       As <tt export></topic>
<topic flunky>         As <tt order></topic>
<topic frcgroup>       
<topic gofer>          
<topic group>          
<topic hist>           
<topic hook>           
<topic hrel>           
<topic inject>         
<topic iom>            
<topic map>            
<topic nbhood>         
<topic nbrel>          
<topic orggroup>       
<topic parmdb>         
<topic paster>         As <tt paste></topic>
<topic payload>        
<topic personnel>      
<topic plant>          
<topic pot>            As <tt bean></topic>
<topic ptype>          
<topic rdb>            
<topic ruleset>        
<topic sanity>         
<topic sat>            
<topic security_model> 
<topic service>        
<topic sigevent>       
<topic sim>            
<topic simclock>       As <tt clock></topic>
<topic stance>         
<topic strategy>       
<topic unit>           
<topic vrel>           

</topiclist>



<section "SQL FUNCTIONS">

athenadb(n) defines many SQL functions for use in database queries.  
See <xref athena(n)> for details.<p>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

New package derived from Athena internals.<p>

</manpage>




