<manpage {projectlib(n) orderx(n)} "Order Base Class">

<section SYNOPSIS>

<pre>
package require projectlib <version>
</pre>

<itemlist>

<section DESCRIPTION>

The <tt ::projectlib::orderx> class is part of the Mars Order Processing
framework, which includes <xref orderx(n)>, <xref order_set(n)>, and
<xref order_flunky(n)>.<p>

In this framework, an "order" is a request from the user to change the
program's state in some way, e.g., to add, update, or delete an entity
of some kind.  Each type of order has its own parameters; together they
have the same interface, which supports validation, logging, and user
undo/redo.<p>

An order is created as an instance of an order leaf class, which is a
descendant of <tt ::projectlib::orderx>.  It can be validated and executed
on its own; more typically, it is executed by an instance of 
<xref order_flunky(n)>, which handles the undo/redo stacks.<p>

New subclasses of orderx(n) are defined using an instance of 
<xref order_set(n)>, which ensures that the each order class has the 
right superclass and good default <xref oohelpers(n) meta>data settings.
The order set then provides introspection on the set of
defined order classes and validation of order type names.<p>

Each application or library that defines orders will usually define its
own <xref order_set(n)> and <xref order_flunky(n)> objects, and may
choose to subclass <xref orderx(n)> and <xref order_flunky(n)>.<p>

<img {src="orderx.svg" width="100%"}><p>

<subsection "Intermediate Base Classes">

When the Mars Order Processing framework is used in an application context,
the order classes can usually access all needed resources using well-defined
names.  When it is used in a library context, e.g., to control an instance
of the library, then the orders will typically need access to the instance
command.  This is usually done by subclassing orderx(n) to make an 
intermediate base class.  All order types defined by the application would
then be subclasses of the intermediate base class.  <xref order_set(n)> can
be configured to define the set's orders with the appropriate base class.

TBD -- still figuring this out.<p>

<section "ORDER CLASSES">

The actual orders are leaf classes descended from 
<tt ::projectlib::orderx>, as defined using <xref order_set(n)>'s 
<xref order_set(n) define> method.  Each order class represents a
particular kind of operation on the application or library's
data.  This man page explains the standard interface for every 
order class.<p> 

<subsection "Order Lifecycle">

Each instance of an order class goes through a lifecycle, as indicated
by the four order states: <b CHANGED>, <b INVALID>, <b VALID>, 
and <b EXECUTED>.  The order object's current state is returned by its
<iref state> method.<p>

When first created, an order is in the <b CHANGED> set; it returns to
this state whenever the order's parameters are modified.<p>

When the order's <iref valid> method is called, the order's parameters
are validated, and it goes to the <b VALID> or <b INVALID> state.<p>

If the order is in the <b VALID> state, then calling its 
<iref execute> method makes the order take effect; the order will be in 
the <b EXECUTED> state.<p>

It is usually possible to undo an <b EXECUTED> order.  If the 
<iref canundo> method returns a true value, then the <iref undo> method
will undo the order's effects and the order will return to the <b VALID>
state.<p>

<b NOTE:> Undo/redo will only work if proper undo/redo stack discipline is 
maintained.  For this reason, orders are usually executed, undone, and
redone under the control of an <xref order_flunky(n)>.  See
<xref "EXAMPLES">, below.<p> 

<subsection "Customization">

Subclasses of <tt ::projectlib::orderx> are expected to customize the
parent class in the following ways:<p>

<ul>
<li> Define the order <xref "Metadata">.<p>

<li> Override the <iref _validate> method to validate the order's 
     parameters.  The method may use the <xref "Validation Helpers">.<p>

<li> Override the <iref _execute> method to do whatever the order is
    suppose to do.  The method may use the 
    <xref "Execution Helpers">.<p>

<li> Optionally, override the <iref narrative> method to return 
     an undo/redo narrative based on the actual parameter values.  
     If this is not overridden, the order's <iref title> will be used 
     as the narrative string.<p>

<li> Optionally, override the <iref canundo> and <iref undo> methods.
     Usually, the <iref _execute> method will call <iref setundo>
     to save an undo script, which the existing methods will use to
     undo the order.  But the order may choose to handle everything
     directly.<p>
</ul>

See <xref "EXAMPLES">, below.<p>

<section COMMANDS>

The following commands create instances of orderx(n), which isn't
usually all that useful.<p>

<deflist>

<defitem "orderx create" {::projectlib::orderx create <i>name</i>}>

Creates a new instance of <tt ::projectlib::orderx>
called <i name>.  There are no other constructor arguments.<p>

It is more usually to use <iref orderx new> to create instances of an order
class.<p>

<defitem "orderx new" {::projectlib::orderx new}>

Creates a new instance of <tt ::projectlib::orderx> with an arbitrary
name.  There are no other constructor arguments.<p>

</deflist>

<section "INSTANCE COMMAND">

Each instance orderx(n) or its subclasses has at least the following 
groups of subcommands.<p>

<subsection "Metadata">

Each order class will have a number of attached metadata values; these
are defined by the <xref oohelpers(n) meta> class definition statement.
The <tt meta> statement takes a <i name> and <i value> and defines an
instance method and a class method, both called <i name>, and both
returning the <i value>.<p>

By convention, subclasses of orderx(n) should define the following metadata
items.  Note that <xref order_set(n)>'s <xref order_set(n) define> method
provides defaults for these.  In addition, the programmer may choose
to add any additional metadata he likes.<p>

<deflist meta>

<defitem name {<i>obj</i> name}>

Returns the name of the order, e.g., "MY:ORDER".  By convention, orders
have names in all capital letters with ":" as a separator.  This is 
distinct from the order class's name, which is usually the order name
qualified by some namespace.<p>

The <tt name> metadata item is usually defined automatically by
<xref order_set(n)>.<p>

<defitem title {<i>obj</i> title}>

Returns the title of the order, e.g., "My Order".<p>  If the order class
doesn't define it explicitly, then <xref order_set(n)> makes it the same
as the order name.<p>

<defitem defaults {<i obj> defaults}>

<b Required.> Returns the order's default parameter settings, a dictionary of default
values by parameter names.  In addition, the keys of the dictionary
are the official specification of the order's parameter names.  Every
leaf class should define this metadata value.<p>

<defitem sendstates {<i>obj</i> sendstates}>

Returns a list of the <xref order_flunky(n)> states in which this order 
may be sent.  "Send States" are a means of controlling which orders can
be used at different times; see <xref order_flonky(n)> for details.<p>

<xref order_set(n)> defaults this value to the empty list, which is
appropriate if "send states" are not being used.<p>

<defitem form {<i obj> parmtags}>

Parmtags, or "parameter tags", relate order parameter names to data types
that can be "pucked" in the application's GUI.  The value of this item is
a dictionary of data types by parameter name.<p>

<xref order_set(n)> defaults this value to the empty list, which is
usually appropriate.<p>

</deflist meta>

<subsection "Parameter Access">

The order's parameters and their default values are defined by the order
class's <i defaults> metadata item.  Parameter values are saved in the 
instance's <tt parms()> array.  Order classes defined using 
<xref orderset(n)> can use the <tt parms()> array freely in all of their
methods; other classes would need to call <tt my variable parms> in each
relevant method to bring <tt parms()> into scope.<p>

The following subcommands manipulate the <tt parms()> array.<p>

<deflist parms>

<defitem cget {<i obj> cget <i option>}>\

This command is identical to <iref get>, but expresses the parameter
name using option notation, e.g., the parameter "<tt foo>" is entered as
"<tt -foo>"<p>

<defitem configure {<i obj> configure <i option value...>}>\

Sets the value of one or more order parameters using option notation.<p>

<defitem get {<i obj> get <i parm>}>

Returns the value of the named <i parm>.<p>

<defitem getdict {<i obj> getdict}>

Returns a dictionary of the order's parameters by parameter name.<p>

<defitem set {<i obj> set <i parm value>}>

Sets the <i value> of the named <i parm>, and changes the order's 
<iref state> to <b CHANGED>.  This command cannot be used when the
order is in the <b EXECUTED> state.<p>

<defitem setdict {<i obj> setdict <i parmdict>}>

Sets some or all of the order's parameters given a dictionary of 
parameter names and values.  Note that <iref set> is used to make the
actual changes.<p>

</deflist parms>

<subsection "Other Queries">

The user may also make the following queries:<p>

<deflist query>

<defitem narrative {<i obj> narrative}>

Returns a narrative string for the order instance.  This string
defaults to the order's title, e.g., "My Order"; the class may override
this method to provide a more detailed narrative.<p>

The narrative primarily appears in the Edit/Undo and Edit/Redo menu items.<p>

<defitem parms {<i obj> parms}>

Returns a list of the names of the order's parameters, in the order in
which they appear in the order's <iref defaults>.<p>

<defitem state {<i obj> state}>

This command returns the order object's own state, which is one of
<b CHANGED>, <b VALID>, <b INVALID>, or <b EXECUTED>:<p>

<ul>
    <li> A newly created or modified order will be in the <b CHANGED>
         state.<p>

    <li> Calling <iref valid> attempts to validate the order's parameters.
         Afterwards the state will be either <b>VALID</b> or 
         <b>INVALID</b>.<p>

    <li> If the order's state is <b>VALID</b>, then calling 
        <iref execute> will execute it; and will go
         into the <b EXECUTED> state.<p>

    <li> Orders in the <b EXECUTED> state can be undone by calling
         <iref undo>, but cannot be modified in other ways.<p>

    <li> If the order has been executed, then calling <iref undo> will
         undo its effects, returning it to the <b VALID> state.<p>
</ul>

<defitem prune {<i obj> prune}>

Returns a dictionary of order parameter names and values that is pruned
of all parameters with default values.<p>

</deflist query>

<subsection "Order Operations">

The following methods are used to move an order through its lifecycle.
See <xref "Order Lifecycle">, above.<p>

<deflist ops>

<defitem valid {<i obj> valid}>

Returns 1 if the order's parameters are valid and 0 otherwise.  If
the order was not already known to be valid, it will be validated by
calling its <iref _validate> method, and the order's state will be
changed to <b VALID> or <b INVALID> as appropriate.<p>

<defitem _validate {<i obj> _validate}>

This method must be overridden by the subclass to actually validate
the order's parameters.  It should use the <xref "Validation Helpers">
to do this.<p>

<defitem errdict {<i obj> errdict}>

If the order's state is <b INVALID>, then this method returns a dictionary
of error messages by parameter name.  The dictionary may also contain
a "*" key whose value is an error message applying to the order as a 
whole.<p>

<defitem execute {<i obj> execute ?<i flunky>?}>

Executes the order, optionally in the context of an <xref order_flunky(n)>
called <i flunky>.  If a <i flunky> is provided, then the order preserves
the flunky's execution 
mode; this is made available to the order code via its <iref mode> method.
<p>

The order is executed by calling its <iref _execute> method, and passes
along that method's return value to its caller.<p>

Only <b VALID> orders can be executed; after execution, the order will
be in the <b EXECUTED> state.<p>

<defitem _execute {<i obj> _execute ?<i flunky>?}>

The subclass must override this method to carry out the order's work on 
execution.  The method may use the <xref "Execution Helpers">.  This
method's return value will be returned to the ultimate caller.<p>

Usually an undone order can be redone simply by executing the order a
second time, in the same way.  Sometimes in order to redo the order 
identically, the order requires information produced during the first
execution.  In this case, the order should save that information in
an instance variable so that it is available on redo.<p>

Similarly, if the <iref execute> method was called with a <i flunky>,
it is passed along to this method; and if there is any information
from the flunky that the order needs for undo/redo, it should be saved
in an instance variable.<p>

<defitem canundo {<i obj> canundo}>

Returns 1 if the order is <b EXECUTED> and can be undone, and 0 otherwise.
<p>

By default, the order can be undone if the <iref _execute> method 
specified an undo script using <iref setundo>.  The developer may choose
to override this method in subclasses.<p>

<defitem undo {<i obj> undo}>

By default, this method undoes the effects of an <b EXECUTED> order by
calling the order's undo script, which was set by calling <iref setundo>
in the order's <iref _execute> method.  If desired, the developer may 
implement the undo algorithm directly in this method, in which case 
<iref _execute> should save any necessary undo data in instance variables
and override <iref canundo> appropriately.<p>

</deflist ops>

<subsection "Validation Helpers">

The following methods are for use in subclasses' <iref _validate> method.
They are "protected", i.e., they can be used only in orderx(n) 
subclasses.<p>

<deflist valhelp>

<defitem prepare {my prepare <i>parm</i> ?<i>options...</i>?}>

The <iref prepare> method prepares the parameter for use by the
<iref _execute> method.  It can transform and validate the parameter 
value in a number of ways.<p>

It is customary to begin each order's <iref _validate> method with a 
succession of <iref prepare> commands, one for each parameter.  The
method's useful work is done by the options, which are processed in
order from left to right.  The options are as follows:<p>

<deflist options>

<defopt {-listof <i>valtype</i>}>

This is similar to <code>-type</code>.  It indicates that the value is
a list of which every element must be a member of the specified
validation type.  If any element is invalid, the parameter is
<iref reject>ed.<p>

<defopt {-listwith <i>valcmd</i>}>

This is similar to <tt -with>.  It indicates that the value is a list of
which every element must be valid according to the specified validation
command.  If any element is invalid, the parameter is <iref reject>ed.<p>

<defopt {-normalize}>

Normalizes internal whitespace: all internal whitespace sequences are
replaced with single spaces.<p>

<defopt {-num}>

Tcl interprets integer numbers with leading zeroes as octal numbers.
To prevent this, this option removes leading zeroes from parameter
values which are non-zero integers.  Floating point and other
non-integer values are left alone, and plain zeroes are left alone.<p>

<defopt {-oneof <i>list</i>}>

Ensures that the parameter's value is a member of the <i>list</i>.  If
the list is short enough, the valid values will be included in any
error message.<p>

<defopt {-required}>

The parameter is required; if the parameter's value is the empty
string, consequently, it is <iref reject>ed.<p>

<defopt {-selector}>

The parameter is a <xref dynaform(n)> selector; validate that its
value matches one of the selector's cases.  This option is used in
place of a <code>-type</code> option.<p>

<defopt {-someof <i>list</i>}>

Ensures that the parameter's value consists of a list of values, each 
of which is a member of <i>list</i>.  If <i>list</i> is short enough,
the valid values will be included in any error message.<p>

<defopt {-toupper}>

Converts the parameter's value to all uppercase.<p>

<defopt {-tolower}>

Converts the parameter's value to all lowercase.<p>

<defopt {-type <i>valtype</i>}>

Indicates that the value of the parameter must belong to a validation
type called <i>valtype</i>.  Specifying this option is essentially the
same as including the following code snippet in the order body:<p>

<example>
    my checkon $parm {
        set parms($parm) [{*}$valtype validate $parms($parm)]
    }
</example>

The <i>valtype</i>'s "validate" method is used to validate the value,
and may also put it into canonical form.<p>

Note that 

<example>
my prepare -type ::foo
</example> 

is simply a convenient shorthand for

<example>
my prepare -with {::foo validate}
</example>

<defopt {-with <i>valcmd</i>}>

Indicates that the value of the parameter must be acceptable to a 
validation command called <i>valcmd</i>.  Specifying this option is 
essentially the same as including the following code snippet in the order 
body:<p>

<example>
    my checkon $parm {
        set parms($parm) [{*}$valcmd $parms($parm)]
    }
</example>

The validation command should accept and return a valid input, possibly
putting it into canonical form, and throw <b INVALID> for invalid inputs.<p>

</deflist options>

<defitem badparm {my badparm <i parm>}>

This method returns 1 if there's no point in validating parameter 
<i parm> any further, and 0 otherwise.  The parameter is "bad" if it
has no value (i.e., its value is the empty string) or if it has already
been <iref reject>ed.<p>

<defitem reject {my reject <i parm errtext>}>

Rejects the named <i parm> with the given error text, saving the 
error text for later use.  This command doesn't throw an error; 
typically we want to reject as many of the parameters as possible.<p>

<defitem checkon {my checkon <i parm script>}>

If the given <i parm> is not known to be "bad" (see <iref badparm>), 
then this method executes the <i script> to validate it further.  The
script may call <i reject> to reject the parameter; or, the parameter
will be rejected automatically if the script throws <b INVALID>
(as it might if a validation type is used to validate the value).<p>

For example, the following code will validate that parameter <i i>
is an integer, only if <i i> isn't already known to be "bad".<p>

<example>
my checkon i {
    snit::integer validate $parms(i)
}
</example>


<defitem returnOnError {my returnOnError}>

Usually we want to try to find all of the errors in an order; but sometimes
a particular error will preclude further processing.  This command simply
causes the <iref _validate> method to return early, only if at least one 
parameter value is known to be invalid.<p>

</deflist valhelp>

<subsection "Execution Helpers">

The following methods are for use in subclasses' <iref _execute> method.
They are "protected", i.e., they can be used only in orderx(n) 
subclasses.<p>

<deflist exechelp>

<defitem setundo {my setundo <i script>}>

Saves the undo <i script>.  If a non-empty string is saved the order
will be undoable; otherwise not--unless the subclass overrides 
<iref canundo> and <iref undo>, in which case <iref setundo> is 
probably irrelevant.<p>

<defitem mode {my mode}>

If the order was executed by an <xref order_flunky(n)>, this command
will return its execute mode, one of <b gui>, <b normal>, or 
<i private>.  Otherwise, it will return <b private>.  (See 
<xref order_flunky(n)> for details.)  Note that an <b EXECUTED> order
preserves the flunky's mode at the time it was executed.<p>

In particular, if the mode is <b gui> then the order may access the 
GUI, e.g., to pop up confirmation dialogs.<p>

<defitem cancel {my cancel}>

Cancels execution of the order.  This is usually called in response to
a selection of "Cancel" in a confirmation dialog.<p>

</deflist exechelp>

<section "EXAMPLES">

<subsection "Basic Use">

First, create an order_set for this package's orders.  This is usually
# done in the <tt pkgModules.tcl> file, just prior to the modules that
define orders.<p>

<example>
::projectlib::order_set ::mylib::orders
</example>

Then, use the order set to define the orders.  See <xref order_set(n)>
for metadata defaults.<p>

<example>
mylib::orders define BSYS:PLAYBOX:UPDATE {
    meta title      "Update Playbox-wide Belief System Parameters"
    meta sendstates {PREP}
    meta defaults   {
        gamma 1.0
    }

    method narrative {} {
        return "Set Playbox Gamma to [format %g $parms(gamma)]"
    }

    method _validate {} {
        my prepare gamma -required -num -type ::simlib::rmagnitude
    }

    method _execute {} {
        my setundo [bsys mutate update playbox "" [my getdict]]
        return
    }
}
</example>

Next, the library or application must create an <xref order_flunky(n)>
to manage order execution for this set of orders:<p>

<example>
set flunky [::projectlib::order_flunky new ::mylib::orders]
</example>

The flunky can then be used to execute orders in several ways.  For 
example,

<example>
# Send the order
$flunky send normal BSYS:PLAYBOX:UPDATE -gamma 1.5

# Undo the last order
$flunky undo

# Redo the last undone order
$flunky redo
</example>

<section "SEE ALSO">

<xref order_flunky(n)>, <xref order_set(n)>.

<section ENVIRONMENT>

orderx(n) requires Tcl 8.5 or later, plus TclOO.

To use orderx(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the projectlib(n)
library directory.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>





