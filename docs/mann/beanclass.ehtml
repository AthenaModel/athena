<manpage {projectlib(n) beanclass(n)} "Bean Metaclass">

<section SYNOPSIS>

<pre>
package require projectlib 1.0
namespace import ::projectlib::*
</pre>

<itemlist>

<section DESCRIPTION>

A "bean" is a TclOO object that can be automatically checkpointed and restored.
Every "bean" is an instance of a class that is a subclass of 
<xref bean(n)>; and this class must be defined using 
<iref beanclass create>.  Bean classes are used for scenario data that is
stored in memory (rather than in the RDB).<p>

For example, to define a class that represents a pet:<p>

<pre>
    ::projectlib::beanclass create pet {
        # Variable and method definitions
    }
</pre>

Subclasses of <code>pet</code> also need to be defined using 
<iref beanclass create>:

<pre>
    ::projectlib::beanclass create dog {
        superclass pet

        # Variable and method definitions
    }
</pre>

See <xref bean(n)> for more about defining beans, and the constraints placed
upon them.<p>



<section "METACLASS COMMANDS">

This module defines the following commands:<p>

<deflist commands>

<defitem "beanclass create" {beanclass create <i>name script</i>}>

This is the usual TclOO syntax for defining a class; since we are using
the beanclass(n) metaclass, we create it using <iref beanclass create>
rather than <code>oo::class create</code>.  Once the class is created, the 
<code>oo::define</code> and <code>oo::objdefine</code> commands can
be used in the usual way.<p>

</deflist commands>

<section "CLASS COMMANDS">

Classes defined using <iref beanclass create> have all of the usual
subcommands that normal classes have, with the addition of the following:<p>

<deflist class_commands>

<defitem get {<i>class</i> get <i>id</i>}>

Given a bean ID (see <xref bean(n)>), retrieves the bean object with that ID.
The result is constrained to be a member of the <i>class</i> or one of its
subclasses.  The command will throw an error if there is no bean with the 
given ID, or if the bean's class is not of the right type.<p>

In the example above, <pre>pet get 5</pre> will get the bean whose ID is 5,
provided that it is a <code>::pet</code> or <code>::dog</code>.<p>

<defitem exists {<i>class</i> exists <i>id</i>}>

Returns 1 if the <i>id</i> is the bean ID of an instance of <i>class</i> or
its subclasses, and 0 otherwise.<p>

<defitem ids {<i>class</i> ids}>

Returns a list of the IDs of all beans that belong to <i>class</i> or its
subclasses.<p>

<defitem new {<i>class</i> new <i>args...</i>}>

Creates a new instance of the class, generating and returning the object
name automatically.  This is the same as the normal TclOO <code>new</code>
command, except that the generated name is different.  The name will have the 
form "<b>::bean::&lt;class&gt;&lt;id&gt;</b>", where "<b>&lt;class&gt;</b>" 
is the unqualified class name, and "<b>&lt;id&gt;</b>" is the instance's 
bean ID.<p>

In the example above, a <code>::dog</code> instance with bean ID 5 would 
have the name "<b>::bean::dog5</b>".<p>

<defitem validate {<i>class</i> validate <i>id</i>}>

Returns the <i>id</i> if it is the bean ID of an instance of <i>class</i> or
its subclasses, and throws an error message with error code <b>INVALID</b>
otherwise.<p>


</deflist class_commands>

<section ENVIRONMENT>

This package requires Tcl 8.5 or later.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

New package.<p>

</manpage>




