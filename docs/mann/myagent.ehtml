<manpage {projectlib(n) myagent(n)} "myserver(i) User Agent">

<xrefset uri(n) uri(n) "http://core.tcl.tk/tcllib/doc/trunk/embedded/www/tcllib/files/modules/uri/uri.html">

<section SYNOPSIS>

<pre>
package require projectlib <version>
namespace import ::projectlib::myagent
</pre>

<itemlist>

<section DESCRIPTION>

In HTTP-parlance, a "user agent" is a program that accesses an HTTP
server.  An instance of myagent(n) is an object that clients can use
to access data from one or more <xref myserver(i)> servers within
the same application.  See <xref myserver(i)> for information on
what a <xref myserver(i)> is and why it is useful.<p>

In addition, the myagent(n) type is responsible keeping track of the
available myserver(i) instances.<p>

<section COMMANDS>

<deflist commands>

<defitem myagent {myagent <i>name</i> ?<i>options...?</i>}>

Creates a new myagent(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<iref myagent> returns the fully-qualified form of the
<i>name</i>.<p>

Before the new myagent(n) can be used, at least one
<xref myserver(i)> must be registered using
<iref myagent register>.<p>

The myagent(n) may be created with the following options:<p>

<deflist options>

<defopt {-defaultserver <i>name</i>}>

Specifies the name of the registered <xref myserver(i)> which should
retrieve requests when no explicit server name is given.  Defaults to
"app".<p>

<defopt {-contenttypes <i>list</i>}>

Specifies the list of content types acceptable to this client, e.g.,
<b>text/html</b>.  Wildcards may be used, e.g., <b>text/*</b>.  This
list will be passed to the myserver(i) along with the requested URL;
the server will only respond with an acceptable content type.<p>

The myserver(i) must document the content types it is capable of
returning.  Usually it will do so dynamically as <b>text/html</b> at the
address <tt>/urlhelp</tt>.<p>

</deflist options>

<defitem "myagent register" {myagent register <i>server command</i>}>

Registers a <xref myserver(i)> so that it can be accessed by
instances of myagent(n).  The <i>command</i> is the actual
<xref myserver(i)> object, and <i>server</i> is the server name to
be used in <tt>my://</tt> URLs.  By convention, an application's
main servers are <b>app</b> and <b>help</b>.<p>

<defitem "myagent resolve" {myagent resolve <i>base url</i>}>

Given a <i>base</i> URL and some other <i>url</i>, possibly relative,
this command resolves the two into a single <i>url</i>.  For example,
given <tt>my://app/group</tt> and <tt>BLUE</tt>, this command will
return <tt>my://app/group/BLUE</tt>.  If the <i>url</i> were
<tt>/nbhood/N1</tt>, the returned URL would be
<tt>my://app/nbhood/N1</tt> instead.<p>

The client should always use this command (or, equivalently,
the instance's <iref resolve> subcommand) on all links embedded in
returned content, where <i>base</i> is the URL of the returned content
as a whole.<p>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of myagent(n) has the following subcommands:<p>

<deflist instance>

<defitem join {<i>object</i> join <i>args...</i>}>
<defitem split {<i>object</i> split <i>args...</i>}>
<defitem canonicalize {<i>object</i> canonicalize <i>args...</i>}>
<defitem isrelative {<i>object</i> isrelative <i>args...</i>}>

These subcommands are all delegated to the Tcllib module
<xref uri(n)>.  See the Tcllib documentation for more.<p>

<defitem resolve {<i>object</i> resolve <i>base url</i>}>

This is identical to <iref myagent resolve>; it is provided for
convenience.<p>

<defitem get {<i>object</i> get <i>url</i> ?<i>contentTypes</i>?}>

Retrieves the <i>url</i>'s content.  If the URL cannot be retrieved, the
command will throw an error with error code <i>NOTFOUND</i>; the error
message will indicate the reason for the error.<p>

The <i>url</i>'s scheme will default to "<b>my:</b>" and the
<i>url</i>'s server will default to the <code>-defaultserver</code>.
At present only the "<b>my:</b>" scheme is supported.<p>

If one or more <i>contentTypes</i> are given, the returned content will
have the first available content type in the list; if none of the the
requested content types are available, the server will
throw <b>NOTFOUND</b>.  If <i>contentTypes</i> is not given, it
defaults to the value of the <code>-contenttypes</code> option.<p>

</deflist instance>

<section "SEE ALSO">

<xref myserver(i)>.

<section ENVIRONMENT>

Requires Tcl 8.5 or later.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>










