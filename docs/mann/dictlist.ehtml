<manpage {projectlib(n) dictlist(n)} "dictlist(i) Dictionary List Buffer">

<section SYNOPSIS>

<pre>
package require projectlib <version>
</pre>

<itemlist>

<section DESCRIPTION>

dictlist(n) is a tool for building up lists of dictionaries, and for
converting them to various forms (i.e., JSON).

<section "COMMANDS">

<tt ::projectlib::dictlist> is an <tt oo::class>.  It provides the 
following commands.

<deflist commands>

<defitem "dictlist create" {dictlist create <i name> <i spec>}>

Creates a new instance of dictlist(n) with the given command <i name>.
The instance is for building a list of dictionaries, each of which
matches the <i spec>.

Each entry in the spec is a list of two items, the key name and the 
default value of the key.  If the default value is omitted, the key's
default value is the empty string.  The following code creates a dictlist
whose entries will have three keys: <tt this> and <tt theother>, which default to the empty string, and <tt that>, which defaults to the number "5".

<example>
set dl [dictlist create mylist {
    this
    {that 5}
    theother
}]

</example>

<defitem "dictlist new" {dictlist new ?<i spec>?}>

Like <iref dictlist create>, but creates an instance with
an arbitrary name, returning the name.

</deflist commands>


<section "INSTANCE COMMANDS">

Instances of dictlist(n) provide the following subcommands.

<deflist instance>

<defitem add {<i obj> add <i value....>}>

Creates a new dictionary, matching the values on the command line to the
keys one-for-one.  If there are fewer values than keys, the remaining keys
are assigned the value "".  It's an error if there are fewer keys than 
values.  The dictionary is appended to the list.

<defitem addwith {<i obj> addwith ?<i key value...>?}>

Creates a new dictionary with empty values, and then applies the given
keys and values.  The keys may be specified with a leading "-"; it will
be stripped automatically.  It's an error to pass an invalid key.  The
resulting dictionary is appended to the list.

<defitem append {<i obj> append <i dict>}>

Appends the <i dict> to the list.  The <i dict> is assume to match
the object's <i spec>.

<defitem clear {<i obj> clear}>

Resets the object's content to the empty list.

<defitem dicts {<i obj> dicts}>

Returns the list of dictionaries.

<defitem find {<i obj> find <i key value> ?<i key value...>?}>

Returns a list of the items in the dict list that exactly match the
given keys and values.

<b TBD:> One could easily define a family of these: "glob" and "regexp" for
glob and regexp matches, and "findone", "globone", and "regexpone" for
finding the first item in the list, a la SQLite's "onecolumn" command.

<defitem format {<i obj> format ?<i options...>?}>

Uses <xref kite:dictab(n)> to format the list.  The options are as for
the <xref kite:dictab(n)> subcommand of the same name.

<defitem keys {<i obj> keys}>

Returns the list of keys.

<defitem set {<i obj> set <i list>}>

Sets the list of dictionaries.

</deflist instance>

<section AUTHOR>

Will Duquette

<section HISTORY>

Original package, based on <xref mars:order(n)>'s validation commands.

</manpage>





