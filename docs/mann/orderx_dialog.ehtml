<manpage {projectgui(n) orderx_dialog(n)} "Order Dialog Manager">

<section SYNOPSIS>

<pre>
package require projectgui <version>
namespace import ::projectgui::*
</pre>

<itemlist>

<section DESCRIPTION>

orderx_dialog(n) is responsible for creating and managing dialog boxes
for orders defined using <xref orderx(n)>.<p>

orderx_dialog(n)'s dialogs are built around the <xref dynaview(n)> 
widget, which is based on turn on the <xref dynaform(n)> form
specification included in the order's metadata.  See the 
<xref dynaform(n)> man page for information on the standard field
types and on how to define custom field types.<p>

<section "COMMANDS">

orderx_dialog(n) provides the following commands:<p>

<deflist commands>

<defitem "orderx_dialog enter" {orderx_dialog enter <i options...>}>

Pops up an order dialog given the options.  This is the standard way to
pop up an order dialog.  The options are the same as for the dialog 
widget, with the addition of <tt -parmdict>.<p>

<deflist options>

<defopt {-appname <i>string</i>}>

Specifies the name of the application, to be used in the title bar of
the order dialog.<p>

<defopt {-flunky <i flunky>}>

The instance of <xref order_flunky(n)> (or a subclass) that is responsible
for managing order execution for the dialog.<p>

<defopt {-helpcmd <i>cmd</i>}>

If given, the dialog will have a context-sensitive help button.  The
<i>cmd</i> should be a command prefix taking one additional argument,
the name of the order.  The command should then make help available for
that order.<p>

<defopt {-master <i>master</i>}>

Specifies the master window for the dialog, i.e., the application window
with which it is associated.<p>

<defopt {-order <i name>}>

The name of the order, e.g., "MY:ORDER".  The order must be known to the
<tt -flunky> and must have non-empty <tt form> metadata.<p>

<defopt {-parmdict <i parmdict>}>

The initial parameter dictionary.  It will be used to populate the dialog.<p>

<defopt {-refreshon <i>events</i>}>

The value of this option is a list of <xref notifier(n)>
subjects and events that should cause the dialog to refresh its contents.<p>

The state of an order dialog often depends on the state of the
application.  As the application state changes, for example, the
content of pulldowns might change, thus necessitating a refresh.<p>

Note the dialog will automatically refresh on its <tt -flunky>'s 
<b><tag Sync></b> event.<p>

</deflist options>


<defitem "orderx_dialog puck" {orderx_dialog puck <i>tagdict</i>}>

This command allows the user to fill in fields in the current
order dialog by clicking on elements of the GUI.  The <i>tagdict</i>
is a dictionary of tag names and values that reflects the entity on
which the user clicked.  If the current field in the topmost order dialog 
is tagged with one of the tags in the <i>tagdict</i>, the field will be
set to the tag's value.<p>

Field tags are set using the <xref orderx(n)>
<tt parmtag> metadata value.<p>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of orderx_dialog(n) provides the following public
methods; however, there should rarely be any need for other modules to
use them.<p>

<deflist instance>

<defitem configure {<i>pathName</i> configure <i>option value...</i>}>

Sets the value of the specified options.<p>

<defitem cget {<i>pathName</i> cget <i>option</i>}>

Returns the value of the specified <i>option</i>.<p>

<defitem get {<i>pathName</i> get}>

Returns a dictionary of the values of the dialog's fields, by
parameter name.<p>

<defitem enter {<i>pathName</i> enter <i>parmdict</i>}>

Sets the values of one or more of the dialog's fields given a
dictionary of the parameter names and values.  Downstream fields are
refreshed as appropriate.<p>

</deflist instance>

<section "NOTIFIER EVENTS">

Each instance of orderx_dialog(n) sends the following events on behalf
of the configured <tt -flunky>:<p>

<deflist events>

<defitem OrderEntry {<tag OrderEntry> <i>tags</i>}>

An order dialog contains a field for each order parameter.  When a
given field receives the focus, this event is sent with
<i>tags</i> set to the parameter's <tt parmtags> as defined in the
order's metadata, or "<tt null>" if none.  When no field has the focus, or the
dialog is closed, this event is sent with <i>tags</i> set to the
empty string.<p>

This allows GUI components to configure themselves so that the
appropriate kind of object can be selected by clicking on the
component, e.g., a neighborhood can be selected by clicking on the
map.<p>

</deflist events>

<section ENVIRONMENT>

Requires Tcl 8.5 or later.<p>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package.

</manpage>








