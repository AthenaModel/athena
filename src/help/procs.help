# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    procs.help
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Procecure definitions for Athena help(5) input
#
#    (Macros are for use in page bodies; procs for use in creating
#    pages, and in macros.)
#
# TODO: These should probably be supplied by helptool, and documented.
#
#-----------------------------------------------------------------------

#=======================================================================
# Procs

# splitname name sep
#
# name  - A name to be split
# sep   - The separator character
#
# Down-cases the name; splits it on the separator character; and in
# the result tokens, removes punctuation and replaces whitespace with
# "_".  Returns the split tokens.

proc splitname {name sep} {
    set tokens [split [string tolower $name] $sep]

    foreach token $tokens {
        lappend result [string map {" " _ . "" : "" / "" ( "" ) ""} $token]
    }

    return $result
}

# name2path root sep name
# 
# root   - The root of the path, e.g., "/menu"
# name   - The name of the entity.
# sep    - The separator character in the name, e.g., "/", ".", or ":".
#
# Takes the name, splits it on the separator, and converts to a 
# parent path and a slug; these are returned as a pair.
#
# Whitespace in the name is replaced with "_", and non-separator
# punctuation is removed.

proc name2path {root sep name} {
    set tokens [splitname $name $sep]
    set parent [join [linsert [lrange $tokens 0 end-1] 0 $root] /]
    set slug   [lindex $tokens end]

    return [list $parent $slug]
}

# name2pathlinks root sep name
#
# root   - The root of the path, e.g., "/menu"
# name   - The name of the entity.
# sep    - The separator character in the name, e.g., "/", ".", or ":".
#
# Converts a name containing path components into a series of links
# terminated by the final component of the name as plain text.
#
# Whitespace in the name is replaced with "_", and non-separator
# punctuation is removed.

proc name2pathlinks {root sep name} {
    set hTokens [split $name $sep]
    set pTokens [splitname $name $sep]

    set path $root
    set nameWithLinks ""

    foreach htok [lrange $hTokens 0 end-1] ptok [lrange $pTokens 0 end-1] {
        append path "/$ptok"
        append nameWithLinks "<link \"$path\" $htok>$sep"
    }

    append nameWithLinks [lindex $hTokens end]

    return $nameWithLinks
}