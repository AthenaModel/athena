#-----------------------------------------------------------------------
# TITLE:
#   tool_server.tcl
#
# AUTHOR:
#   Will Duquette
#
# DESCRIPTION:
#   Athena "server" tool.  This tool starts a simple web server.
#   * EXPERIMENTAL *
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# tool::SERVER

tool define SERVER {
    usage       {0 - "?options...?"}
    description "Athena Web Server"
} {
    Experimental Athena Web Server.

    At present the server serves pages from athena/htdocs/, plus
    some internal dynamic content generated by the server itself.
    The following options may be used:

    -gui             - Pops up a debugger(n) window along with the
                       server.
    -docroot <path>  - Specifies an alternate path for the htdocs/
                       directory.
} {
    #-------------------------------------------------------------------
    # Execution 

    # execute argv
    #
    # Executes the tool given the command line arguments.

    typemethod execute {argv} {
        puts "Starting web server"
        appdir init

        # server specific version of bgerror
        proc ::bgerror {msg} {
            global errorInfo

            set msg "[clock format [clock seconds]]\n$errorInfo"
            if [catch {::ahttpd::log add nosock bgerror $msg}] {
                ::ahttpd::Stderr $msg
            }
        }

        set docroot [appdir join htdocs]

        foroption opt argv {
            -docroot {
                set docroot [file normalize [lshift argv]]
            }
            -gui {
                package require marsgui
                wm withdraw .
                ::marsgui::debugger new
            }
        }

        ahttpd init                \
            -debug                 \
            -allowtml              \
            -allowsubst            \
            -docroot     $docroot

        # TBD: Need better API for this kind of thing.
        ahttpd::direct url /welcome.html [myproc Welcome]

        if {[ahttpd port] ne ""} {
            puts "http started on port [ahttpd port]"
        }

        if {[ahttpd secureport] ne ""} {
            puts "https started on port [ahttpd secureport]"
        }

        vwait forever
    }

    proc Welcome {args} {
        append result [outdent {
            <html>
            <head>
            <title>Welcome!</title>
            </head>
            <body>
            Welcome!  The arguments are:<p>

        }]

        append result "<pre>[list $args]</pre><p>"

        append result "The environment is:<p>"
        append result "<pre>[::ahttpd::parray ::ahttpd::cgienv]</pre>"
        append result "</body></html>"

        return $result

    }
}




