# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    orderx.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for projectlib(n) orderx(n).
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}

# Import tcltest(n)
namespace import ::tcltest::*

 
#-----------------------------------------------------------------------
# Load the package to be tested

source ../../lib/projectlib/pkgModules.tcl
namespace import ::projectlib::*

#------------------------------------------------------------------------
# Set up the test environment

::projectlib::order_set create myorders
::projectlib::order_flunky create myflunky ::myorders

myorders define MY:ORDER {
    meta title "My Order"
    meta sendstates "PREP"
    meta defaults {
        x 1
        y yes
    }

    method _validate {} {
        my prepare x -type snit::integer
        my prepare y -type snit::boolean
    }

    method _execute {{flunky ""}} {
        my variable parms
        my setundo [list set ::orderResult $::orderResult]
        set ::orderResult [list $parms(x) $parms(y)]
    }
}

myorders define MY:FORM {
    meta title "My Form"
    meta sendstates "PREP"
    meta defaults {
        x 1
        y 2
    }
    meta form {
        text x
        text y
    }
}

myorders define MY:MODE {
    meta title "My Mode"
    meta defaults {
        x 1
        y 2
    }

    method _validate {} {
        # n/a
    }

    method _execute {{flunky ""}} {
        return [my mode]
    }

    method mymode {} {
        return [my mode]
    }
}

myorders define MY:VALIDATE {
    meta defaults { x "" }

    method _validate {} { 
        my variable parms
        my checkon x {
            snit::integer validate $parms(x)
        }
    }

    method preparex {value args} {
        my set x ""
        my valid
        my set x $value
        return [my prepare x {*}$args]
    }

    method mybadparm {parm} {
        return [my badparm $parm]
    }

}

myorders define MY:RETURN {
    meta defaults { 
        x "" 
    }

    method _validate {} { 
        my variable parms
        my checkon x {
            snit::integer validate $parms(x)
        }

        my returnOnError
        my set x 0
    }
}

myorders define MY:CANCEL {
    meta defaults { x 1 }
    method _validate {} {
        my variable parms
        my checkon x {
            snit::integer validate $parms(x)
        }
    }

    method _execute {{flunky ""}} {
        my cancel
        error "Shouldn't get here"
    }
}


variable orderResult {}

proc setup {{cls MY:ORDER}} {
    [myorders class $cls] create ord
}

proc cleanup {} {
    variable orderResult
    set orderResult {}
    ord destroy
}

#-----------------------------------------------------------------------
# Creation

test creation-1.1 {initial state} -setup {
    setup
} -body {
    ord state
} -cleanup {
    cleanup
} -result {CHANGED}

test creation-1.2 {initial errdict} -setup {
    setup
} -body {
    ord errdict
} -cleanup {
    cleanup
} -result {}

test creation-1.3 {initial values} -setup {
    setup
} -body {
    ord getdict
} -cleanup {
    cleanup
} -result {x 1 y yes}

test creation-1.4 {can set values} -setup {
    setup
    set o [[myorders class MY:ORDER] new {x 2 y no}]
} -body {
    $o getdict
} -cleanup {
    cleanup
} -result {x 2 y no}


#-----------------------------------------------------------------------
# get

test get-1.1 {can get a parameter's value} -setup {
    setup
} -body {
    ord get x
} -cleanup {
    cleanup
} -result {1}


#-----------------------------------------------------------------------
# set

test set-1.1 {can set a parameter's value} -setup {
    setup
} -body {
    ord set x 5
    ord get x
} -cleanup {
    cleanup
} -result {5}

test set-1.2 {returns new value} -setup {
    setup
} -body {
    ord set x 5
} -cleanup {
    cleanup
} -result {5}

test set-1.3 {trims input value} -setup {
    setup
} -body {
    ord set x "  HELLO  "
} -cleanup {
    cleanup
} -result {HELLO}

test set-1.4 {unknown parameter} -setup {
    setup
} -body {
    ord set nonesuch 1
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Unknown parameter: "nonesuch"}

#-----------------------------------------------------------------------
# getdict

test getdict-1.1 {retrieves parameter dictionary} -setup {
    setup
} -body {
    ord getdict
} -cleanup {
    cleanup
} -result {x 1 y yes}

#-----------------------------------------------------------------------
# setdict

test setdict-1.1 {sets parameters} -setup {
    setup
} -body {
    ord setdict [dict create x 5 y 10]
    ord getdict
} -cleanup {
    cleanup
} -result {x 5 y 10}

test setdict-1.2 {sets parameters} -setup {
    setup
} -body {
    ord setdict [dict create x 5 nonesuch 10]
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Unknown parameter: "nonesuch"}

#-----------------------------------------------------------------------
# cget

test cget-1.1 {can cget a parameter's value} -setup {
    setup
} -body {
    list [ord cget -x] [ord cget -y]
} -cleanup {
    cleanup
} -result {1 yes}

#-----------------------------------------------------------------------
# configure

test configure-1.1 {can set parameter values} -setup {
    setup
} -body {
    ord configure -x 3 -y 4
    list [ord get x] [ord get y]
} -cleanup {
    cleanup
} -result {3 4}

#-----------------------------------------------------------------------
# state

# Tested under "Life-Cycle", below

#-----------------------------------------------------------------------
# title

test title-1.1 {can get an order's title} -setup {
    setup
} -body {
    ord title
} -cleanup {
    cleanup
} -result {My Order}

#-----------------------------------------------------------------------
# sendstates

test sendstates-1.1 {can get an order's sendstates} -setup {
    setup
} -body {
    ord sendstates
} -cleanup {
    cleanup
} -result {PREP}

#-----------------------------------------------------------------------
# dynaform

test dynaform-1.1 {no form} -setup {
    setup
} -body {
    ord dynaform
} -cleanup {
    cleanup
} -result {}

test dynaform-1.2 {form} -setup {
    setup
    ::myorders::MY:FORM create frm
} -body {
    frm dynaform
} -cleanup {
    frm destroy
    cleanup
} -result {::myorders::MY:FORM}

#-----------------------------------------------------------------------
# narrative

test narrative-1.1 {default narrative} -setup {
    setup
} -body {
    ord narrative
} -cleanup {
    cleanup
} -result {My Order}

#-----------------------------------------------------------------------
# parms

test parms-1.1 {list of parm names} -setup {
    setup
} -body {
    ord parms
} -cleanup {
    cleanup
} -result {x y}

#-----------------------------------------------------------------------
# prune

test prune-1.1 {empty for all defaults} -setup {
    setup
} -body {
    ord prune
} -cleanup {
    cleanup
} -result {}

test prune-1.2 {just non-defaults} -setup {
    setup
} -body {
    ord set x 5
    ord prune
} -cleanup {
    cleanup
} -result {x 5}

#-----------------------------------------------------------------------
# valid

test valid-1.1 {returns 1 when all parms are valid} -setup {
    setup
} -body {
    ord valid
} -cleanup {
    cleanup
} -result {1}

test valid-1.2 {returns 0 when any parm is invalid} -setup {
    setup
} -body {
    ord set x NONESUCH
    ord valid
} -cleanup {
    cleanup
} -result {0}

#-----------------------------------------------------------------------
# errdict

test errdict-1.1 {errdict is empty when items are valid} -setup {
    setup
} -body {
    ord valid
    ord errdict
} -cleanup {
    cleanup
} -result {}

#-----------------------------------------------------------------------
# execute

test execute-1.1 {execute calls _execute} -setup {
    setup
} -body {
    ord set x 5 
    ord set y no
    ord valid
    ord execute
    set ::orderResult
} -cleanup {
    cleanup
} -result {5 no}

#-----------------------------------------------------------------------
# canundo

test canundo-1.1 {before execution, can't undo} -setup {
    setup
} -body {
    ord canundo
} -cleanup {
    cleanup
} -result {0}

test canundo-1.2 {after execution, can undo} -setup {
    setup
} -body {
    ord set x 5 
    ord valid
    ord execute
    ord canundo
} -cleanup {
    cleanup
} -result {1}

#-----------------------------------------------------------------------
# undo

test undo-1.1 {undo change} -setup {
    setup
    set orderResult [list 6 0]
    ord set x 10
    ord set y false
    ord valid
} -body {
    ord execute
    ord undo
    set orderResult
} -cleanup {
    cleanup
} -result {6 0}


#-----------------------------------------------------------------------
# Life-Cycle States

test states-1.1 {start => CHANGED} -setup {
    setup
} -body {
    ord state
} -cleanup {
    cleanup
} -result {CHANGED}

test states-1.2 {Can't execute while CHANGED} -setup {
    setup
} -body {
    ord execute
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Only validated orders can be executed.}

test states-1.3 {Can't undo while CHANGED} -setup {
    setup
} -body {
    ord undo
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Only executed orders can be undone.}


test states-2.1 {CHANGED => INVALID} -setup {
    setup
} -body {
    set a [ord state]
    ord set x NONESUCH
    ord valid
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {CHANGED INVALID}

test states-2.2 {INVALID => CHANGED} -setup {
    setup
} -body {
    ord set x NONESUCH
    ord valid
    set a [ord state]
    ord set x 1
    set b [ord state]

    list $a $b
} -cleanup {
    cleanup
} -result {INVALID CHANGED}

test states-2.3 {INVALID => INVALID} -setup {
    setup
} -body {
    ord set x NONESUCH
    ord valid
    set a [ord state]
    ord set x [ord get x]
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {INVALID INVALID}

test states-2.4 {Can't execute while INVALID} -setup {
    setup
} -body {
    ord set x NONESUCH
    ord valid
    ord execute
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Only validated orders can be executed.}

test states-2.5 {Can't undo while INVALID} -setup {
    setup
} -body {
    ord set x NONESUCH
    ord valid
    ord undo
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Only executed orders can be undone.}

test states-3.1 {CHANGED => VALID} -setup {
    setup
} -body {
    set a [ord state]
    ord valid
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {CHANGED VALID}

test states-3.2 {VALID => CHANGED} -setup {
    setup
} -body {
    ord valid
    set a [ord state]
    ord set x 5
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {VALID CHANGED}

test states-3.3 {VALID => VALID} -setup {
    setup
} -body {
    ord valid
    set a [ord state]
    ord set x [ord get x]
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {VALID VALID}

test states-3.4 {Can't undo while VALID} -setup {
    setup
} -body {
    ord undo
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Only executed orders can be undone.}


test states-4.1 {VALID => EXECUTED} -setup {
    setup
} -body {
    ord valid
    set a [ord state]
    ord execute
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {VALID EXECUTED}

test states-4.2 {EXECUTED => VALID} -setup {
    setup
} -body {
    ord valid
    ord execute
    set a [ord state]
    ord undo
    set b [ord state]
    list $a $b
} -cleanup {
    cleanup
} -result {EXECUTED VALID}

test states-4.3 {Can't set while EXECUTED} -setup {
    setup
} -body {
    ord valid
    ord execute
    ord set x 5
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {Cannot modify an executed order.}

#=======================================================================
# Private methods for use in _validate methods

#-----------------------------------------------------------------------
# prepare
#
# Because this method is private, we test it through the MY:VALIDATE
# order's "preparex" method.


test prepare-1.1 {-toupper} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex lower -toupper
    ord get x
} -cleanup {
    cleanup
} -result {LOWER}

test prepare-2.1 {-tolower} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex UPPER -tolower
    ord get x
} -cleanup {
    cleanup
} -result {upper}

test prepare-3.1 {-normalize} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex " My    input   string " -normalize
    ord get x
} -cleanup {
    cleanup
} -result {My input string}

test prepare-4.1 {-num} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex 0089 -num
    ord get x
} -cleanup {
    cleanup
} -result {89}

test prepare-5.1 {-required, value present} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex 5 -required
    ord get x
} -cleanup {
    cleanup
} -result {5}

test prepare-5.2 {-required, no value present} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex "" -required
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {required value}

test prepare-6.1 {-type, good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex 5 -type snit::integer
    ord get x
} -cleanup {
    cleanup
} -result {5}

test prepare-6.2 {-type, bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex NONESUCH -type snit::integer
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {invalid value "NONESUCH", expected integer}

test prepare-7.1 {-listof, good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex {5 6 7} -listof snit::integer
    ord get x
} -cleanup {
    cleanup
} -result {5 6 7}

test prepare-7.2 {-listof, bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex {5 NONESUCH 7} -listof snit::integer
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {invalid value "NONESUCH", expected integer}

test prepare-8.1 {-oneof, good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex 5 -oneof {4 5 6}
    ord get x
} -cleanup {
    cleanup
} -result {5}

test prepare-8.2 {-oneof, bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex NONESUCH -oneof {4 5 6}
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {invalid value "NONESUCH", should be one of: 4, 5, 6}

test prepare-9.1 {-someof, good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex {4 6} -someof {4 5 6}
    ord get x
} -cleanup {
    cleanup
} -result {4 6}

test prepare-9.2 {-someof, bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex {4 NONESUCH} -someof {4 5 6}
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {invalid value "NONESUCH", should be one of: 4, 5, 6}


test prepare-10.1 {-with, good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex 5 -with {snit::integer validate}
    ord get x
} -cleanup {
    cleanup
} -result {5}

test prepare-10.2 {-with, bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex NONESUCH -with {snit::integer validate}
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {invalid value "NONESUCH", expected integer}

test prepare-11.1 {-listwith, good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex {4 5 6} -listwith {snit::integer validate}
    ord get x
} -cleanup {
    cleanup
} -result {4 5 6}

test prepare-11.2 {-listwith, bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex {4 NONESUCH 6} -listwith {snit::integer validate}
    dict get [ord errdict] x
} -cleanup {
    cleanup
} -result {invalid value "NONESUCH", expected integer}

# TBD: prepare -selector

#-----------------------------------------------------------------------
# badparm

test badparm-1.1 {missing value} -setup {
    setup MY:VALIDATE
} -body {
    ord set x ""
    ord mybadparm x
} -cleanup {
    cleanup
} -result {1}

test badparm-1.2 {bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex NONESUCH -type snit::integer
    ord mybadparm x
} -cleanup {
    cleanup
} -result {1}

test badparm-1.3 {good value} -setup {
    setup MY:VALIDATE
} -body {
    ord preparex 5 -type snit::integer
    ord mybadparm x
} -cleanup {
    cleanup
} -result {0}

#-----------------------------------------------------------------------
# checkon

test checkon-1.1 {missing value} -setup {
    setup MY:VALIDATE
} -body {
    ord set x ""
    ord valid ;# Calls [my checkon x]
} -cleanup {
    cleanup
} -result {1}

test checkon-1.2 {good value} -setup {
    setup MY:VALIDATE
} -body {
    ord set x 5
    ord valid ;# Calls [my checkon x]
} -cleanup {
    cleanup
} -result {1}

test checkon-1.3 {bad value} -setup {
    setup MY:VALIDATE
} -body {
    ord set x NONESUCH
    ord valid ;# Calls [my checkon x]
} -cleanup {
    cleanup
} -result {0}

#-----------------------------------------------------------------------
# reject

# Tested by prepare-*.*, since [my prepare] uses [my reject].


#-----------------------------------------------------------------------
# returnOnError

test return-1.1 {return normally} -setup {
    setup MY:RETURN
} -body {
    ord set x 4

    # value is valid, so returnOnError won't, so x will get reset to 0.
    set a [ord valid]
    set b [ord get x]
    list $a $b
} -cleanup {
    cleanup
} -result {1 0}

test return-1.2 {return on error} -setup {
    setup MY:VALIDATE
} -body {
    ord set x NONESUCH
    set a [ord valid]
    set b [ord get x]
    list $a $b
} -cleanup {
    cleanup
} -result {0 NONESUCH}


#=======================================================================
# Private methods for use in _execute methods

#-----------------------------------------------------------------------
# mode

test mode-1.1 {private when no flunky} -setup {
    setup MY:MODE
    ord valid
} -body {
    ord execute
} -cleanup {
    cleanup
} -result {private}

test mode-1.2 {flunky mode when flunky} -setup {
    setup MY:MODE
    ord valid
} -body {
    myflunky execute gui ::ord
} -cleanup {
    cleanup
} -result {gui}

test mode-1.3 {flunky's mode is retained} -setup {
    setup MY:MODE
    ord valid
} -body {
    myflunky execute gui ::ord
    list [myflunky mode] [ord mymode]
} -cleanup {
    cleanup
} -result {normal gui}

#-----------------------------------------------------------------------
# cancel

test cancel-1.1 {can cancel} -setup {
    setup MY:CANCEL
    ord valid
} -body {
    ord execute
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {The order was cancelled by the user.}


#-----------------------------------------------------------------------
# setundo

# setundo is tested under lifecycle, above.


#-----------------------------------------------------------------------
# Cleanup

cleanupTests
