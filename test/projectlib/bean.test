# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    bean.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for projectlib(n) bean(n)
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}

# Import tcltest(n)
namespace import ::tcltest::*

 
#-----------------------------------------------------------------------
# Load the package to be tested

source ../../lib/projectlib/pkgModules.tcl
namespace import ::projectlib::*

#-------------------------------------------------------------------
# Set up the test environment

scenariodb ::rdb
rdb open :memory:
rdb clear

beanpot ::pot \
    -rdb ::rdb

proc setup {} {
    rdb clear
    pot reset
}


proc setupNotifier {subject event} {
    variable notifications
    set notifications [list]
    ::marsutil::notifier bind $subject $event :: \
        [list ::handleNotification $subject $event]
}

proc handleNotification {args} {
    variable notifications

    lappend notifications "    $args"
}

proc getNotifications {} {
    variable notifications
    pprint "[join $notifications \n]\n"
}


proc pprint {text} { 
    return "\n$text"
}

proc cleanup {} {
    pot reset
    rdb clear

    ::marsutil::notifier forget ::
    set notifications [list]
}


oo::class create pet {
    superclass ::projectlib::bean
    variable name
    variable color

    constructor {pot_} {
        next $pot_

        set name ""
        set color ""
    }

    method say {text} {
        return "$name ([self]): $text"
    }

    # Override subject, so that we get notifier events.
    method subject {} {
        return "::pet"
    }
}

oo::class create dog {
    superclass ::pet

    variable breed

    constructor {pot_ {dict {}}} {
        next $pot_

        set breed "mutt"
        my setdict $dict
    }
}

oo::class create cat {
    superclass ::pet

    variable tail

    constructor {pot_ {dict {}}} {
        next $pot_

        set tail yes  ;# Cat has a tail?

        my setdict $dict
    }
}

oo::class create wagger {
    superclass ::dog

    beanslot tail

    constructor {pot_ {dict {}}} {
        next $pot_
        set tail ""
        my setdict $dict
    }

    method addtail {newTail} {
        set tail [$newTail id]
    }

    method wag {} {
        my say "Wagging tail [[my tail 0] id], of length [[my tail 0] get length]"
    }

}

oo::class create tail {
    superclass ::projectlib::bean

    variable parent
    variable length

    constructor {pot_ {dict {}}} {
        next $pot_
        set parent ""
        set length medium
        my setdict $dict
    }
}

oo::class create block {
    superclass ::projectlib::bean

    variable parent
    variable name

    constructor {pot_} {
        next $pot_
        set parent ""
        set name ""
    }
}

oo::class create blocklist {
    superclass ::projectlib::bean

    variable parent
    beanslot blocks
    variable data

    constructor {pot_} {
        next $pot_
        set parent ""
        set blocks [list]
        set data ""
    }

    method subject {} {
        return "::blocklist"
    }

    method addblock_ {{beanvar ""}} {
        if {$beanvar ne ""} {
            upvar $beanvar bean
        }

        return [my addbean_ blocks ::block bean]
    }

    method addlist_ {{beanvar ""}} {
        if {$beanvar ne ""} {
            upvar $beanvar bean
        }

        return [my addbean_ blocks ::blocklist bean]
    }

    method delete_ {id} {
        return [my deletebean_ blocks $id]
    }

    method clear {} {
        my destroyslots blocks
    }
}

oo::class create blocklist2 {
    superclass ::blocklist

    beanslot moreblocks

    constructor {pot_} {
        next $pot_

        set moreblocks [list]
    }
}

oo::class create trans {
    superclass ::projectlib::bean
    variable persistent
    variable trans

    constructor {pot_} {
        next $pot_
        set persistent 1

        # trans is array-valued and hence transient
        set trans(dummy) 1
    }
}

oo::class create viewbean {
    superclass ::projectlib::bean
    variable name

    constructor {pot_ name_} {
        next $pot_ 
        set name $name_
    }

    method view {{view ""}} {
        set vdict [next $view]

        if {$view eq ""} {
            dict set vdict name [string toupper $name]
        }
    }
}

#===================================================================
# bean Class Methods

#-------------------------------------------------------------------
# getslots


test bean_getslots-1.1 {no slots} -body {
    bean getslots ::pet
} -cleanup {
    cleanup
} -result {}

test bean_getslots-1.2 {got slots} -body {
    bean getslots ::blocklist2
} -cleanup {
    cleanup
} -result {blocks moreblocks}


#===================================================================
# bean(n) Instance Methods

#-------------------------------------------------------------------
# Creation

test creation-1.1 {can destroy potless bean without error} -body {
    set fido [pet new ""]
    $fido destroy
} -result {}

test creation-1.2 {potless bean} -body {
    set fido [pet new ""]
    list [$fido get pot] [$fido get id]
} -cleanup {
    $fido destroy
} -result {{} {}}


#-------------------------------------------------------------------
# id

test id-1.1 {can retrieve id} -body {
    set fido [pot new pet]
    set spot [pot new pet]
    list [$fido id] [$spot id]
} -cleanup {
    cleanup
} -result {1 2}


#-------------------------------------------------------------------
# set/get
#
# Effects on the [bean changed] flag are tested below, under
# "changed".

test setget-1.1 {can get initial values} -body {
    set fido [pot new pet]
    list [$fido get id] [$fido get name] [$fido get color]
} -cleanup {
    cleanup
} -result {1 {} {}}

test setget-1.2 {can set and get values} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"
    list [$fido get id] [$fido get name] [$fido get color]
} -cleanup {
    cleanup
} -result {1 Fido Brown}

test setget-2.1 {can't get unknown variable} -body {
    set fido [pot new pet]
    $fido get NONESUCH
} -returnCodes {
    error
} -cleanup {
    cleanup
} -match glob -result {* no such variable}

test setget-2.2 {can't set unknown variable} -body {
    set fido [pot new pet]
    $fido set NONESUCH 1
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown instance variable: "NONESUCH"}

test setget-2.3 {can't set ID to a new value} -body {
    set fido [pot new pet]
    $fido set id 0
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {cannot set the bean's "id" attribute.}

test setget-3.1 {can't get array variable} -body {
    set spot [pot new trans]
    $spot get trans
} -returnCodes {
    error
} -cleanup {
    cleanup
} -match glob -result {* variable is array}

test setget-3.2 {can't set array variable} -body {
    set spot [pot new trans]
    $spot set trans 5
} -returnCodes {
    error
} -cleanup {
    cleanup
} -match glob -result {* variable is array}

#-------------------------------------------------------------------
# getdict

test getdict-1.1 {can get variable dictionary} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Fido pot ::pot color Brown}

test getdict-2.1 {excludes array variables} -body {
    set spot [pot new trans]

    # variable "trans" is excluded.
    $spot getdict
} -cleanup {
    cleanup
} -match glob -result {id * persistent 1 pot ::pot}

#-------------------------------------------------------------------
# view

test view-1.1 {returns getdict by default} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    expr {[$fido view] eq [$fido getdict]}
} -cleanup {
    cleanup
} -result {1}

test view-1.2 {view name is ignored by default} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    expr {[$fido view NONESUCH] eq [$fido getdict]}
} -cleanup {
    cleanup
} -result {1}




#-------------------------------------------------------------------
# setdict

test setdict-1.1 {can set variable dictionary} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido setdict [list name "Spot" color "White"]
    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Spot pot ::pot color White}

test setdict-2.1 {can't set unknown variable} -body {
    set fido [pot new pet]
    $fido setdict [list NONESUCH 1]
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown instance variable: "NONESUCH"}

test setdict-2.2 {can't set ID to a new value} -body {
    set fido [pot new pet]
    $fido setdict [list id 0 name Spot]
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {cannot set the bean's "id" attribute.}

#-------------------------------------------------------------------
# configure

test configure-1.1 {can set variable dictionary} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido configure -name "Spot" -color "White"
    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Spot pot ::pot color White}

test configure-2.1 {can't set unknown variable} -body {
    set fido [pot new pet]
    $fido configure -nonesuch 1
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {unknown instance variable: "nonesuch"}

#-------------------------------------------------------------------
# cget

test cget-1.1 {can get variable} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido cget -name
} -cleanup {
    cleanup
} -result {Fido}

test cget-2.1 {can't get unknown variable} -body {
    set fido [pot new pet]
    $fido cget -nonesuch
} -returnCodes {
    error
} -cleanup {
    cleanup
} -match glob -result {* no such variable}


#-------------------------------------------------------------------
# lappend

test lappend-1.1 {can append to list} -body {
    set blist [pot new blocklist]
    $blist lappend blocks a b c
    $blist get blocks
} -cleanup {
    cleanup
} -result {a b c}

#-------------------------------------------------------------------
# ldelete

test ldelete-1.1 {can delete from list} -body {
    set blist [pot new blocklist]
    $blist lappend blocks a b c
    $blist ldelete blocks b
    $blist get blocks
} -cleanup {
    cleanup
} -result {a c}

#-------------------------------------------------------------------
# getslots

test getslots-1.1 {no slots} -body {
    set fido [pot new pet]
    $fido getslots
} -cleanup {
    cleanup
} -result {}

test getslots-1.2 {got slots} -body {
    set o [pot new blocklist2]

    $o getslots
} -cleanup {
    cleanup
} -result {blocks moreblocks}


#-------------------------------------------------------------------
# destroyslots

test destroyslots-1.1 {leaves the slot alone} -body {
    set blist [pot new blocklist]
    $blist addblock_
    $blist addblock_

    set a [$blist get blocks]
    $blist clear
    set b [$blist get blocks]

    # destroyslots doesn't clear the slot variables; this would
    # break delete/undelete.
    expr {$a eq $b}
} -cleanup {
    cleanup
} -result {1}

test destroyslots-1.2 {cleared beans are destroyed} -body {
    set blist [pot new blocklist]
    $blist addblock_ bean
    $blist clear

    llength [info commands $bean]
} -cleanup {
    cleanup
} -result {0}

test destroyslots-1.3 {previously destroyed beans are ignored} -body {
    set blist [pot new blocklist]
    $blist addblock_ bean
    $bean destroy

    $blist clear
} -cleanup {
    cleanup
} -result {}

test destroyslots-1.4 {uninitialized slots are ignored} -body {
    # This will generate an error, which will cause the destructor
    # to be called.  If the destructor attempts to reference the 
    # uninitialized slot variable, that would throw an unknown
    # variable error.  If we see a "wrong # args" error, then 
    # the destructor handled the uninitialized slot.
    set blist [pot new blocklist  DUMMY DUMMY DUMMY]
} -returnCodes {
    error
} -cleanup {
    cleanup
} -result {wrong # args: should be "blocklist create ::pot::blocklist1 pot_"}

test destroyslots-1.5 {leaves the slot alone} -body {
    set blist [pot new blocklist]
    $blist addblock_ b1
    $blist addblock_ b2

    set a [list [info object isa object $b1] [info object isa object $b2]]

    $blist destroy

    set b [list [info object isa object $b1] [info object isa object $b2]]

    list $a $b
} -cleanup {
    cleanup
} -result {{1 1} {0 0}}


#-------------------------------------------------------------------
# addbean_

test addbean-1.1 {adds the bean to the slot} -body {
    set blist [pot new blocklist]

    $blist addblock_
    $blist addblock_
    $blist get blocks
} -cleanup {
    cleanup
} -result {2 3}

test addbean-1.2 {returns an undo script} -body {
    set blist [pot new blocklist]

    $blist addblock_
    set undo [$blist addblock_ bean]
    namespace eval :: $undo

    list [$blist get blocks] [llength [info commands $bean]]
} -cleanup {
    cleanup
} -result {2 0}

test addbean-2.1 {notifications on add and undo} -setup {
    setupNotifier ::projectlib::bean <Monitor>
    setupNotifier ::blocklist <blocks>
} -body {
    set blist [pot new blocklist]

    set undo [$blist addblock_]
    namespace eval :: $undo

    getNotifications
} -cleanup {
    cleanup
} -result {
    ::blocklist <blocks> add 1 2
    ::projectlib::bean <Monitor>
    ::blocklist <blocks> delete 1 2
    ::projectlib::bean <Monitor>
}


#-------------------------------------------------------------------
# deletebean_

test deletebean-1.1 {deletes the bean from the slot} -body {
    set blist [pot new blocklist]
    $blist addblock_ bean
    $blist addblock_

    $blist delete_ [$bean id]
    list [$blist get blocks] [llength [info commands $bean]]
} -cleanup {
    cleanup
} -result {3 0}

test deletebean-1.2 {returns an undo script} -body {
    set blist [pot new blocklist]
    $blist addblock_ bean
    $blist addblock_

    set undo [$blist delete_ [$bean id]]
    namespace eval :: $undo

    $blist get blocks
} -cleanup {
    cleanup
} -result {2 3}

test deletebean-2.1 {notifications on delete and undo} -body {
    setupNotifier ::projectlib::bean <Monitor>
    setupNotifier ::blocklist <blocks>
    set blist [pot new blocklist]
    $blist addblock_ bean
    set undo [$blist delete_ [$bean id]]
    namespace eval :: $undo

    getNotifications
} -cleanup {
    cleanup
} -result {
    ::blocklist <blocks> add 1 2
    ::projectlib::bean <Monitor>
    ::blocklist <blocks> delete 1 2
    ::projectlib::bean <Monitor>
    ::blocklist <blocks> add 1 2
    ::projectlib::bean <Monitor>
}

#-------------------------------------------------------------------
# movebean_

test movebean-1.1 {moves a bean in its slot} -body {
    set blist [pot new blocklist]

    $blist addblock_
    $blist addblock_ bean

    $blist movebean_ blocks [$bean id] top
    $blist get blocks
} -cleanup {
    cleanup
} -result {3 2}

test movebean-1.2 {returns an undo script} -body {
    set blist [pot new blocklist]

    $blist addblock_
    $blist addblock_ bean

    set a [$blist get blocks]

    set undo [$blist movebean_ blocks [$bean id] top]
    namespace eval :: $undo

    set b [$blist get blocks]

    expr {$a eq $b}
} -cleanup {
    cleanup
} -result {1}

test movebean-2.1 {notifications on move and undo} -setup {
    setupNotifier ::projectlib::bean <Monitor>
    setupNotifier ::blocklist <blocks>
} -body {
    set blist [pot new blocklist]

    $blist addblock_
    $blist addblock_ bean

    set undo [$blist movebean_ blocks [$bean id] top]
    namespace eval :: $undo

    getNotifications
} -cleanup {
    cleanup
} -result {
    ::blocklist <blocks> add 1 2
    ::projectlib::bean <Monitor>
    ::blocklist <blocks> add 1 3
    ::projectlib::bean <Monitor>
    ::blocklist <blocks> move 1 3
    ::projectlib::bean <Monitor>
    ::blocklist <blocks> move 1 3
    ::projectlib::bean <Monitor>
}


#-------------------------------------------------------------------
# update_

test update-1.1 {can update variable dictionary} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido update_ {name color} {name "Spot" color "White"}
    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Spot pot ::pot color White}

test update-1.2 {dict can contain other keys} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido update_ {name color} {name "Spot" color "White" dummy NONESUCH}
    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Spot pot ::pot color White}

test update-1.3 {missing keys are ignored} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido update_ {name color} {name "Spot"}
    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Spot pot ::pot color Brown}

test update-1.4 {empty values are ignored} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido update_ {name color} {name "Spot" color ""}
    $fido getdict
} -cleanup {
    cleanup
} -result {id 1 name Spot pot ::pot color Brown}

test update-1.5 {undo script is returned} -body {
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    $fido update_ {name color} {name "Spot"}
} -cleanup {
    cleanup
} -match glob -result {* UndoUpdate {id 1 name Fido pot ::pot color Brown}}

test update-2.1 {notifications on update and undo} -body {
    setupNotifier ::projectlib::bean <Monitor>
    setupNotifier ::pet <update>
    set fido [pot new pet]
    $fido set name "Fido"
    $fido set color "Brown"

    set undo [$fido update_ {name color} {name "Spot"}]
    namespace eval :: $undo
    getNotifications
} -cleanup {
    cleanup
} -result {
    ::pet <update> 1
    ::projectlib::bean <Monitor>
    ::pet <update> 1
    ::projectlib::bean <Monitor>
}


#-------------------------------------------------------------------
# getowned

test getowned-1.1 {-shallow, no slots} -body {
    set fido [pot new dog]
    $fido getowned -shallow
} -cleanup {
    cleanup
} -result {}

test getowned-1.2 {-shallow, slots} -body {
    set a1 [pot new blocklist]
    $a1 addlist_ b1
    $a1 addlist_ b2
    $b1 addlist_ c1

    expr {[$a1 getowned -shallow] eq [list $b1 $b2]}
} -cleanup {
    cleanup
} -result {1}

test getowned-2.1 {-deep, no slots} -body {
    set fido [pot new dog]
    $fido getowned -deep
} -cleanup {
    cleanup
} -result {}

test getowned-2.2 {-deep, slots} -body {
    set a1 [pot new blocklist]
    $a1 addlist_ b1
    $a1 addlist_ b2
    $b1 addlist_ c1

    expr {[$a1 getowned -deep] eq [list $b1 $b2 $c1]}
} -cleanup {
    cleanup
} -result {1}

test getowned-2.3 {-deep is default} -body {
    set a1 [pot new blocklist]
    $a1 addlist_ b1
    $a1 addlist_ b2
    $b1 addlist_ c1

    expr {[$a1 getowned] eq [$a1 getowned -deep]}
} -cleanup {
    cleanup
} -result {1}

#-------------------------------------------------------------------
# copydata

test copydata-1.1 {copy set for leaf object} -body {
    set fido [pot new dog]
    $fido set name "Fido"
    $fido set color "brown"
    $fido copydata
} -cleanup {
    cleanup
} -result {name Fido breed mutt color brown class_ ::dog}

test copydata-1.2 {copy set for parent objects} -body {
    set blist [pot new blocklist]
    $blist set data mydata
    $blist addblock_ b1
    $blist addblock_ b2
    $b1 set name b1
    $b2 set name b2
    $blist copydata
} -cleanup {
    cleanup
} -result {data mydata blocks {{name b1 class_ ::block} {name b2 class_ ::block}} class_ ::blocklist}

test copydata-1.3 {copy set is based on default view} -body {
    set mybean [pot new viewbean fred]
    $mybean copydata
} -cleanup {
    cleanup
} -result {name FRED class_ ::viewbean}

#-------------------------------------------------------------------
# slot methods

test slot-1.1 {can retrieve bean commands for slot} -body {
    set blist [pot new blocklist]
    $blist addblock_ b1
    $blist addblock_ b2
    $blist addblock_ b3

    $blist blocks
} -cleanup {
    cleanup
} -result {::pot::block2 ::pot::block3 ::pot::block4}

test slot-1.2 {can retrieve specific bean command from slot} -body {
    set blist [pot new blocklist]
    $blist addblock_ b1
    $blist addblock_ b2
    $blist addblock_ b3

    $blist blocks end
} -cleanup {
    cleanup
} -result {::pot::block4}

test slot-1.3 {invalid index returns empty string.} -body {
    set blist [pot new blocklist]
    $blist addblock_ b1
    $blist addblock_ b2
    $blist addblock_ b3

    $blist blocks 3
} -cleanup {
    cleanup
} -result {}


#-------------------------------------------------------------------
# Cleanup

cleanupTests
