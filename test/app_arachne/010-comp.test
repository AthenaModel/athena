# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-comp.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_arachne(1): Scenario Management ("comp") module
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athenawb(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        # TBD
    }

    proc advance {case {ticks 1}} {
        case with $case autogen scenario \
            -nb 2       \
            -actors 1   \
            -frcg 1     \
            -civg 2     \
            -topics 1   \
            -nostrategy
        case with $case lock
        case with $case advance -ticks $ticks
    }

    proc incomp {case} {
        case with $case autogen scenario \
            -nb 3       \
            -actors 1   \
            -frcg 1     \
            -civg 3     \
            -topics 1   \
            -nostrategy
        case with $case lock
        case with $case advance -ticks 1
    }


    proc mkbusy {case} {
        advance $case
        case with $case busy set "Busy!"
    }


    set pdict [::projectlib::parmdict new]

    proc cleanup {} {
       ted cleanup
    }

    proc codecatch {args} {
        try {
            set out [uplevel 1 $args]
        } on error {result eopts} {
            return [list [dict get $eopts -errorcode] $result]
        }

        error "Expected error, got \"$out\""
    }

    #-------------------------------------------------------------------
    # Notes
    #
    # "comp init" and "comp clear" are tested in use by the test suite.

    #-------------------------------------------------------------------
    # new

    test new-1.1 {compare one scenario; time not advanced} -body {
        codecatch comp new case00
    } -cleanup {
        cleanup
    } -result {{ARACHNE COMPARE NORUN} {Time has not been advanced in case "case00".}}

    test new-1.2 {compare one scenario; scenario busy} -setup {
        mkbusy case00
    } -body {
        codecatch comp new case00
    } -cleanup {
        cleanup
    } -result {{ARACHNE COMPARE BUSY} {Scenario is busy in case "case00".}}
    
    test new-1.3 {compare two scenarios; second not advanced} -setup {
        advance case00
        case new
    } -body {
        codecatch comp new case00 case01
    } -cleanup {
        cleanup
    } -result {{ARACHNE COMPARE NORUN} {Time has not been advanced in case "case01".}}

    test new-1.4 {compare two scenarios; second is busy} -setup {
        advance case00
        case new
        mkbusy case01
    } -body {
        codecatch comp new case00 case01
    } -cleanup {
        cleanup
    } -result {{ARACHNE COMPARE BUSY} {Scenario is busy in case "case01".}}

    test new-1.5 {scenarios are incomparable} -setup {
        advance case00
        case new
        incomp case01
    } -body {
        codecatch comp new case00 case01
    } -cleanup {
        cleanup
    } -result {{ARACHNE COMPARE INCOMPARABLE} {Scenarios not comparable: different neighborhoods.}}
    
    test new-2.1 {compare one scenario} -setup {
        advance case00 10
    } -body {
        set id [comp new case00]

        list $id [comp longname $id]
    } -cleanup {
        cleanup
    } -result {comp00 {case00 @ 0 vs. case00 @ 10}}

    test new-2.2 {compare two scenarios} -setup {
        advance case00 10
        case new
        advance case01 10
    } -body {
        set id [comp new case00 case01]

        list $id [comp longname $id]
    } -cleanup {
        cleanup
    } -result {comp00 {case00 @ 10 vs. case01 @ 10}}

    #-------------------------------------------------------------------
    # names

    test names-1.1 {default} -body {
        comp names
    } -cleanup {
        cleanup
    } -result {}

    test names-1.2 {default} -setup {
        advance case00
        comp new case00
        comp new case00
    } -body {
        comp names
    } -cleanup {
        cleanup
    } -result {comp00 comp01}
    

    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {not found} -body {
        codecatch comp validate nonesuch
    } -cleanup {
        cleanup
    } -result {INVALID {Unknown comparison: "nonesuch"}}

    test validate-1.2 {found} -setup {
        advance case00
        comp new case00
    } -body {
        comp validate comp00
    } -cleanup {
        cleanup
    } -result {comp00}

    #-------------------------------------------------------------------
    # get

    test get-1.1 {get comparison} -setup {
        advance case00
        comp new case00
    } -body {
        comp get comp00
    } -cleanup {
        cleanup
    } -match glob -result {::athena::differencer::comparison*}

    #-------------------------------------------------------------------
    # with

    test with-1.1 {call comparison directly given id} -setup {
        advance case00
        comp new case00
    } -body {
        comp with comp00 t1
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # metadata
    
    test metadata-1.1 {one scenario} -setup {
        advance case00
        comp new case00
    } -body {
        ted pdicts [comp metadata comp00]
    } -cleanup {
        cleanup
    } -match dict -result {
        case1    case00
        case2    case00
        id       comp00
        longname {case00 @ 0 vs. case00 @ 1}
        t1       0
        t2       1
    }

    test metadata-1.2 {two scenarios} -setup {
        advance case00
        case new
        advance case01
        comp new case00 case01
    } -body {
        ted pdicts [comp metadata comp00]
    } -cleanup {
        cleanup
    } -match dict -result {
        case1    case00
        case2    case01
        id       comp00
        longname {case00 @ 1 vs. case01 @ 1}
        t1       1
        t2       1
    }


    #-------------------------------------------------------------------
    # remove

    test remove-1.1 {Can remove} -setup {
        advance case00
        comp new case00
        comp new case00
    } -body {
        comp remove comp00
        comp names
    } -cleanup {
        cleanup
    } -result {comp01}

   

    #-------------------------------------------------------------------
    # Cleanup

    ::tcltest::cleanupTests
}

namespace delete ::athena_test::tests::




