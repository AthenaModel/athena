# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-scenario.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_arachne(1): Scenario Management URLs
#
#    This test suite tests the handlers for these URLs:
#
#    /scenario/*.{html,json}
#    /scenario/{name}/*.{html,json}.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athenawb(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {scenario what args} {
        # TBD
    }

    proc cleanup {} {
       ted cleanup
    }

    ted mkadb test1

    #-------------------------------------------------------------------
    # /scenario/urlschema.html

    test urlschema-1.1 {Can retrieve the URL schema} -body {
        ted get /urlschema.html
    } -match glob -result {<html>*URL Schema Help*</html>}
    
    #-------------------------------------------------------------------
    # /scenario/index.json
    
    test index.json-1.1 {Can retrieve the URL} -body {
        ted get /index.json
    } -match trim -result {
[{
    "id": "case00",
    "longname": "Base Case",
    "state": "PREP",
    "tick": 0,
    "week": "2012W01",
    "source": "n\/a",
    "url": "\/scenario\/case00\/index.json"
  }]
    }

    #-------------------------------------------------------------------
    # /scenario/index.html
    
    test index.html-1.1 {Can retrieve the URL} -body {
        ted get /index.html
    } -match glob -result {<html>*case00*</html>}


    #-------------------------------------------------------------------
    # /scenario/new.json
    
    test new.json-1.1 {REJECT: unknown ID} -body {
        ted getjson /new.json case case01
    } -match norm -result {REJECT {case {Unknown case}}}

    test new.json-2.1 {OK} -body {
        ted getjson /new.json
    } -cleanup {
        cleanup
    } -match norm -result {OK case01}

    test new.json-3.1 {New case, default longname} -body {
        ted get /new.json
        set case [lindex [case names] end]

        list $case [dict get [case metadata $case] longname]
    } -cleanup {
        cleanup
    } -result {case01 {Scenario #01}}

    test new.json-3.2 {New case, new longname} -body {
        ted get /new.json longname "My New Name"
        set case [lindex [case names] end]

        list $case [dict get [case metadata $case] longname]
    } -cleanup {
        cleanup
    } -result {case01 {My New Name}}

    test new.json-3.3 {Reset case, new longname} -body {
        ted get /new.json case case00 longname "A New Name"
        set case [lindex [case names] end]

        list $case [dict get [case metadata $case] longname]
    } -cleanup {
        cleanup
    } -result {case00 {A New Name}}

    #-------------------------------------------------------------------
    # /scenario/new.html
    
    test new.html-1.1 {unknown ID} -body {
        ted get /new.html op new case case01
    } -match glob -result {*Unknown case, "case01"*}

    test new.html-2.1 {success, redirect} -body {
        ted get /new.html op new
    } -cleanup {
        cleanup
    } -match glob -result {*Created scenario "case01"*}

    test new.html-3.1 {New case, default longname} -body {
        ted get /new.html op new
        set case [lindex [case names] end]

        list $case [dict get [case metadata $case] longname]
    } -cleanup {
        cleanup
    } -match trim -result {case01 {Scenario #01}}

    test new.html-3.2 {New case, new longname} -body {
        ted get /new.html op new longname "My New Name"
        set case [lindex [case names] end]

        list $case [dict get [case metadata $case] longname]
    } -cleanup {
        cleanup
    } -match trim -result {case01 {My New Name}}

    test new.html-3.3 {Reset case, new longname} -body {
        ted get /new.html op new case case00 longname "A New Name"
        set case [lindex [case names] end]

        list $case [dict get [case metadata $case] longname]
    } -cleanup {
        cleanup
    } -match trim -result {case00 {A New Name}}

    #-------------------------------------------------------------------
    # /scenario/clone.json
    
    test clone.json-1.1 {REJECT: unknown ID} -body {
        ted getjson /clone.json source case01
    } -match norm -result {REJECT {source {Unknown source}}}

    test clone.json-1.2 {REJECT: unknown target} -body {
        ted getjson /clone.json source case00 target case01
    } -match norm -result {REJECT {target {Unknown target}}}

    test clone.json-1.3 {REJECT: source is target} -body {
        ted getjson /clone.json source case00 target case00
    } -match norm -result {REJECT {target {Cannot clone scenario to itself}}}

    test clone.json-2.1 {OK} -body {
        ted getjson /clone.json source case00
    } -cleanup {
        cleanup
    } -match norm -result {OK case01}

    test clone.json-3.1 {New case with default longname} -body {
        ted get /clone.json source case00
        set source [lindex [case names] end]

        list $source [dict get [case metadata $source] longname]
    } -cleanup {
        cleanup
    } -result {case01 {Scenario #01}}

    test clone.json-3.2 {New case with new longname} -body {
        ted get /clone.json source case00 longname "My New Name"
        set source [lindex [case names] end]

        list $source [dict get [case metadata $source] longname]
    } -cleanup {
        cleanup
    } -result {case01 {My New Name}}

    test clone.json-3.3 {Existing case, new longname} -body {
        ted get /new.json
        set target [lindex [case names] end]

        ted get /clone.json source case00 target $target longname "The New Name"

        list $target [dict get [case metadata $target] longname]
    } -cleanup {
        cleanup
    } -result {case01 {The New Name}}

    #-------------------------------------------------------------------
    # /scenario/import.json
    
    test import.json-1.1 {REJECT: no filename} -body {
        ted getjson /import.json
    } -match norm -result {REJECT {filename {Required parameter}}}

    test import.json-1.2 {REJECT: no such case} -body {
        ted getjson /import.json filename dummy.adb case case01
    } -match norm -result {REJECT {case {Unknown case}}}

    test import.json-2.1 {OK} -body {
        ted getjson /import.json filename test1.adb
    } -cleanup {
        cleanup
    } -match norm -result {OK case01}

    test import.json-3.1 {With case and longname} -body {
        ted getjson /import.json filename test1.adb case case00 longname Fred
    } -cleanup {
        cleanup
    } -match norm -result {OK case00}

    #-------------------------------------------------------------------
    # /scenario/export.json
    
    test export.json-1.1 {REJECT: no case} -body {
        ted getjson /export.json filename dummy.adb
    } -match norm -result {REJECT {case {Required parameter}}}

    test export.json-1.1 {REJECT: no filename} -body {
        ted getjson /export.json case case00
    } -match norm -result {REJECT {filename {Required parameter}}}

    test export.json-1.2 {REJECT: no such case} -body {
        ted getjson /export.json case case01 filename dummy.adb
    } -match norm -result {REJECT {case {Unknown case}}}

    test export.json-2.1 {OK} -body {
        ted getjson /export.json case case00 filename export21
    } -cleanup {
        tcltest::removeFile [case scenariodir export21.adb]
        cleanup
    } -match norm -result {OK export21.adb}

    #-------------------------------------------------------------------
    # /scenario/remove.json
    
    test remove.json-1.1 {REJECT: missing case} -body {
        ted getjson /remove.json
    } -match norm -result {REJECT {case {Required parameter}}}

    test remove.json-1.2 {REJECT: unknown case} -body {
        ted getjson /remove.json case NONESUCH
    } -match norm -result {REJECT {case {Unknown case}}}

    test remove.json-1.3 {REJECT: base case} -body {
        ted getjson /remove.json case case00
    } -match norm -result {REJECT {case {Cannot remove the base case}}}

    test remove.json-2.1 {OK} -setup { 
        set case [case new]
    } -body {
        ted getjson /remove.json case $case
    } -cleanup {
        cleanup
    } -match norm -result {OK {Deleted case01}}

    test remove.json-2.2 {Case deleted} -setup { 
        set case [case new]
    } -body {
        set a [case names]
        ted get /remove.json case $case
        set b [case names]

        list $a $b
    } -cleanup {
        cleanup
    } -result {{case00 case01} case00}

    #-------------------------------------------------------------------
    # /scenario/{name}/sanity/onlock.json


    test sanity_onlock.json-1.1 {No such scenario} -body {
        ted get /nonesuch/sanity/onlock.json
    } -result {NOTFOUND {No such scenario: "nonesuch"}}

    test sanity/onlock.json-2.1 {OK: sanity/onlock accepted} -body {
        ted get /case00/sanity/onlock.json
    } -cleanup {
        cleanup
    } -result {[
  {
    "severity": "error",
    "code": "nbhood.none",
    "entity": "nbhood",
    "message": "No neighborhoods are defined."
  },
  {
    "severity": "error",
    "code": "frcgroup.none",
    "entity": "group\/frc",
    "message": "No force groups are defined."
  },
  {
    "severity": "error",
    "code": "civgroup.none",
    "entity": "group\/civ",
    "message": "No civilian groups are defined."
  },
  {
    "severity": "error",
    "code": "civgroup.pop",
    "entity": "group\/civ",
    "message": "No civilian group has a base population greater than 0."
  },
  {
    "severity": "error",
    "code": "econ.noconsumers",
    "entity": "group\/civ",
    "message": "No consumers in local economy. At least one civilian group must be in a \"local\" neighborhood, must have base population greater than 0, and must not live by subsistence agriculture."
  }
]}

    #-------------------------------------------------------------------
    # /scenario/{name}/order.json
    #
    # Note: most of the functionality is in the [case send] command,
    # tested in 010-case.test.

    test order.json-1.1 {No such scenario} -body {
        ted get /nonesuch/order.json
    } -result {NOTFOUND {No such scenario: "nonesuch"}}

    test order.json-1.2 {REJECT: no order_} -body {
        ted getjson /case00/order.json
    } -match norm -result {REJECT {order_ {Required parameter}}}
    
    test order.json-2.1 {OK: order accepted} -body {
        ted getjson /case00/order.json order_ ACTOR:CREATE a JOE
    } -cleanup {
        cleanup
    } -match norm -result {OK {}}


    #-------------------------------------------------------------------
    # /scenario/{name}/script.json

    test script.json-1.1 {No such scenario} -body {
        ted post /nonesuch/script.json
    } -result {NOTFOUND {No such scenario: "nonesuch"}}
    
    test script.json-2.1 {script executed} -body {
        json::json2dict [ted post /case00/script.json {
            set a howdy
        }]
    } -cleanup {
        cleanup
    } -match norm -result {OK howdy}

    test script.json-2.2 {error in script} -body {
        json::json2dict [ted post /case00/script.json {
            error "Bogus Error"
        }]
    } -cleanup {
        cleanup
    } -match norm -result {EXCEPTION {Bogus Error} {*}}

    #-------------------------------------------------------------------
    # /scenario/{name}/script.html

    test script.html-1.1 {No such scenario} -body {
        ted get /nonesuch/script.html
    } -result {NOTFOUND {No such scenario: "nonesuch"}}


    #-------------------------------------------------------------------
    # Actor URLs

    test actor.html-1.1 {all actors HTML} -setup {
        ted with {autogen actors 1}
    } -body {
        ted get /case00/actors/index.html
    } -cleanup {
        ted cleanup
    } -match glob -result {*'case00': Actors*}    

    test actor.html-1.2 {one actor HTML} -setup {
        ted with {autogen actors 1}
    } -body {
        ted get /case00/actor/A00/index.html
    } -cleanup {
        ted cleanup
    } -match glob -result {*'case00': Actor: A00*}

    test actor.json-1.1 {all actors JSON} -setup {
        ted with {autogen actors 1}
    } -body {
        ted get /case00/actors/index.json
    } -cleanup {
        ted cleanup
        tcltest::removeFile [case scenariodir actor.adb]
    } -match trim -result {
[{
    "supports": "SELF",
    "income_pop": 0.00,
    "a": "A00",
    "fancy": "A00",
    "auto_maintain": 0,
    "cash_reserve": 0.00,
    "bsysname": "Neutral (1)",
    "url": "\/scenario\/case00\/actor\/A00\/index.json",
    "income": 0.00,
    "budget": 0.00,
    "atype": "INCOME",
    "id": "A00",
    "qid": "actor\/A00",
    "shares_black_nr": 0,
    "longname": "A00",
    "supports_url": "",
    "income_world": 0.00,
    "bsid": 1,
    "income_black_tax": 0.00,
    "cash_on_hand": "500.000B",
    "supports_qid": "",
    "income_graft": 0.00,
    "income_goods": 0.00,
    "pretty_am_flag": "No"
  }]}
    
test actor.json-1.2 {one actor JSON} -setup {
        ted with {autogen actors 1}
    } -body {
        ted get /case00/actor/A00/index.json
    } -cleanup {
        ted cleanup
        tcltest::removeFile [case scenariodir actor.adb]
    } -match trim -result {
[{
    "supports": "SELF",
    "income_pop": 0.00,
    "a": "A00",
    "fancy": "A00",
    "auto_maintain": 0,
    "cash_reserve": 0.00,
    "bsysname": "Neutral (1)",
    "url": "\/scenario\/case00\/actor\/A00\/index.json",
    "income": 0.00,
    "budget": 0.00,
    "atype": "INCOME",
    "id": "A00",
    "qid": "actor\/A00",
    "shares_black_nr": 0,
    "longname": "A00",
    "supports_url": "",
    "income_world": 0.00,
    "bsid": 1,
    "income_black_tax": 0.00,
    "cash_on_hand": "500.000B",
    "supports_qid": "",
    "income_graft": 0.00,
    "income_goods": 0.00,
    "pretty_am_flag": "No"
  }]}

    #-------------------------------------------------------------------
    # Nbhood URLs

    test nbhood.html-1.1 {all nbhoods HTML} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
    } -body {
        ted get /case00/nbhood/index.html
    } -cleanup {
        ted cleanup
    } -match glob -result {*'case00': Neighborhoods*}    

    test nbhood.html-1.2 {one nbhood HTML} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
    } -body {
        ted get /case00/nbhood/N00/index.html
    } -cleanup {
        ted cleanup
    } -match glob -result {*'case00': Neighborhood: N00*}

    test nbhood.json-1.1 {all nbhoods JSON} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
    } -body {
        ted get /case00/nbhood/index.json
    } -cleanup {
        ted cleanup
        tcltest::removeFile [case scenariodir actor.adb]
    } -match trim -result {
[
  {
    "subsistence": 0,
    "polygon": "38TNM0000049776 38TNM0496949778 38TNM0497245337 38TNM0000045335",
    "controller_qid": "actor\/A00",
    "volatility": 0,
    "fancy": "N00",
    "pcf":  1.0,
    "unemployed": 0,
    "since": "2012W01",
    "url": "\/scenario\/case00\/nbhood\/N00\/index.json",
    "population": 0.0,
    "controller": "A00",
    "id": "N00",
    "labor_force": 0,
    "qid": "nbhood\/N00",
    "urbanization": "URBAN",
    "mood0": 0.000,
    "consumers": 0,
    "stacking_order": 1,
    "since_ticks": 0,
    "obscured_by": "",
    "longname": "N00",
    "local": "YES",
    "controller_url": "\/scenario\/case00\/actor\/A00\/index.json",
    "n": "N00",
    "mood": 0.000,
    "refpoint": "38TNM0248547556"
  },
  {
    "subsistence": 0,
    "polygon": "38TNM0496949778 38TNM0993849783 38TNM0994445342 38TNM0497245337",
    "controller_qid": "actor\/A00",
    "volatility": 0,
    "fancy": "N01",
    "pcf":  1.0,
    "unemployed": 0,
    "since": "2012W01",
    "url": "\/scenario\/case00\/nbhood\/N01\/index.json",
    "population": 0.0,
    "controller": "A00",
    "id": "N01",
    "labor_force": 0,
    "qid": "nbhood\/N01",
    "urbanization": "URBAN",
    "mood0": 0.000,
    "consumers": 0,
    "stacking_order": 2,
    "since_ticks": 0,
    "obscured_by": "",
    "longname": "N01",
    "local": "YES",
    "controller_url": "\/scenario\/case00\/actor\/A00\/index.json",
    "n": "N01",
    "mood": 0.000,
    "refpoint": "38TNM0745647560"
  }
]}
    
test nbhood.json-1.2 {one nbhood JSON} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
    } -body {
        ted get /case00/nbhood/N00/index.json
    } -cleanup {
        ted cleanup
        tcltest::removeFile [case scenariodir actor.adb]
    } -match trim -result {
[{
    "subsistence": 0,
    "polygon": "38TNM0000049776 38TNM0496949778 38TNM0497245337 38TNM0000045335",
    "controller_qid": "actor\/A00",
    "volatility": 0,
    "fancy": "N00",
    "pcf":  1.0,
    "unemployed": 0,
    "since": "2012W01",
    "url": "\/scenario\/case00\/nbhood\/N00\/index.html\/index.json",
    "population": 0.0,
    "controller": "A00",
    "id": "N00",
    "labor_force": 0,
    "qid": "nbhood\/N00",
    "urbanization": "URBAN",
    "mood0": 0.000,
    "consumers": 0,
    "stacking_order": 1,
    "since_ticks": 0,
    "obscured_by": "",
    "longname": "N00",
    "local": "YES",
    "controller_url": "\/scenario\/case00\/actor\/A00\/index.json",
    "n": "N00",
    "mood": 0.000,
    "refpoint": "38TNM0248547556"
  }]}

    #-------------------------------------------------------------------
    # CIV group URLs

    test civgroup.html-1.1 {all civgroups HTML} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
        ted with {autogen civgroups 1}
    } -body {
        ted get /case00/civgroup/index.html
    } -cleanup {
        ted cleanup
    } -match glob -result {*'case00': Neighborhoods*}    

    test nbhood.html-1.2 {one nbhood HTML} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
        ted with {autogen civgroups 1}
    } -body {
        ted get /case00/nbhood/N00/index.html
    } -cleanup {
        ted cleanup
    } -match glob -result {*'case00': Neighborhood: N00*}

    test nbhood.json-1.1 {all nbhoods JSON} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
        ted with {autogen civgroups 1}
    } -body {
        ted get /case00/nbhood/index.json
    } -cleanup {
        ted cleanup
        tcltest::removeFile [case scenariodir actor.adb]
    } -match trim -result {
[
  {
    "subsistence": 0,
    "polygon": "38TNM0000049776 38TNM0496949778 38TNM0497245337 38TNM0000045335",
    "controller_qid": "actor\/A00",
    "volatility": 0,
    "fancy": "N00",
    "pcf":  1.0,
    "unemployed": 0,
    "since": "2012W01",
    "url": "\/scenario\/case00\/nbhood\/N00\/index.json",
    "population": 0.0,
    "controller": "A00",
    "id": "N00",
    "labor_force": 0,
    "qid": "nbhood\/N00",
    "urbanization": "URBAN",
    "mood0": 0.000,
    "consumers": 0,
    "stacking_order": 1,
    "since_ticks": 0,
    "obscured_by": "",
    "longname": "N00",
    "local": "YES",
    "controller_url": "\/scenario\/case00\/actor\/A00\/index.json",
    "n": "N00",
    "mood": 0.000,
    "refpoint": "38TNM0248547556"
  },
  {
    "subsistence": 0,
    "polygon": "38TNM0496949778 38TNM0993849783 38TNM0994445342 38TNM0497245337",
    "controller_qid": "actor\/A00",
    "volatility": 0,
    "fancy": "N01",
    "pcf":  1.0,
    "unemployed": 0,
    "since": "2012W01",
    "url": "\/scenario\/case00\/nbhood\/N01\/index.json",
    "population": 0.0,
    "controller": "A00",
    "id": "N01",
    "labor_force": 0,
    "qid": "nbhood\/N01",
    "urbanization": "URBAN",
    "mood0": 0.000,
    "consumers": 0,
    "stacking_order": 2,
    "since_ticks": 0,
    "obscured_by": "",
    "longname": "N01",
    "local": "YES",
    "controller_url": "\/scenario\/case00\/actor\/A00\/index.json",
    "n": "N01",
    "mood": 0.000,
    "refpoint": "38TNM0745647560"
  }
]}
    
test nbhood.json-1.2 {one nbhood JSON} -setup {
        ted with {autogen actors 1}
        ted with {autogen nbhoods 2}
        ted with {autogen civgroups 1}
    } -body {
        ted get /case00/nbhood/N00/index.json
    } -cleanup {
        ted cleanup
        tcltest::removeFile [case scenariodir actor.adb]
    } -match trim -result {
[{
    "subsistence": 0,
    "polygon": "38TNM0000049776 38TNM0496949778 38TNM0497245337 38TNM0000045335",
    "controller_qid": "actor\/A00",
    "volatility": 0,
    "fancy": "N00",
    "pcf":  1.0,
    "unemployed": 0,
    "since": "2012W01",
    "url": "\/scenario\/case00\/nbhood\/N00\/index.html\/index.json",
    "population": 0.0,
    "controller": "A00",
    "id": "N00",
    "labor_force": 0,
    "qid": "nbhood\/N00",
    "urbanization": "URBAN",
    "mood0": 0.000,
    "consumers": 0,
    "stacking_order": 1,
    "since_ticks": 0,
    "obscured_by": "",
    "longname": "N00",
    "local": "YES",
    "controller_url": "\/scenario\/case00\/actor\/A00\/index.json",
    "n": "N00",
    "mood": 0.000,
    "refpoint": "38TNM0248547556"
  }]}


    #-------------------------------------------------------------------
    # Cleanup


    ::tcltest::cleanupTests
}

namespace delete ::athena_test::tests::




