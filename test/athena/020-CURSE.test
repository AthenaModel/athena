# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CURSE.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    app_sim(1) CURSE:* order tests.
#
#    This test suite tests the CURSE-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard curses
    set c1 {
        curse_id C1
        longname   "CURSE One"
    }

    set c2 {
        curse_id C2
        longname   "CURSE Two"
    }

    # Setup
    proc setup {} {
        # TBD 
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # CURSE:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject CURSE:CREATE {}
    } -result {
        curse_id {required value}
    }
    

    test CREATE-1.2 {Duplicate curse_id} -setup {
        setup
        ted order CURSE:CREATE $c1
    } -body {
        ted order -reject CURSE:CREATE $c1
    } -cleanup {
        cleanup
    } -result {
        curse_id {An entity with this ID already exists}
    }


    test CREATE-1.3 {curse_id is not an ident} -setup {
        setup
    } -body {
        ted order -reject CURSE:CREATE {*}$c1 curse_id "C&"
    } -cleanup {
        cleanup
    } -result {
        curse_id {Identifiers begin with a letter and contain only letters and digits.}
    }

      test CREATE-2.1 {curse is created} -setup {
        setup
    } -body {
        ted order CURSE:CREATE $c1

        ted querylist {SELECT * FROM curses}
    } -cleanup {
        cleanup
    } -result {
curse_id  C1
longname  CURSE One
cause     UNIQUE
s         1.0
p         0.0
q         0.0
state     normal
    }

    test CREATE-2.2 {longname defaults to ID} -setup {
        setup
    } -body {
        ted order CURSE:CREATE {*}$c1 longname ""

        tdb onecolumn {SELECT longname FROM curses}
    } -cleanup {
        cleanup
    } -result {C1}

    test CREATE-2.3 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <curses>
        ted order CURSE:CREATE $c1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> update C1}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order CURSE:CREATE $c1
    } -body {
        ted notifier bind ::tdb <curses>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> delete C1}
    }


    #-------------------------------------------------------------------
    # CURSE:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject CURSE:DELETE {}
    } -result {
        curse_id {required value}
    }

    
    test DELETE-1.2 {unknown CURSE} -body {
        ted order -reject CURSE:DELETE curse_id NONESUCH
    } -result {
        curse_id {Invalid CURSE, none are defined}
    }


    test DELETE-2.1 {Effects} -setup {
        ted order CURSE:CREATE $c1
    } -body {
        ted notifier bind ::tdb <curses>
        ted order CURSE:DELETE curse_id C1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> delete C1}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted order CURSE:CREATE $c1
        ted order CURSE:DELETE curse_id C1
    } -body {
        ted notifier bind ::tdb <curses>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> update C1}
    }


    #-------------------------------------------------------------------
    # CURSE:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject CURSE:UPDATE {}
    } -result {
        curse_id {required value}
    }

    test UPDATE-2.1 {curse is updated} -setup {
        ted order CURSE:CREATE $c1
    } -body {
        ted order CURSE:UPDATE {
            curse_id     C1
            longname   "New Name"
        }

        ted querylist {SELECT * FROM curses}
    } -cleanup {
        cleanup
    } -result {
curse_id  C1
longname  New Name
cause     UNIQUE
s         1.0
p         0.0
q         0.0
state     normal
    }


    test UPDATE-2.2 {table monitor event} -setup {
        ted order CURSE:CREATE $c1
    } -body {
        ted notifier bind ::tdb <curses>
        ted order CURSE:UPDATE curse_id C1 longname "New Name"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> update C1}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted order CURSE:CREATE $c1
        ted order CURSE:UPDATE {
            curse_id   C1
            longname "New Name"
        }
    } -body {
        ted notifier bind ::tdb <curses>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> update C1}
    }

    #-------------------------------------------------------------------
    # CURSE:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject CURSE:STATE {}
    } -result {
        curse_id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown curse id} -body {
        ted order -reject CURSE:STATE curse_id NONESUCH state disabled
    } -result {
        curse_id {Invalid CURSE, none are defined}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order CURSE:CREATE $c1
    } -body {
        ted notifier bind ::tdb <curses>
        ted order CURSE:STATE curse_id C1 state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> update C1}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order CURSE:CREATE $c1
        ted order CURSE:STATE curse_id C1 state disabled
    } -body {
        ted notifier bind ::tdb <curses>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <curses> update C1}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

