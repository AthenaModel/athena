# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-paster.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    athena(n) paster tests.
#
#    This test suite tests pasting of scenario objects
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # setup

    proc setup {} {
        variable B1
        variable B2
        variable C1

        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD

        # NEXT, add some blocks
        set B1 [ted addblock SYSTEM]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # paste block
    
    test block-1.1 {block's metadata is pasted} -setup {
        setup
        $B1 configure -tmode BEFORE -t1 10 -cmode ANY -once 1
    } -body {
        tdb paste block BOB [list [$B1 copydata]]
        set B2 [[tdb strategy getname BOB] blocks 0]
        ted pdicts [$B2 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        cmode      ANY
        conditions {}
        emode      ALL
        execstatus NONE
        exectime   {}
        id         *
        intent     {}
        name       B*
        once       1
        onlock     0
        parent     3
        pot        *::pot
        state      normal
        t1         10
        t2         {}
        tactics    {}
        tmode      BEFORE
    }

    test block-1.2 {block's conditions are pasted} -setup {
        setup
        ted addcondition $B1 EXPR expression {1 == 1}
        ted addcondition $B1 EXPR expression {2 == 2}
    } -body {
        tdb paste block BOB [list [$B1 copydata]]
        set B2 [[tdb strategy getname BOB] blocks 0]
        lassign [$B2 conditions] C1 C2
        list [$C1 get expression] [$C2 get expression]
    } -cleanup {
        cleanup
    } -result {{1 == 1} {2 == 2}}

    test block-1.3 {block's tactics are pasted} -setup {
        setup
        ted addtactic $B1 SIGEVENT msg {message 1}
        ted addtactic $B1 SIGEVENT msg {message 2}
    } -body {
        tdb paste block BOB [list [$B1 copydata]]
        set B2 [[tdb strategy getname BOB] blocks 0]
        lassign [$B2 tactics] T1 T2
        list [$T1 get msg] [$T2 get msg]
    } -cleanup {
        cleanup
    } -result {{message 1} {message 2}}

    test block-1.4 {can paste multiple blocks} -setup {
        setup
        $B1 configure -tmode BEFORE -t1 10
        set B2 [ted addblock JOE]
        $B2 configure -tmode AFTER -t1 20
    } -body {
        tdb paste block BOB [list [$B1 copydata] [$B2 copydata]]
        lassign [[tdb strategy getname BOB] blocks] B3 B4
        list [$B3 get tmode] [$B4 get tmode]
    } -cleanup {
        cleanup
    } -result {BEFORE AFTER}

    #-------------------------------------------------------------------
    # paste condition

    test condition-1.1 {can paste one condition} -setup {
        setup
        set B2 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 EXPR]

        $C1 configure -expression "1 == 1"
    } -body {
        set copyset [$C1 copydata]
        tdb paste condition [$B2 id] [list $copyset]
        set C2 [$B2 conditions 0]
        ted pdicts [$C2 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        expression {1 == 1}
        id         *
        metflag    {}
        name       C*
        parent     *
        pot        *::pot
        state      normal
    }
    
    test condition-1.2 {can paste multiple conditions} -setup {
        setup
        set B2 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 EXPR]
        $C1 configure -expression "1 == 1"
        set C2 [ted addcondition $B1 EXPR]
        $C2 configure -expression "2 == 2"
    } -body {
        set copysets [list [$C1 copydata] [$C2 copydata]]
        tdb paste condition [$B2 id] $copysets
        set C3 [$B2 conditions 0]
        set C4 [$B2 conditions 1]
        list [$C3 get expression] [$C4 get expression]
    } -cleanup {
        cleanup
    } -result {{1 == 1} {2 == 2}}

    #-------------------------------------------------------------------
    # paste tactic

    test tactic-1.1 {can paste one tactic} -setup {
        setup
        set T1 [ted addtactic $B1 SIGEVENT]
        set T2 [ted addtactic $B1 EXECUTIVE]
        set B2 [ted addblock SYSTEM]
        $T1 configure -msg "my message"
    } -body {
        set copyset [$T1 copydata]
        tdb paste tactic [$B2 id] [list $copyset]
        set T2 [$B2 tactics 0]
        ted pdicts [$T2 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        faildict   {}
        id         *
        msg        {my message}
        name       T*
        parent     *
        pot        *::pot
        state      normal
    }
    
    test tactic-1.2 {can paste multiple tactics} -setup {
        setup
        set T1 [ted addtactic $B1 SIGEVENT]
        set T2 [ted addtactic $B1 EXECUTIVE]
        set B2 [ted addblock SYSTEM]
        $T1 configure -msg "my message"
        $T2 configure -command "my command"
    } -body {
        set copysets [list [$T1 copydata] [$T2 copydata]]
        tdb paste tactic [$B2 id] $copysets
        set T3 [$B2 tactics 0]
        set T4 [$B2 tactics 1]
        list [$T3 get msg] [$T4 get command]
    } -cleanup {
        cleanup
    } -result {{my message} {my command}}



    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::










