# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-unit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    unit(sim) tests.
#
#    This test suite tests the unit(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2 BLUE USAID SHIA
        tdb demog start
        tdb personnel start
        tdb unit reset
        tdb personnel load
        tdb personnel deploy 1 NB1 BLUE  100
        tdb personnel deploy 2 NB2 USAID 100
        tdb personnel save
    }

    # Clean up after a test
    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # makebase

    test makebase-1.1 {units are created} -setup {
        setup
    } -body {
        tdb unit makebase

        ted query {
            SELECT u,n,g,gtype,a,personnel,active 
            FROM units
            WHERE active
            ORDER BY u
        }
    } -cleanup {
        cleanup
    } -result {
u         n   g     gtype a    personnel active 
--------- --- ----- ----- ---- --------- ------ 
BLUE/NB1  NB1 BLUE  FRC   NONE 100       1      
SHIA/NB1  NB1 SHIA  CIV   NONE 1000      1      
USAID/NB2 NB2 USAID ORG   NONE 100       1      
    }


    #-------------------------------------------------------------------
    # assign

    test assign-1.1 {units are created} -setup {
        setup
    } -body {
        tdb unit assign 1 BLUE NB2 PATROL 50

        ted query {
            SELECT tactic_id,u,n,g,gtype,a,personnel,active 
            FROM units
            WHERE active
        }
    } -cleanup {
        cleanup
    } -result {
tactic_id u      n   g    gtype a      personnel active 
--------- ------ --- ---- ----- ------ --------- ------ 
1         UT0001 NB2 BLUE FRC   PATROL 50        1      
    }

    #-------------------------------------------------------------------
    # reset

    test reset-1.1 {units are reset} -setup {
        setup
        tdb unit makebase
        tdb unit assign 1 BLUE NB1 PATROL 50
    } -body {
        tdb unit reset
        ted query {
            SELECT tactic_id,u,n,g,gtype,a,personnel,active 
            FROM units
            ORDER BY u
        }
    } -cleanup {
        cleanup
    } -result {
tactic_id u         n   g     gtype a    personnel active 
--------- --------- --- ----- ----- ---- --------- ------ 
          BLUE/NB1  NB1 BLUE  FRC   NONE 0         0      
          SHIA/NB1  NB1 SHIA  CIV   NONE 0         0      
          USAID/NB2 NB2 USAID ORG   NONE 0         0      
    }

    #-------------------------------------------------------------------
    # personnel


    test personnel-1.1 {unit is updated} -setup {
        setup
        tdb unit assign 1 BLUE NB1 PATROL 50
    } -body {
        tdb unit personnel UT0001 3

        ted query {SELECT u,personnel FROM units WHERE active}
    } -cleanup {
        cleanup
    } -result {
u      personnel 
------ --------- 
UT0001 3         
    }


    test personnel-1.2 {updated unit is active} -setup {
        setup
        tdb unit makebase
        tdb unit reset
    } -body {
        tdb unit personnel BLUE/NB1 3

        ted query {SELECT u,personnel,active FROM units ORDER BY u}
    } -cleanup {
        cleanup
    } -result {
u         personnel active 
--------- --------- ------ 
BLUE/NB1  3         1      
SHIA/NB1  0         0      
USAID/NB2 0         0      
    }

    #-------------------------------------------------------------------
    # delete

    test delete-1.1 {Unit is deleted} -setup {
        setup
        tdb unit makebase
    } -body {
        tdb unit delete BLUE/NB1

        # Is it gone?
        tdb eval {SELECT u FROM units ORDER BY u}
    } -cleanup {
        cleanup
    } -result {SHIA/NB1 USAID/NB2}

    #-------------------------------------------------------------------
    # move

    test move-1.1 {unit is moved} -setup {
        setup
        tdb unit makebase
    } -body {
        tdb unit move BLUE/NB1 {2 2}

        ted query {SELECT u, location FROM units WHERE u='BLUE/NB1'}
    } -cleanup {
        cleanup
    } -result {
u        location 
-------- -------- 
BLUE/NB1 2.0 2.0  
    }

    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        tdb unit names
    } -cleanup {
        cleanup
    } -result {}


    test names-1.2 {Returns names} -setup {
        setup
        tdb unit makebase
    } -body {
        lsort [tdb unit names]
    } -cleanup {
        cleanup
    } -result {BLUE/NB1 SHIA/NB1 USAID/NB2}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid name} -body {
        tdb unit validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid unit name: "NONESUCH"}


    test validate-2.1 {Valid name} -setup {
        setup
        tdb unit makebase
    } -body {
        tdb unit validate BLUE/NB1
    } -cleanup {
        cleanup
    } -result {BLUE/NB1}


    #-------------------------------------------------------------------
    # names

    test get-1.1 {Get dict} -setup {
        setup
        tdb unit makebase
    } -body {
        ted pdict [dict remove [tdb unit get BLUE/NB1] location]
    } -cleanup {
        cleanup
    } -result {
        active      1
        tactic_id   {}
        attrit_flag 0
        a           NONE
        gtype       FRC
        u           BLUE/NB1
        personnel   100
        n           NB1
        g           BLUE
    }


    test get-1.2 {Get one parameter} -setup {
        setup
        tdb unit makebase
    } -body {
        tdb unit get BLUE/NB1 n
    } -cleanup {
        cleanup
    } -result {NB1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





