# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-payload.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    athena(n) PAYLOAD:* order tests.
#
#    This test suite tests the payload-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard payloads

    set P1 {
        iom_id       IOM1
        g            BLUE
        mag          1.0
    }

    set P2 {
        iom_id       IOM2
        g            BRIT
        mag          2.0
    }

    set P3 {
        iom_id       IOM1
        c            AUT
        mag          1.0
    }

    set P4 {
        iom_id       IOM2
        c            SFT
        mag          M+ 
    }

    set P5 {
        iom_id       IOM1
        a            JOE
        mag          1.0
    }

    set P6 {
        iom_id       IOM2
        a            BOB
        mag          M+ 
    }

    # Setup
    proc setup {} {
        ted create JOE BOB IOM1 IOM2 BLUE BRIT
    }

    proc setup_update_coop {} {
        variable P2
        setup
        ted order PAYLOAD:COOP:CREATE $P2
    }

    proc setup_update_hrel {} {
        variable P2
        setup
        ted order PAYLOAD:HREL:CREATE $P2
    }

    proc setup_update_sat {} {
        variable P4
        setup
        ted order PAYLOAD:SAT:CREATE $P4
    }

    proc setup_update_vrel {} {
        variable P6
        setup
        ted order PAYLOAD:VREL:CREATE $P6
    }

    # Clean up after a test
    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # PAYLOAD:DELETE
    #
    # Note: normally we'd test the CREATE orders before DELETE; but
    # there's a CREATE order for each flavor of payload.  We'll be
    # testing each flavor's orders together instead, and doing the
    # generic orders up front.

    test DELETE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:DELETE {}
    } -result {
        id {required value}
    }

    test DELETE-1.2 {invalid payload ID: no such IOM} -body {
        ted order -reject PAYLOAD:DELETE id {NONESUCH 1}
    } -result {
        id {Invalid IOM, none are defined}
    }

    test DELETE-1.3 {invalid payload ID: no such payload num} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:DELETE id {IOM1 NONESUCH}
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:DELETE id {IOM1 1}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> delete {IOM1 1}}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
        ted order PAYLOAD:DELETE id {IOM1 1}
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }


    #-------------------------------------------------------------------
    # PAYLOAD:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:STATE {}
    } -result {
        id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown payload id} -body {
        ted order -reject PAYLOAD:STATE id {NONESUCH 1} state disabled
    } -result {
        id {Invalid IOM, none are defined}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:STATE id {IOM1 1} state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
        ted order PAYLOAD:STATE id {IOM1 1} state disabled
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:COOP:CREATE

    test COOP:CREATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:COOP:CREATE {}
    } -result {
        iom_id {required value}
        g {required value}
        mag {required value}
    }

    test COOP:CREATE-1.2 {iom_id is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:COOP:CREATE {*}$P1 iom_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom_id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test COOP:CREATE-1.3 {g is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:COOP:CREATE {*}$P1 g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE, BRIT}
    }

    test COOP:CREATE-1.4 {mag is invalid} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:COOP:CREATE {*}$P1 mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test COOP:CREATE-2.1 {payload is created} -setup {
        setup
    } -body {
        ted order PAYLOAD:COOP:CREATE $P2

        ted querylist {SELECT * FROM fmt_payloads_COOP}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  COOP
narrative     Change cooperation with BRIT by 2.0 points (XS+).
state         normal
g             BRIT
mag           2.0
    }

    test COOP:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:COOP:CREATE $P1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }


    test COOP:CREATE-3.1 {undo effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> delete {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:COOP:UPDATE

    test COOP:UPDATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:COOP:UPDATE {}
    } -result {
        id {required value}
    }

    
    test COOP:UPDATE-1.2 {IOM in id is unknown} -setup {
        setup_update_coop
    } -body {
        ted order -reject PAYLOAD:COOP:UPDATE id {NONESUCH 1}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test COOP:UPDATE-1.3 {payload number in id is unknown} -setup {
        setup_update_coop
    } -body {
        ted order -reject PAYLOAD:COOP:UPDATE id {IOM1 NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }

    test COOP:UPDATE-1.4 {g is unknown} -setup {
        setup_update_coop
    } -body {
        ted order -reject PAYLOAD:COOP:UPDATE id {IOM2 1} g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid force group, should be one of: BLUE, BRIT}
    }

    test COOP:UPDATE-1.5 {mag is invalid} -setup {
        setup_update_coop
    } -body {
        ted order -reject PAYLOAD:COOP:UPDATE id {IOM2 1} mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test COOP:UPDATE-2.1 {payload is updated} -setup {
        setup_update_coop
    } -body {
        ted order PAYLOAD:COOP:UPDATE id {IOM2 1} g BLUE mag 10.0

        ted querylist {SELECT * FROM fmt_payloads_COOP}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  COOP
narrative     Change cooperation with BLUE by 10.0 points (XL+).
state         normal
g             BLUE
mag           10.0
    }

    test COOP:UPDATE-2.2 {Effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P2
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:COOP:UPDATE id {IOM2 1} g BLUE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
        {::tdb <payloads> update {IOM2 1}}
    }


    test COOP:UPDATE-3.1 {undo effects} -setup {
        setup_update_coop
        ted order PAYLOAD:COOP:UPDATE id {IOM2 1} g BLUE
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:HREL:CREATE

    test HREL:CREATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:HREL:CREATE {}
    } -result {
        iom_id {required value}
        g {required value}
        mag {required value}
    }

    test HREL:CREATE-1.2 {iom_id is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:HREL:CREATE {*}$P1 iom_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom_id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test HREL:CREATE-1.3 {g is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:HREL:CREATE {*}$P1 g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group, should be one of: BLUE, BRIT}
    }

    test HREL:CREATE-1.4 {mag is invalid} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:HREL:CREATE {*}$P1 mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test HREL:CREATE-2.1 {payload is created} -setup {
        setup
    } -body {
        ted order PAYLOAD:HREL:CREATE $P2

        ted querylist {SELECT * FROM fmt_payloads_HREL}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  HREL
narrative     Change horizontal relationships with BRIT by 2.0 points (XS+).
state         normal
g             BRIT
mag           2.0
    }

    test HREL:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:HREL:CREATE $P1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }


    test HREL:CREATE-3.1 {undo effects} -setup {
        setup
        ted order PAYLOAD:HREL:CREATE $P1
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> delete {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:HREL:UPDATE

    test HREL:UPDATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:HREL:UPDATE {}
    } -result {
        id {required value}
    }

    
    test HREL:UPDATE-1.2 {IOM in id is unknown} -setup {
        setup_update_hrel
    } -body {
        ted order -reject PAYLOAD:HREL:UPDATE id {NONESUCH 1}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test HREL:UPDATE-1.3 {payload number in id is unknown} -setup {
        setup_update_hrel
    } -body {
        ted order -reject PAYLOAD:HREL:UPDATE id {IOM1 NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }

    test HREL:UPDATE-1.4 {g is unknown} -setup {
        setup_update_hrel
    } -body {
        ted order -reject PAYLOAD:HREL:UPDATE id {IOM2 1} g NONESUCH
    } -cleanup {
        cleanup
    } -result {
        g {Invalid group, should be one of: BLUE, BRIT}
    }

    test HREL:UPDATE-1.5 {mag is invalid} -setup {
        setup_update_hrel
    } -body {
        ted order -reject PAYLOAD:HREL:UPDATE id {IOM2 1} mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test HREL:UPDATE-2.1 {payload is updated} -setup {
        setup_update_hrel
    } -body {
        ted order PAYLOAD:HREL:UPDATE id {IOM2 1} g BLUE mag 10.0

        ted querylist {SELECT * FROM fmt_payloads_HREL}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  HREL
narrative     Change horizontal relationships with BLUE by 10.0 points (XL+).
state         normal
g             BLUE
mag           10.0
    }

    test HREL:UPDATE-2.2 {Effects} -setup {
        setup
        ted order PAYLOAD:HREL:CREATE $P2
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:HREL:UPDATE id {IOM2 1} g BLUE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
        {::tdb <payloads> update {IOM2 1}}
    }


    test HREL:UPDATE-3.1 {undo effects} -setup {
        setup_update_hrel
        ted order PAYLOAD:HREL:UPDATE id {IOM2 1} g BLUE
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:SAT:CREATE

    test SAT:CREATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:SAT:CREATE {}
    } -result {
        iom_id {required value}
        c {required value}
        mag {required value}
    }

    test SAT:CREATE-1.2 {iom_id is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:SAT:CREATE {*}$P3 iom_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom_id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test SAT:CREATE-1.3 {c is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:SAT:CREATE {*}$P3 c NONESUCH
    } -cleanup {
        cleanup
    } -result {
        c {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL}
    }

    test SAT:CREATE-1.4 {mag is invalid} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:SAT:CREATE {*}$P3 mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test SAT:CREATE-2.1 {payload is created} -setup {
        setup
    } -body {
        ted order PAYLOAD:SAT:CREATE $P4

        ted querylist {SELECT * FROM fmt_payloads_SAT}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  SAT
narrative     Change satisfaction with SFT by 5.0 points (M+).
state         normal
c             SFT
mag           5.0
    }

    test SAT:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:SAT:CREATE $P3
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }


    test SAT:CREATE-3.1 {undo effects} -setup {
        setup
        ted order PAYLOAD:SAT:CREATE $P3
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> delete {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:SAT:UPDATE

    test SAT:UPDATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:SAT:UPDATE {}
    } -result {
        id {required value}
    }

    
    test SAT:UPDATE-1.2 {IOM in id is unknown} -setup {
        setup_update_sat
    } -body {
        ted order -reject PAYLOAD:SAT:UPDATE id {NONESUCH 1}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test SAT:UPDATE-1.3 {payload number in id is unknown} -setup {
        setup_update_sat
    } -body {
        ted order -reject PAYLOAD:SAT:UPDATE id {IOM1 NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }

    test SAT:UPDATE-1.4 {c is unknown} -setup {
        setup_update_sat
    } -body {
        ted order -reject PAYLOAD:SAT:UPDATE id {IOM2 1} c NONESUCH
    } -cleanup {
        cleanup
    } -result {
        c {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL}
    }

    test SAT:UPDATE-1.5 {mag is invalid} -setup {
        setup_update_sat
    } -body {
        ted order -reject PAYLOAD:SAT:UPDATE id {IOM2 1} mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test SAT:UPDATE-2.1 {payload is updated} -setup {
        setup_update_sat
    } -body {
        ted order PAYLOAD:SAT:UPDATE id {IOM2 1} c AUT mag 10.0

        ted querylist {SELECT * FROM fmt_payloads_SAT}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  SAT
narrative     Change satisfaction with AUT by 10.0 points (XL+).
state         normal
c             AUT
mag           10.0
    }

    test SAT:UPDATE-2.2 {Effects} -setup {
        setup
        ted order PAYLOAD:SAT:CREATE $P4
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:SAT:UPDATE id {IOM2 1} c AUT
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
        {::tdb <payloads> update {IOM2 1}}
    }


    test SAT:UPDATE-3.1 {undo effects} -setup {
        setup_update_sat
        ted order PAYLOAD:SAT:UPDATE id {IOM2 1} c AUT
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:VREL:CREATE

    test VREL:CREATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:VREL:CREATE {}
    } -result {
        iom_id {required value}
        a {required value}
        mag {required value}
    }

    test VREL:CREATE-1.2 {iom_id is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:VREL:CREATE {*}$P5 iom_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom_id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test VREL:CREATE-1.3 {a is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:VREL:CREATE {*}$P5 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test VREL:CREATE-1.4 {mag is invalid} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:VREL:CREATE {*}$P5 mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test VREL:CREATE-2.1 {payload is created} -setup {
        setup
    } -body {
        ted order PAYLOAD:VREL:CREATE $P6

        ted querylist {SELECT * FROM fmt_payloads_VREL}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  VREL
narrative     Change vertical relationships with BOB by 5.0 points (M+).
state         normal
a             BOB
mag           5.0
    }

    test VREL:CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:VREL:CREATE $P5
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM1 1}}
    }


    test VREL:CREATE-3.1 {undo effects} -setup {
        setup
        ted order PAYLOAD:VREL:CREATE $P5
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> delete {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:VREL:UPDATE

    test VREL:UPDATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:VREL:UPDATE {}
    } -result {
        id {required value}
    }

    
    test VREL:UPDATE-1.2 {IOM in id is unknown} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {NONESUCH 1}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test VREL:UPDATE-1.3 {payload number in id is unknown} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {IOM1 NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }

    test VREL:UPDATE-1.4 {a is unknown} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {IOM2 1} a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test VREL:UPDATE-1.5 {mag is invalid} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {IOM2 1} mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test VREL:UPDATE-2.1 {payload is updated} -setup {
        setup_update_vrel
    } -body {
        ted order PAYLOAD:VREL:UPDATE id {IOM2 1} a JOE mag 10.0

        ted querylist {SELECT * FROM fmt_payloads_VREL}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  VREL
narrative     Change vertical relationships with JOE by 10.0 points (XL+).
state         normal
a             JOE
mag           10.0
    }

    test VREL:UPDATE-2.2 {Effects} -setup {
        setup
        ted order PAYLOAD:VREL:CREATE $P6
    } -body {
        ted notifier bind ::tdb <payloads>
        ted order PAYLOAD:VREL:UPDATE id {IOM2 1} a JOE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
        {::tdb <payloads> update {IOM2 1}}
    }


    test VREL:UPDATE-3.1 {undo effects} -setup {
        setup_update_vrel
        ted order PAYLOAD:VREL:UPDATE id {IOM2 1} a JOE
    } -body {
        ted notifier bind ::tdb <payloads>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <payloads> update {IOM2 1}}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






