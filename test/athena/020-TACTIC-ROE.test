# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-ROE.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    TACTIC:ROE:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable B1
        variable T1

        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD USAID

        set B1 [ted addblock SYSTEM]
        set T1 [ted addtactic $B1 ROE]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:ROE

    test TACTIC:ROE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:ROE-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid ROE ID: "NONESUCH"}
    }

    test TACTIC:ROE-1.3 {invalid CIV concern} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE tactic_id [$T1 id] civc "NONESUCH" 
    } -cleanup {
        cleanup
    } -result {
        civc {invalid value "NONESUCH", should be one of: NONE, LOW, MEDIUM, HIGH}
    }

    test TACTIC:ROE-1.4 {athresh out of range} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE tactic_id [$T1 id] \
            athresh -1
    } -cleanup {
        cleanup
    } -result {
        athresh {invalid value "-1", should be a real number no less than 0.0}
    }    

    test TACTIC:ROE-1.5 {dthresh out of range} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE tactic_id [$T1 id] \
            dthresh -1
    } -cleanup {
        cleanup
    } -result {
        dthresh {invalid value "-1", should be a real number no less than 0.0}
    }    

    test TACTIC:ROE-1.6 {dthresh > athresh} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE tactic_id [$T1 id] \
            dthresh 2 athresh 1
    } -cleanup {
        cleanup
    } -result {
        athresh {Attack threshold must be >= defend threshold.}
    }

    test TACTIC:ROE-1.7 {invalid name} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ROE tactic_id [$T1 id] name 1234
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:ROE-1.8 {duplicate name} -setup {
        setup
        set T2 [ted addtactic $B1 ABSIT]
    } -body {
        ted order -reject TACTIC:ROE tactic_id [$T1 id] \
            name [$T2 get name]
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Name already exists: "T2"}
    }

    test TACTIC:ROE-2.1 {tactic valid} -setup {
        setup
    } -body {
        ted order TACTIC:ROE \
            tactic_id [$T1 id]  \
            f          BLUE     \
            nlist     [tdb gofer make NBHOODS BY_VALUE {NB1}] \
            g          ALQ

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        athresh    2.0
        civc       HIGH
        dthresh    0.15
        execstatus NONE
        f          BLUE
        faildict   {}
        g          ALQ
        id         *
        name       T*
        nlist      {_type NBHOODS _rule BY_VALUE nlist NB1}
        parent     *
        pot        *::pot
        roe        ATTACK
        state      invalid
    }

    test TACTIC:ROE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:ROE \
            tactic_id [$T1 id]  \
            f          BLUE     \
            nlist     [tdb gofer make NBHOODS BY_VALUE {NB1}] \
            g          ALQ

        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:ROE-2.3 {undo notifier event} -setup {
        setup

        ted order TACTIC:ROE \
            tactic_id [$T1 id]  \
            f          BLUE     \
            nlist     [tdb gofer make NBHOODS BY_VALUE {NB1}] \
            g          ALQ

    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test TACTIC:ROE-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

