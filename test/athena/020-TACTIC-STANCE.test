# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-STANCE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    athena(n) TACTIC:STANCE order tests.
#
#    This test suite tests the STANCE tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        variable B1
        variable T1

        ted create JOE BOB BLUE BRIT SUNN SHIA KURD USAID ALQ
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 STANCE]
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:STANCE

    test TACTIC:STANCE-1.1 {required parms} -body {
        ted order -reject TACTIC:STANCE {}
    } -result {
        tactic_id {required value}
    }

    test TACTIC:STANCE-1.2 {owner is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid STANCE ID: "NONESUCH"}
    }

    test TACTIC:STANCE-1.3 {mode is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE tactic_id [$T1 id] \
            mode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "NONESUCH", should be one of: BY_GROUP, BY_NBHOOD}
    }

    test TACTIC:STANCE-1.4 {drel is invalid} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE tactic_id [$T1 id] \
            drel 1.1
    } -cleanup {
        cleanup
    } -result {
        drel {invalid value "1.1", should be a real number in range -1.0, 1.0, or one of: SUPPORT, LIKE, INDIFF, DISLIKE, OPPOSE}
    }

    test TACTIC:STANCE-1.5 {invalid name} -setup {
        setup
    } -body {
        ted order -reject TACTIC:STANCE tactic_id [$T1 id] name 1234
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:STANCE-1.6 {duplicate name} -setup {
        setup
        set T2 [ted addtactic $B1 ABSIT]
    } -body {
        ted order -reject TACTIC:STANCE tactic_id [$T1 id] \
            name [$T2 get name]
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Name already exists: "T2"}
    }

    test TACTIC:STANCE-2.1 {tactic is created: GROUP} -setup {
        setup
    } -body {
        ted order TACTIC:STANCE tactic_id [$T1 id] \
            f BLUE \
            glist [tdb gofer make GROUPS BY_VALUE {BRIT USAID}] 

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        drel       0.0
        execstatus NONE
        f          BLUE
        faildict   {}
        glist      {_type GROUPS _rule BY_VALUE raw_value {BRIT USAID}}
        id         *
        mode       BY_GROUP
        name       T*
        nlist      {_type NBHOODS _rule {}}
        parent     *
        pot        *::pot
        state      normal
    }

    test TACTIC:STANCE-2.2 {tactic is created: NBHOOD} -setup {
        setup
    } -body {
        ted order TACTIC:STANCE tactic_id [$T1 id] \
            f BLUE \
            mode BY_NBHOOD \
            nlist [tdb gofer make NBHOODS BY_VALUE {NB1 NB2}] 

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        drel       0.0
        execstatus NONE
        f          BLUE
        faildict   {}
        glist      {_type GROUPS _rule {}}
        id         *
        mode       BY_NBHOOD
        name       T*
        nlist      {_type NBHOODS _rule BY_VALUE nlist {NB1 NB2}}
        parent     *
        pot        *::pot
        state      normal
    }

    test TACTIC:STANCE-2.3 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:STANCE tactic_id [$T1 id] \
            f BLUE \
            glist [tdb gofer make GROUPS BY_VALUE {BRIT USAID}] 
        ted notifier received

    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:STANCE-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:STANCE tactic_id [$T1 id] \
            f BLUE \
            glist [tdb gofer make GROUPS BY_VALUE {BRIT USAID}] 
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:STANCE-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





