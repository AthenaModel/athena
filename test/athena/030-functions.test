# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    030-functions.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    executive(sim) tests: functions
#
#    This test suite tests the executive(sim) executive functions.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test
    proc cleanup {} {
        tdb executive reset
        ted cleanup
    }

    proc econstate {state} {
        tdb econ setstate $state
    }

    #-------------------------------------------------------------------
    # affinity()

    test affinity-1.1 {invalid group/actor} -setup {
        ted create BLUE SUNN JOE
    } -body {
        ted sendex -error expr affinity("NONESUCH","BLUE")
    } -cleanup {
        cleanup
    } -result {Invalid Group/Actor "NONESUCH", should be one of: BLUE, JOE, SUNN}

    test affinity-1.2 {invalid group/actor} -setup {
        ted create BLUE SUNN JOE
    } -body {
        ted sendex -error expr affinity("SUNN","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid Group/Actor "NONESUCH", should be one of: BLUE, JOE, SUNN}

    test affinity-2.1 {in prep} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex expr affinity("SUNN","BLUE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test affinity-2.2 {get data} -setup {
        ted create NB1 BLUE SUNN
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr affinity("sunn","blue")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # aplants()

    test aplants-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr aplants("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid agent, should be one of: JOE, SYSTEM}

    test aplants-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr aplants("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test aplants-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr aplants("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # assigned()

    test assigned-1.1 {invalid nbhood} -setup {
        ted create NB1 BLUE
    } -body {
        ted sendex -error expr assigned("BLUE","PATROL","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test assigned-1.2 {invalid group} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr assigned("NONESUCH","PATROL","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid force/org group "NONESUCH", should be one of: BLUE}

    test assigned-1.3 {invalid activity} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr assigned("BLUE","NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Group BLUE cannot be assigned activity NONESUCH}

    test assigned-2.1 {in prep} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex expr assigned("BLUE","PATROL","NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test assigned-2.2 {get data} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr assigned("BLUE","PATROL","NB1")
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # consumers()

    test consumers-1.1 {1 civgroup, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr consumers("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test consumers-1.2 {2 civgroups, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr consumers("SHIA","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test consumers-2.1 {Unlocked, 1 civgroup} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr consumers("SHIA")
    } -cleanup {
        cleanup
    } -result {0}

    test consumers-2.2 {Unlocked, 2 civgroups} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr consumers("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {0}

    test consumers-2.3 {LOCKED - 1 civgroup} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr consumers("SHIA")
    } -cleanup {
        cleanup
    } -result {1000}

    test consumers-2.4 {LOCKED - 2 civgroups} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr consumers("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # coop()

    test coop-1.1 {invalid civ group} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex -error expr coop("NONESUCH","BLUE")
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SUNN}

    test coop-1.2 {invalid force group} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex -error expr coop("SUNN","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid force group, should be one of: BLUE}

    test coop-2.1 {in prep} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex expr coop("SUNN","BLUE")
    } -cleanup {
        cleanup
    } -result {50.0}

    test coop-2.2 {get data} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr coop("sunn","blue")
    } -cleanup {
        cleanup
    } -result {50.0}

    #-------------------------------------------------------------------
    # controls()

    test controls-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr controls("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test controls-1.2 {invalid neighborhood} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr controls("JOE","NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test controls-2.1 {false when no data} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr controls("JOE","NB1")
    } -cleanup {
        cleanup
    } -result {0}


    test controls-2.2 {true when actor controls n} -setup {
        ted create NB1 JOE
        adb eval {
            INSERT INTO control_n(n,controller)
            VALUES('NB1','JOE')
        }
    } -body {
        ted sendex expr controls("joe","nb1")
    } -cleanup {
        cleanup
    } -result {1}

    test controls-2.3 {false when actor does not control n} -setup {
        ted create NB1 JOE BOB
        adb eval {
            INSERT INTO control_n(n,controller)
            VALUES('NB1','BOB')
        }
    } -body {
        ted sendex expr controls("joe","nb1")
    } -cleanup {
        cleanup
    } -result {0}

    test controls-2.4 {true, multiple neighborhoods} -setup {
        ted create NB1 NB2 JOE
        adb eval {
            INSERT INTO control_n(n,controller)
            VALUES('NB1','JOE');
            INSERT INTO control_n(n,controller)
            VALUES('NB2','JOE');
        }
    } -body {
        ted sendex expr controls("joe","nb1","nb2")
    } -cleanup {
        cleanup
    } -result {1}

    test controls-2.5 {false, multiple neighborhoods} -setup {
        ted create NB1 NB2 JOE BOB
        adb eval {
            INSERT INTO control_n(n,controller)
            VALUES('NB1','JOE');
            INSERT INTO control_n(n,controller)
            VALUES('NB2','BOB');
        }
    } -body {
        ted sendex expr controls("joe","nb1","nb2")
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # coverage()

    test coverage-1.1 {invalid nbhood} -setup {
        ted create NB1 BLUE
    } -body {
        ted sendex -error expr coverage("BLUE","PATROL","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test coverage-1.2 {invalid group} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr coverage("NONESUCH","PATROL","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid force/org group "NONESUCH", should be one of: BLUE}

    test coverage-1.3 {invalid activity} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr coverage("BLUE","NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid activity, should be one of: CHKPOINT, *}

    test coverage-2.1 {in prep} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex expr coverage("BLUE","PATROL","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test coverage-2.2 {get data} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr coverage("BLUE","PATROL","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # deployed()

    test deployed-1.1 {1 nbhood, invalid G} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr deployed("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test deployed-1.2 {1 nbhood, invalid N} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr deployed("BLUE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test deployed-1.3 {2 nbhoods, invalid G} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr deployed("NONESUCH","NB1","NB2")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test deployed-1.4 {2 nbhoods, invalid N} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr deployed("BLUE","NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test deployed-2.1 {Unlocked, 1 nbhood} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr deployed("BLUE","NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test deployed-2.2 {Unlocked, 2 nbhoods} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr deployed("BLUE","NB1","NB2")
    } -cleanup {
        cleanup
    } -result {0}

    test deployed-2.3 {LOCKED - 1 nbhood} -setup {
        ted create BLUE JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr deployed("BLUE","NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test deployed-2.4 {LOCKED - 2 nbhoods} -setup {
        ted create BLUE JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr deployed("BLUE","NB1","NB2")
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # gdp()

    test gdp-1.1 {In Prep - Econ disabled} -setup {
        econstate DISABLED
    } -body {
        ted sendex expr gdp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test gdp-2.1 {In Prep - Econ enabled} -setup {
        econstate ENABLED
    } -body {
        ted sendex expr gdp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test gdp-3.1 {Get Data - Econ disabled} -setup {
        ted create NB1 BLUE SUNN
        econstate DISABLED
        ted lock
    } -body {
        ted sendex expr gdp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test gdp-4.1 {Get Data - Econ enabled} -setup {
        ted create NB1 BLUE SUNN
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr gdp()
    } -cleanup {
        cleanup
    } -result {20361333852.52}

    #-------------------------------------------------------------------
    # goodscap()

    test goodscap-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr goodscap("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid agent, should be one of: JOE, SYSTEM}

    test goodscap-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr goodscap("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test goodscap-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        ted lock
    } -body {
        ted sendex expr goodscap("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # goodsidle()

    test goodsidle-1.1 {valid} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr goodsidle()
    } -cleanup {
        cleanup
    } -result {0.0}

    test goodsidle-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr goodsidle()
    } -cleanup {
        cleanup
    } -result {0.0}

    test goodsidle-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        ted lock
    } -body {
        ted sendex expr goodsidle()
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # hrel()

    test hrel-1.1 {invalid group} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex -error expr hrel("NONESUCH","BLUE")
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE, SUNN}

    test hrel-1.2 {invalid group} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex -error expr hrel("SUNN","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE, SUNN}

    test hrel-2.1 {in prep} -setup {
        ted create BLUE SUNN
    } -body {
        ted sendex expr hrel("SUNN","BLUE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test hrel-2.2 {get data} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr hrel("sunn","blue")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # income()

    test income-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income-2.1 {Unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income-2.2 {Unlocked, 2 actors} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income-2.3 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr income("JOE")
    } -cleanup {
        cleanup
    } -result {960.09}

    test income-2.4 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr income("BOB")
    } -cleanup {
        cleanup
    } -result {480.05}

    test income-2.5 {LOCKED - 2 actors} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr income("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {1440.14}

    #-------------------------------------------------------------------
    # income_black()

    test income_black-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_black("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_black-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_black("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_black-2.1 {Unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_black("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_black-2.2 {Unlocked, 2 actors} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_black("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_black-2.3 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_black("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_black-2.4 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_black("BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_black-2.5 {LOCKED - 2 actors} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_black("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # income_goods()

    test income_goods-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_goods("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_goods-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_goods("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_goods-2.1 {Unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_goods("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_goods-2.2 {Unlocked, 2 actors} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_goods("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_goods-2.3 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr income_goods("JOE")
    } -cleanup {
        cleanup
    } -result {960.09}

    test income_goods-2.4 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr income_goods("BOB")
    } -cleanup {
        cleanup
    } -result {480.05}

    test income_goods-2.5 {LOCKED - 2 actors} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr income_goods("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {1440.14}

    #-------------------------------------------------------------------
    # income_pop()

    test income_pop-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_pop("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_pop-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_pop("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_pop-2.1 {Unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_pop("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_pop-2.2 {Unlocked, 2 actors} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_pop("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_pop-2.3 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_pop("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_pop-2.4 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_pop("BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_pop-2.5 {LOCKED - 2 actors} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_pop("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # income_region()

    test income_region-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_region("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_region-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_region("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_region-2.1 {Unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_region("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_region-2.2 {Unlocked, 2 actors} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_region("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_region-2.3 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_region("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_region-2.4 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_region("BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_region-2.5 {LOCKED - 2 actors} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_region("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # income_world()

    test income_world-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_world("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_world-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr income_world("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test income_world-2.1 {Unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_world("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_world-2.2 {Unlocked, 2 actors} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr income_world("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_world-2.3 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_world("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_world-2.4 {LOCKED - 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_world("BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    test income_world-2.5 {LOCKED - 2 actors} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        ted sendex expr income_world("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # influence()

    test influence-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr influence("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test influence-1.2 {invalid nbhood} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr influence("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test influence-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr influence("JOE","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test influence-2.2 {on lock} -setup {
        ted create NB1 JOE SUNN BLUE
        ted lock
    } -body {
        ted sendex expr influence("joe","nb1")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # local_consumers()

    test local_consumers-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr local_consumers()
    } -cleanup {
        cleanup
    } -result {0}

    test local_consumers-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr local_consumers()
    } -cleanup {
        cleanup
    } -result {0}

    test local_consumers-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr local_consumers()
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # local_pop()

    test local_pop-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr local_pop()
    } -cleanup {
        cleanup
    } -result {0}

    test local_pop-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr local_pop()
    } -cleanup {
        cleanup
    } -result {0}

    test local_pop-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr local_pop()
    } -cleanup {
        cleanup
    } -result {3000}

    #-------------------------------------------------------------------
    # local_unemp()

    test local_unemp-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr local_unemp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test local_unemp-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr local_unemp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test local_unemp-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr local_unemp()
    } -cleanup {
        cleanup
    } -result {4.0}

    #-------------------------------------------------------------------
    # local_workers()

    test local_workers-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr local_workers()
    } -cleanup {
        cleanup
    } -result {0}

    test local_workers-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr local_workers()
    } -cleanup {
        cleanup
    } -result {0}

    test local_workers-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr local_workers()
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # mobilizaed()

    test mobilized-1.1 {1 frc/org group, invalid G} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr mobilized("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test mobilized-1.2 {2 frc/org groups, invalid G} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr mobilized("BLUE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test mobilized-2.1 {Unlocked, 1 frc/org group} -setup {
        ted create BLUE JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr mobilized("BLUE")
    } -cleanup {
        cleanup
    } -result {0}

    test mobilized-2.2 {Unlocked, 2 frc/org groups} -setup {
        ted create BLUE BRIT JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr mobilized("BLUE","BRIT")
    } -cleanup {
        cleanup
    } -result {0}

    test mobilized-2.3 {LOCKED - 1 frc/org group} -setup {
        ted create BLUE JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr mobilized("BLUE")
    } -cleanup {
        cleanup
    } -result {0}

    test mobilized-2.4 {LOCKED - 2 frc/org groups} -setup {
        ted create BLUE BRIT JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr mobilized("BLUE","BRIT")
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # mood()

    test mood-1.1 {invalid civ group} -setup {
        ted create SUNN
    } -body {
        ted sendex -error expr mood("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SUNN}

    test mood-2.1 {in prep} -setup {
        ted create SUNN
    } -body {
        ted sendex expr mood("SUNN")
    } -cleanup {
        cleanup
    } -result {0.0}

    test mood-2.2 {on lock} -setup {
        econstate DISABLED
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr mood("sunn")
    } -cleanup {
        cleanup
    } -result {-1.6}

    #-------------------------------------------------------------------
    # nbconsumers()

    test nbconsumers-1.1 {1 nbhood, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbconsumers("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbconsumers-1.2 {2 nbhoods, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbconsumers("NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbconsumers-2.1 {Unlocked, 1 nbhood} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbconsumers("NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test nbconsumers-2.2 {Unlocked, 2 nbhoods} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbconsumers("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {0}

    test nbconsumers-2.3 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbconsumers("NB1")
    } -cleanup {
        cleanup
    } -result {2000}

    test nbconsumers-2.4 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbconsumers("NB2")
    } -cleanup {
        cleanup
    } -result {0}

    test nbconsumers-2.5 {LOCKED - 2 nbhoods} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbconsumers("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # nbcoop()

    test nbcoop-1.1 {invalid neighborhood} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr nbcoop("NONESUCH","BLUE")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test nbcoop-1.2 {invalid force group} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr nbcoop("NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid force group, should be one of: BLUE}

    test nbcoop-2.1 {in prep} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex expr nbcoop("NB1","BLUE")
    } -cleanup {
        cleanup
    } -result {50.0}

    test nbcoop-2.2 {on lock} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr nbcoop("nb1","blue")
    } -cleanup {
        cleanup
    } -result {50.0}

    #-------------------------------------------------------------------
    # nbgoodscap()

    test nbgoodscap-1.1 {invalid actor} -setup {
        ted create NB1
    } -body {
        ted sendex -error expr nbgoodscap("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test nbgoodscap-2.1 {in prep} -setup {
        ted create NB1
    } -body {
        ted sendex expr nbgoodscap("NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbgoodscap-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr nbgoodscap("nb1")
    } -cleanup {
        cleanup
    } -result {22301252822.96461}

    #-------------------------------------------------------------------
    # nbmood()

    test nbmood-1.1 {invalid nbhood} -setup {
        ted create NB1
    } -body {
        ted sendex -error expr nbmood("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test nbmood-2.1 {in prep} -setup {
        ted create NB1
    } -body {
        ted sendex expr nbmood("NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbmood-2.2 {get data} -setup {
        econstate DISABLED
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr nbmood("nb1")
    } -cleanup {
        cleanup
    } -result {-1.6}

    #-------------------------------------------------------------------
    # nbplants()

    test nbplants-1.1 {invalid nbhood} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr nbplants("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test nbplants-2.1 {in prep} -setup {
        ted create NB1 
    } -body {
        ted sendex expr nbplants("NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbplants-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr nbplants("nb1")
    } -cleanup {
        cleanup
    } -result {23.0}

    #-------------------------------------------------------------------
    # nbpop()

    test nbpop-1.1 {1 nbhood, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbpop("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbpop-1.2 {2 nbhoods, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbpop("NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbpop-2.1 {Unlocked, 1 nbhood} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbpop("NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test nbpop-2.2 {Unlocked, 2 nbhoods} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbpop("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {0}

    test nbpop-2.3 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbpop("NB1")
    } -cleanup {
        cleanup
    } -result {2000}

    test nbpop-2.4 {LOCKED - 2 nbhoods} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbpop("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {3000}

    #-------------------------------------------------------------------
    # nbsupport()

    test nbsupport-1.1 {invalid neighborhood} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr nbsupport("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test nbsupport-1.2 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr nbsupport("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test nbsupport-1.3 {no data} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr nbsupport("JOE","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbsupport-2.1 {get data} -setup {
        ted create NB1 JOE BLUE SUNN
        ted lock
    } -body {
        ted sendex expr nbsupport("joe","nb1")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # nbunemp()

    test nbunemp-1.1 {1 nbhood, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbunemp("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbunemp-1.2 {2 nbhoods, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbunemp("NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbunemp-2.1 {Unlocked, 1 nbhood} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbunemp("NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbunemp-2.2 {Unlocked, 2 nbhoods} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbunemp("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbunemp-2.3 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr nbunemp("NB1")
    } -cleanup {
        cleanup
    } -result {4.0}

    test nbunemp-2.4 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr nbunemp("NB2")
    } -cleanup {
        cleanup
    } -result {0.0}

    test nbunemp-2.5 {LOCKED - 2 nbhoods} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr nbunemp("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {4.0}

    #-------------------------------------------------------------------
    # nbworkers()

    test nbworkers-1.1 {1 nbhood, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbworkers("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbworkers-1.2 {2 nbhoods, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr nbworkers("NB1","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test nbworkers-2.1 {Unlocked, 1 nbhood} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbworkers("NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test nbworkers-2.2 {Unlocked, 2 nbhoods} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr nbworkers("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {0}

    test nbworkers-2.3 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbworkers("NB1")
    } -cleanup {
        cleanup
    } -result {1200}

    test nbworkers-2.4 {LOCKED - 1 nbhood} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbworkers("NB2")
    } -cleanup {
        cleanup
    } -result {0}

    test nbworkers-2.5 {LOCKED - 2 nbhoods} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr nbworkers("NB1","NB2")
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # now()

    test now-1.1 {get data} -body {
        ted sendex expr now()
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # onhand()

    test onhand-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr onhand("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test onhand-1.2 {In Prep - Econ disabled} -setup {
        ted create NB1 JOE
        econstate DISABLED
    } -body {
        ted sendex expr onhand("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test onhand-1.3 {In Prep - Econ enabled} -setup {
        ted create NB1 JOE
        econstate ENABLED
    } -body {
        ted sendex expr onhand("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test onhand-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr onhand("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test onhand-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        ted lock
    } -body {
        ted sendex expr onhand("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test onhand-3.1 {Get Data - Econ disabled} -setup {
        ted create NB1 BLUE SUNN JOE
        econstate DISABLED
        ted lock
    } -body {
        ted sendex expr onhand("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test onhand-4.1 {Get Data - Econ enabled} -setup {
        ted create NB1 BLUE SUNN JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr onhand("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # parm()

    test parm-1.1 {no such parameter} -body {
        ted sendex -error expr parm("NONESUCH")
    } -cleanup {
        cleanup
    } -result {unknown parameter: "NONESUCH"}

    test parm-2.1 {get parm} -body {
        ted sendex expr parm("econ.ticksPerTock")
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # pbconsumers()

    test pbconsumers-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr pbconsumers()
    } -cleanup {
        cleanup
    } -result {0}

    test pbconsumers-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr pbconsumers()
    } -cleanup {
        cleanup
    } -result {0}

    test pbconsumers-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr pbconsumers()
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # pbgoodscap()

    test pbgoodscap-1.1 {valid} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr pbgoodscap()
    } -cleanup {
        cleanup
    } -result {0.0}

    test pbgoodscap-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr pbgoodscap()
    } -cleanup {
        cleanup
    } -result {0.0}

    test pbgoodscap-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr pbgoodscap()
    } -cleanup {
        cleanup
    } -result {22301252822.96461}

    #-------------------------------------------------------------------
    # pbplants()

    test pbplants-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr pbplants()
    } -cleanup {
        cleanup
    } -result {0.0}

    test pbplants-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr pbplants()
    } -cleanup {
        cleanup
    } -result {0.0}

    test pbplants-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr pbplants()
    } -cleanup {
        cleanup
    } -result {23.0}

    #-------------------------------------------------------------------
    # pbpop()

    test pbpop-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr pbpop()
    } -cleanup {
        cleanup
    } -result {0}

    test pbpop-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr pbpop()
    } -cleanup {
        cleanup
    } -result {0}

    test pbpop-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr pbpop()
    } -cleanup {
        cleanup
    } -result {3000}

    #-------------------------------------------------------------------
    # pbunemp()

    test pbunemp-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr pbunemp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test pbunemp-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr pbunemp()
    } -cleanup {
        cleanup
    } -result {0.0}

    test pbunemp-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr pbunemp()
    } -cleanup {
        cleanup
    } -result {4.0}

    #-------------------------------------------------------------------
    # pbworkers()

    test pbworkers-1.1 {valid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex expr pbworkers()
    } -cleanup {
        cleanup
    } -result {0}

    test pbworkers-2.1 {Unlocked} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr pbworkers()
    } -cleanup {
        cleanup
    } -result {0}

    test pbworkers-2.2 {LOCKED} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr pbworkers()
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # pctcontrol()

    test pctcontrol-1.1 {1 actor, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr pctcontrol("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test pctcontrol-1.2 {2 actors, invalid} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        ted sendex -error expr pctcontrol("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test pctcontrol-2.1 {Zero control when no neighborhoods} -setup {
        ted create JOE BOB
    } -body {
        ted sendex expr pctcontrol("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test pctcontrol-2.2 {Zero control when unlocked, 1 actor} -setup {
        ted create JOE BOB NB1 NB2 
    } -body {
        ted sendex expr pctcontrol("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test pctcontrol-2.3 {Control by 1 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
        adb eval {
            UPDATE control_n SET controller='JOE' WHERE n='NB1'
        }
    } -body {
        ted sendex expr pctcontrol("JOE")
    } -cleanup {
        cleanup
    } -result {50.0}

    test pctcontrol-2.4 {Control by 2 actor} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
        adb eval {
            UPDATE control_n SET controller='JOE' WHERE n='NB1'
        }
    } -body {
        ted sendex expr pctcontrol("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {50.0}

    test pctcontrol-2.5 {Control by 2 actor, all neighborhoods} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
        adb eval {
            UPDATE control_n SET controller='JOE' WHERE n='NB1';
            UPDATE control_n SET controller='BOB' WHERE n='NB2';
        }
    } -body {
        ted sendex expr pctcontrol("JOE","BOB")
    } -cleanup {
        cleanup
    } -result {100.0}

    #-------------------------------------------------------------------
    # plants()

    test plants-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr plants("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid agent, should be one of: JOE, SYSTEM}

    test plants-1.2 {invalid nbhood} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr plants("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test plants-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr plants("JOE","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test plants-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        ted lock
    } -body {
        ted sendex expr plants("joe","nb1")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # pop()

    test pop-1.1 {1 civgroup, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr pop("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test pop-1.2 {2 civgroups, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr pop("SHIA","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test pop-2.1 {Unlocked, 1 civgroup} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr pop("SHIA")
    } -cleanup {
        cleanup
    } -result {0}

    test pop-2.2 {Unlocked, 2 civgroups} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr pop("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {0}

    test pop-2.3 {LOCKED - 1 civgroup} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr pop("SHIA")
    } -cleanup {
        cleanup
    } -result {1000}

    test pop-2.4 {LOCKED - 2 civgroups} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr pop("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # repair()

    test repair-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr repair("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test repair-1.2 {invalid nbhood} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr repair("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test repair-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr repair("JOE","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test repair-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        ted lock
    } -body {
        ted sendex expr repair("joe","nb1")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # reserve()

    test reserve-1.1 {invalid actor} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex -error expr reserve("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test reserve-1.2 {In Prep - Econ disabled} -setup {
        ted create NB1 JOE
        econstate DISABLED
    } -body {
        ted sendex expr reserve("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test reserve-1.3 {In Prep - Econ enabled} -setup {
        ted create NB1 JOE
        econstate ENABLED
    } -body {
        ted sendex expr reserve("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test reserve-2.1 {in prep} -setup {
        ted create NB1 JOE
    } -body {
        ted sendex expr reserve("JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test reserve-2.2 {get data} -setup {
        ted create NB1 BLUE SHIA JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr reserve("joe")
    } -cleanup {
        cleanup
    } -result {200000.0}

    test reserve-3.1 {Get Data - Econ disabled} -setup {
        ted create NB1 BLUE SUNN JOE
        econstate DISABLED
        ted lock
    } -body {
        ted sendex expr reserve("joe")
    } -cleanup {
        cleanup
    } -result {0.0}

    test reserve-4.1 {Get Data - Econ enabled} -setup {
        ted create NB1 BLUE SUNN JOE
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr reserve("joe")
    } -cleanup {
        cleanup
    } -result {200000.0}

    #-------------------------------------------------------------------
    # sat()

    test sat-1.1 {invalid civ group} -setup {
        ted create SUNN
    } -body {
        ted sendex -error expr sat("NONESUCH","AUT")
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SUNN}

    test sat-1.2 {invalid concern} -setup {
        ted create SUNN
    } -body {
        ted sendex -error expr sat("SUNN","NONESUCH")
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL}

    test sat-2.1 {in prep} -setup {
        ted create SUNN
    } -body {
        ted sendex expr sat("SUNN","AUT")
    } -cleanup {
        cleanup
    } -result {0.0}

    test sat-2.2 {get data} -setup {
        econstate DISABLED
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr sat("sunn","aut")
    } -cleanup {
        cleanup
    } -result {-3.1}

    #-------------------------------------------------------------------
    # security()

    test security-1.1 {invalid neighborhood} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr security("BLUE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test security-1.2 {invalid group} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr security("NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE, SUNN}

    test security-1.3 {invalid civgroup} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr security("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SUNN}

    test security-1.4 {no data security} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex expr security("BLUE","NB1")
    } -cleanup {
        cleanup
    } -result {0}

    test security-1.5 {no data security_civ} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex expr security("SUNN")
    } -cleanup {
        cleanup
    } -result {0}

    test security-2.1 {get data security} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr security("sunn","nb1")
    } -cleanup {
        cleanup
    } -result {82}

    test security-2.2 {get data security_civ} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr security("sunn")
    } -cleanup {
        cleanup
    } -result {82}

    #-------------------------------------------------------------------
    # support()

    test support-1.1 {invalid actor SUPPORT} -setup {
        ted create NB1 BLUE JOE
    } -body {
        ted sendex -error expr support("NONESUCH","BLUE","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test support-1.2 {invalid group SUPPORT} -setup {
        ted create NB1 BLUE JOE
    } -body {
        ted sendex -error expr support("JOE","NONESUCH","NB1")
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE}

    test support-1.3 {invalid neighborhood SUPPORT} -setup {
        ted create NB1 BLUE JOE
    } -body {
        ted sendex -error expr support("JOE","BLUE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test support-1.4 {invalid actor SUPPORT_CIV} -setup {
        ted create NB1 SUNN JOE
    } -body {
        ted sendex -error expr support("NONESUCH","SUNN")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test support-1.5 {invalid civgroup SUPPORT_CIV} -setup {
        ted create NB1 SUNN JOE
    } -body {
        ted sendex -error expr support("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SUNN}

    test support-1.6 {no data support} -setup {
        ted create NB1 BLUE JOE
    } -body {
        ted sendex expr support("JOE","BLUE","NB1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test support-1.7 {no data civsupport} -setup {
        ted create SUNN JOE
    } -body {
        ted sendex expr support("JOE","SUNN")
    } -cleanup {
        cleanup
    } -result {0.0}

    test support-2.1 {get data support} -setup {
        ted create NB1 JOE BLUE SUNN
        ted lock
    } -body {
        ted sendex expr support("joe","blue","nb1")
    } -cleanup {
        cleanup
    } -result {0.0}

    test support-2.2 {get data support_civ} -setup {
        ted create NB1 JOE BLUE SUNN
        ted lock
    } -body {
        ted sendex expr support("joe","sunn")
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # supports()

    test supports-1.1 {invalid a} -setup {
        ted create JOE
    } -body {
        ted sendex -error expr supports("NONESUCH","JOE")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test supports-1.2 {invalid b} -setup {
        ted create JOE
    } -body {
        ted sendex -error expr supports("JOE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid actor "NONESUCH", should be one of: SELF, NONE, JOE}

    test supports-1.3 {invalid n} -setup {
        ted create JOE BOB NB1
    } -body {
        ted sendex -error expr supports("JOE","BOB","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test supports-2.1 {No neighborhood} -setup {
        ted create JOE BOB
    } -body {
        # Results are based on actors.supports.
        list \
            [ted sendex expr supports("JOE","SELF")] \
            [ted sendex expr supports("JOE","NONE")] \
            [ted sendex expr supports("JOE","BOB")]
    } -cleanup {
        cleanup
    } -result {1 0 0}

    test supports-2.2 {Neighborhood, not locked} -setup {
        ted create JOE BOB NB1 NB2
    } -body {
        # Results are based on supports_na, not yet populated.
        list \
            [ted sendex expr supports("JOE","SELF","NB1")] \
            [ted sendex expr supports("JOE","NONE","NB1")] \
            [ted sendex expr supports("JOE","BOB","NB1")]
    } -cleanup {
        cleanup
    } -result {0 0 0}

    test supports-2.3 {One neighborhood, locked} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        # Results are based on supports_na,
        list \
            [ted sendex expr supports("JOE","SELF","NB1")] \
            [ted sendex expr supports("JOE","NONE","NB1")] \
            [ted sendex expr supports("JOE","BOB","NB1")]
    } -cleanup {
        cleanup
    } -result {1 0 0}

    test supports-2.4 {Two neighborhood, locked} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA KURD
        ted lock
    } -body {
        # Results are based on supports_na
        list \
            [ted sendex expr supports("JOE","SELF","NB1","NB2")] \
            [ted sendex expr supports("JOE","NONE","NB1","NB2")] \
            [ted sendex expr supports("JOE","BOB","NB1","NB2")]
    } -cleanup {
        cleanup
    } -result {1 0 0}

    #-------------------------------------------------------------------
    # troops()

    test troops-1.1 {invalid FRC/ORG} -setup {
        ted create BLUE
    } -body {
        ted sendex -error expr troops("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid force/org group "NONESUCH", should be one of: BLUE}

    test troops-1.2 {invalid nbhood} -setup {
        ted create NB1 BLUE
    } -body {
        ted sendex -error expr troops("BLUE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test troops-2.1 {no data} -setup {
        ted create NB1 BLUE
    } -body {
        ted sendex expr troops("BLUE")
    } -cleanup {
        cleanup
    } -result {0}

    test troops-2.2 {get playbox data} -setup {
        ted create NB1 BLUE SUNN
        adb eval {
            INSERT INTO personnel_g(g,personnel)
            VALUES('BLUE',500);
        }
    } -body {
        ted sendex expr troops("blue")
    } -cleanup {
        cleanup
    } -result {500}

    test troops-2.3 {get nbhood data} -setup {
        ted create NB1 NB2 BLUE SUNN
        adb eval {
            INSERT INTO deploy_ng(n,g,personnel)
            VALUES('NB1','BLUE',200);

            INSERT INTO deploy_ng(n,g,personnel)
            VALUES('NB2','BLUE',300);
        }
    } -body {
        ted sendex expr troops("blue","nb1")
    } -cleanup {
        cleanup
    } -result {200}

    test troops-2.4 {get multiple nbhood data} -setup {
        ted create NB1 NB2 BLUE SUNN
        adb eval {
            INSERT INTO deploy_ng(n,g,personnel)
            VALUES('NB1','BLUE',200);

            INSERT INTO deploy_ng(n,g,personnel)
            VALUES('NB2','BLUE',300);
        }
    } -body {
        ted sendex expr troops("blue","nb1","nb2")
    } -cleanup {
        cleanup
    } -result {500}

    #-------------------------------------------------------------------
    # unemp()

    # Note: Should really throw an error if used while unlocked.

    test unemp-1.1 {Returns 0 when econ is disabled} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
        econstate DISABLED
    } -body {
        ted sendex expr unemp("SHIA")
    } -cleanup {
        cleanup
    } -result {0.0}

    test unemp-1.2 {succeeds otherwise} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
        econstate ENABLED
    } -body {
        ted sendex expr unemp("SHIA")
    } -cleanup {
        cleanup
    } -result {0.0}

    test unemp-1.3 {1 civgroup, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr unemp("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test unemp-1.4 {2 civgroups, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr unemp("SHIA","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test unemp-2.1 {Unlocked, 1 civgroup} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr unemp("SHIA")
    } -cleanup {
        cleanup
    } -result {0.0}

    test unemp-2.2 {Unlocked, 2 civgroups} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr unemp("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {0.0}

    test unemp-2.3 {LOCKED - 1 civgroup} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr unemp("SHIA")
    } -cleanup {
        cleanup
    } -result {4.0}

    test unemp-2.4 {LOCKED - 1 civgroup} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr unemp("SUNN")
    } -cleanup {
        cleanup
    } -result {4.0}

    test unemp-2.5 {LOCKED - 2 civgroups} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        econstate ENABLED
        ted lock
    } -body {
        ted sendex expr unemp("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {4.0}

    #-------------------------------------------------------------------
    # volatility()

    test volatility-1.1 {invalid neighborhood} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr volatility("NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1}

    test volatility-1.2 {no data} -setup {
        ted create NB1 BLUE SUNN
    } -body {
        ted sendex -error expr volatility("NB1")
    } -cleanup {
        cleanup
    } -result {volatility not yet computed}

    test volatility-2.1 {get data} -setup {
        ted create NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr volatility("nb1")
    } -cleanup {
        cleanup
    } -result {7}

    #-------------------------------------------------------------------
    # vrel()

    test vrel-1.1 {invalid group} -setup {
        ted create JOE BLUE
    } -body {
        ted sendex -error expr vrel("NONESUCH","JOE")
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE}

    test vrel-1.2 {invalid actor} -setup {
        ted create JOE BLUE
    } -body {
        ted sendex -error expr vrel("BLUE","NONESUCH")
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: JOE}

    test vrel-2.1 {in prep} -setup {
        ted create JOE BLUE
    } -body {
        ted sendex expr vrel("BLUE","JOE")
    } -cleanup {
        cleanup
    } -result {0.0}

    test vrel-2.2 {get data} -setup {
        ted create JOE NB1 BLUE SUNN
        ted lock
    } -body {
        ted sendex expr vrel("blue","joe")
    } -cleanup {
        cleanup
    } -result {1.0}

    #-------------------------------------------------------------------
    # workers()

    test workers-1.1 {1 civgroup, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr workers("NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test workers-1.2 {2 civgroups, invalid} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2
    } -body {
        ted sendex -error expr workers("SHIA","NONESUCH")
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test workers-2.1 {Unlocked, 1 civgroup} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr workers("SHIA")
    } -cleanup {
        cleanup
    } -result {0}

    test workers-2.2 {Unlocked, 2 civgroups} -setup {
        ted create JOE BOB SHIA SUNN NB1 NB2 
    } -body {
        ted sendex expr workers("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {0}

    test workers-2.3 {LOCKED - 1 civgroup} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr workers("SHIA")
    } -cleanup {
        cleanup
    } -result {600}

    test workers-2.4 {LOCKED - 1 civgroup} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr workers("SUNN")
    } -cleanup {
        cleanup
    } -result {600}

    test workers-2.5 {LOCKED - 2 civgroups} -setup {
        ted create JOE BOB NB1 NB2 BLUE SHIA SUNN KURD
        ted lock
    } -body {
        ted sendex expr workers("SHIA","SUNN")
    } -cleanup {
        cleanup
    } -result {1200}


    cleanupTests
}

namespace delete ::athena_test::tests::







