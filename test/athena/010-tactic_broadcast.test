# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_broadcast.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_broadcast(sim) tests.
#
#    This test suite tests the tactic::BROADCAST ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # With -valid, creates a valid BROADCAST tactic.  Without
    # -valid, you get the default values.
    proc setup {{opt ""}} {
        variable T1
        variable coffer
        ted create JOE BOB CBS CNN IOM1 IOM2 BLUE

        tdb cash load
        set coffer [::athena::coffer new ::tdb JOE]

        set T1 {
            cap         CBS
            a           SELF
            iom         IOM1
            cost        500.0
        }

        # We need a payload and a hook topic, or we can't execute.
        tdb bsys topic add 1
        tdb bsys topic configure 1 -name TBD

        tdb payload create {
            iom_id       IOM1
            payload_type COOP 
            g            BLUE
            mag          1.0
        }

        tdb hook topic create [dict create \
            hook_id  HOOK1 \
            topic_id 1     \
            position 0.9]

        set B1 [ted addblock JOE]

        if {$opt eq "-valid"} {
            set T1 [ted addtactic $B1 BROADCAST {*}$T1]
        } else {
            set T1 [ted addtactic $B1 BROADCAST]
        }

        tdb broadcast reset
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
        tdb broadcast reset
    }


    #-------------------------------------------------------------------
    # constructor
    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          {}
        cap        {}
        cost       0.0
        execstatus NONE
        faildict   {}
        id         *
        iom        {}
        name       T*
        parent     *
        pot        *::pot
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        $T1 configure -cap CBS -iom IOM1 -a BOB -cost 1000
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          BOB
        cap        CBS
        cost       1000
        execstatus NONE
        faildict   {}
        id         *
        iom        IOM1
        name       T*
        parent     *
        pot        *::pot
        state      invalid
    }

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {default narrative} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Broadcast ??? via ??? with prep cost of $0 and attribute it to ???.}

    test narrative-1.2 {attributed to none} -setup {
        setup
        $T1 configure -a NONE
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Broadcast * and no attribution.}

    test narrative-1.3 {attributed to self} -setup {
        setup
        $T1 configure -a SELF
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Broadcast * and attribute it to self.}

    test narrative-1.4 {all attributes} -setup {
        setup
        $T1 configure -cap CBS -iom IOM1 -a BOB -cost 1000.0
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Broadcast {iom:IOM1} via {cap:CBS} with prep cost of $1,000 and attribute it to {actor:BOB}.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {initial state fails}  -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        a   {No actor selected.}
        cap {No CAP selected.}
        iom {No IOM selected.}
    }

    test check-1.2 {no such CAP}  -setup {
        setup -valid
        $T1 configure -cap NONESUCH
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        cap {No such CAP: "NONESUCH".}
    }

    test check-1.3 {no such actor}  -setup {
        setup -valid
        $T1 configure -a NONESUCH
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        a {No such actor: "NONESUCH".}
    }

    test check-1.4 {no such IOM}  -setup {
        setup -valid
        $T1 configure -iom NONESUCH
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        iom {No such IOM: "NONESUCH".}
    }

    test check-1.5 {IOM is disabled.} -setup {
        setup -valid
        tdb eval {UPDATE ioms SET state='disabled'}
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        iom {IOM is disabled: "IOM1".}
    }

    test check-1.6 {IOM is invalid.} -setup {
        setup -valid
        tdb eval {UPDATE ioms SET state='invalid'}
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        iom {IOM is invalid: "IOM1".}
    }

    test check-1.7 {check: IOM has no valid payloads.} -setup {
        setup -valid
        tdb eval {DELETE FROM payloads;}
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        iom {IOM has no valid payloads: "IOM1".}
    }

    test check-1.8 {check: IOM hook has no valid topics.} -setup {
        setup -valid
        tdb eval {DELETE FROM hook_topics;}
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        iom {IOM's hook has no valid topics: "IOM1".}
    }

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {CAP cost + prep cost} -setup {
        setup -valid
        tdb cap access load
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 8500.0}

    test obligate-1.2 {obligate: insufficient funds} -setup {
        setup -valid
        tdb cap access load
    } -body {
        $T1 set cost 100000.0
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $101,000, but had only $10,000.}}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute} -setup {
        setup -valid
        $T1 obligate $coffer
    } -body {
        $T1 execute
        tdb onecolumn {SELECT cash_on_hand FROM working_cash WHERE a='JOE'}
     } -cleanup {
        cleanup
    } -result {8500.0}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





