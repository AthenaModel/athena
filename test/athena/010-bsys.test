# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-bsys.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    bsys(sim) tests.
#
#    This test suite tests the bsys(sim) queries and mutators.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }


    #-------------------------------------------------------------------
    # system validate

    test system_validate-1.1 {Invalid belief system} -setup {
        tdb bsys system add 2
    } -body {
        tdb bsys system validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid belief system ID}

    test system_validate-2.1 {Valid system} -setup {
        tdb bsys system add 2
    } -body {
        tdb bsys system validate 2
    } -cleanup {
        cleanup
    } -result {2}

    #-------------------------------------------------------------------
    # editable validate

    test editable_validate-1.1 {Invalid editable system} -setup {
        tdb bsys system add 2
    } -body {
        tdb bsys editable validate 1
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {The Neutral belief system cannot be modified.}

    test editable_validate-2.1 {Valid editable system} -setup {
        tdb bsys system add 2
    } -body {
        tdb bsys editable validate 2
    } -cleanup {
        cleanup
    } -result {2}

    #-------------------------------------------------------------------
    # topic validate

    test topic_validate-1.1 {Invalid topic} -setup {
        tdb bsys topic add 1
        tdb bsys topic add 2
    } -body {
        tdb bsys topic validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid topic ID}

    test topic_validate-2.1 {Valid topic} -setup {
        tdb bsys topic add 1
        tdb bsys topic add 2
    } -body {
        tdb bsys topic validate 2
    } -cleanup {
        cleanup
    } -result {2}

    #-------------------------------------------------------------------
    # belief validate

    test belief_validate-1.1 {Invalid belief: invalid system} -setup {
        tdb bsys system add 2
    } -body {
        tdb bsys belief validate {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid belief system ID}


    test belief_validate-1.2 {Invalid topic} -setup {
        tdb bsys system add 2
        tdb bsys topic add 1
        tdb bsys topic add 2
    } -body {
        tdb bsys belief validate {2 NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid topic ID}

    test belief_validate-1.3 {Valid belief, but not editable} -setup {
        tdb bsys system add 2
        tdb bsys topic add 1
        tdb bsys topic add 2
    } -body {
        tdb bsys belief validate {1 1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {The Neutral belief system cannot be modified.}

    test belief_validate-2.1 {Valid belief: editable} -setup {
        tdb bsys system add 2
        tdb bsys topic add 1
        tdb bsys topic add 2
    } -body {
        tdb bsys belief validate {2 1}
    } -cleanup {
        cleanup
    } -result {2 1}

    #-------------------------------------------------------------------
    # belief isdefault

    test belief_isdefault-1.1 {belief has default value} -setup {
        tdb bsys topic add 1
    } -body {
        tdb bsys belief isdefault {1 1}
    } -cleanup {
        cleanup
    } -result {1}

    test belief_isdefault-1.1 {belief has non-default value} -setup {
        tdb bsys system add 2
        tdb bsys topic add 1
        tdb bsys belief configure 2 1 -position 0.1
    } -body {
        tdb bsys belief isdefault {2 1}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # add

    test add-1.1 {Adds a system, assigning an ID} -body {
        set a [tdb bsys system ids]
        tdb bsys add system ""
        set b [tdb bsys system ids]
        list $a $b
    } -cleanup {
        cleanup
    } -result {1 {1 2}}

    test add-1.2 {Adds a system, specifying an ID} -body {
        set a [tdb bsys system ids]
        tdb bsys add system 5
        set b [tdb bsys system ids]
        list $a $b
    } -cleanup {
        cleanup
    } -result {1 {1 5}}

    test add-1.3 {Returns ID, undo script} -body {
        tdb bsys add system 5
    } -cleanup {
        cleanup
    } -match glob -result {5 {:*bsys* UndoAdd system 1 5}}

    test add-1.4 {Undoes adding a system} -setup {
        set a [tdb bsys system ids]
        lassign [tdb bsys add system 5] sid undo
    } -body {
        namespace eval :: $undo
        set b [tdb bsys system ids]
        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test add-2.1 {adds a topic} -body {
        set a [tdb bsys topic ids]
        tdb bsys add topic ""
        set b [tdb bsys topic ids]
        list $a $b
    } -cleanup {
        cleanup
    } -result {{} 1}
  
    test add-2.2 {Adds a topic, specifying an ID} -body {
        set a [tdb bsys topic ids]
        tdb bsys add topic 5
        set b [tdb bsys topic ids]
        list $a $b
    } -cleanup {
        cleanup
    } -result {{} 5}

    test add-2.3 {Returns ID, undo script} -body {
        tdb bsys add topic 5
    } -cleanup {
        cleanup
    } -match glob -result {5 {*bsys* UndoAdd topic 0 5}}

    test add-2.4 {Undoes adding a topic} -setup {
        set a [tdb bsys topic ids]
        lassign [tdb bsys add topic ""] tid undo
    } -body {
        namespace eval :: $undo
        set b [tdb bsys topic ids]
        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test add-3.1 {Sends notifications} -setup {
        ted notifier bind ::tdb.bsys <topic>
    } -body {
        lassign [tdb bsys add topic 1] tid undo
        namespace eval :: $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb.bsys <topic> add 1}
        {::tdb.bsys <topic> delete 1}
    }
   
    #-------------------------------------------------------------------
    # update

    test update-1.1 {Updates an entity} -setup {
        tdb bsys add topic 1
    } -body {
        tdb bsys update topic 1 {name Fred affinity 0}
        ted pdicts [tdb bsys topic get 1]
    } -cleanup {
        cleanup
    } -match dict -result {
        affinity  0
        name      Fred
        relevance 1.0
    }

    test update-1.2 {Ignores unknown attributes} -setup {
        tdb bsys add topic 1
    } -body {
        tdb bsys update topic 1 {name Fred nonesuch 1}
        ted pdicts [tdb bsys topic get 1]
    } -cleanup {
        cleanup
    } -match dict -result {
        affinity  1
        name      Fred
        relevance 1.0
    }

    test update-2.1 {Can be undone} -setup {
        tdb bsys add topic 1
        set a [tdb bsys topic get 1]
        set undo [tdb bsys update topic 1 {name Fred nonesuch 1}]
    } -body {
        namespace eval :: $undo
        set b [tdb bsys topic get 1]
        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test update-3.1 {Sends notifications} -setup {
        tdb bsys add topic 1
        ted notifier bind ::tdb.bsys <topic>
    } -body {
        set undo [tdb bsys update topic 1 {name Fred nonesuch 1}]
        namespace eval :: $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb.bsys <topic> update 1}
        {::tdb.bsys <topic> update 1}
    }

    #-------------------------------------------------------------------
    # delete

    test delete-1.1 {Deletes an entity} -setup {
        tdb bsys add topic 1
        tdb bsys add topic 2
    } -body {
        set a [tdb bsys topic ids]
        tdb bsys delete topic 1
        set b [tdb bsys topic ids]
        list $a $b
    } -cleanup {
        cleanup
    } -result {{1 2} 2}

    test delete-2.1 {Undo restores the entity} -setup {
        tdb bsys add topic 1
        tdb bsys add topic 2
        tdb bsys topic configure 1 -name "Fred" -affinity 0
    } -body {
        set a [tdb bsys topic get 1]
        set undo [tdb bsys delete topic 1]
        namespace eval :: $undo
        set b [tdb bsys topic get 1]
        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test delete-3.1 {Sends notifications} -setup {
        tdb bsys add topic 1
        ted notifier bind ::tdb.bsys <topic>
    } -body {
        set undo [tdb bsys delete topic 1]
        namespace eval :: $undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb.bsys <topic> delete 1}
        {::tdb.bsys <topic> add 1}
    }

    #-------------------------------------------------------------------
    # SQL Function Procs

    test bsysname-1.1 {Retrieves belief system name} -body {
        tdb bsys bsysname 1
    } -cleanup {
        cleanup
    } -result {Neutral (1)}

    test topicname-1.1 {Retrieves belief topic name} -setup {
        tdb bsys add topic 1
        tdb bsys topic configure 1 -name "Test Topic"
    } -body {
        tdb bsys topicname 1
    } -cleanup {
        cleanup
    } -result {Test Topic}
    
    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





