# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-SIM.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    athena(n) SIM:* order tests.
#
#    This test suite tests the sim(sim) orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    variable clockdata [tdb clock checkpoint]

    # Set up to run

    proc setup {} {
        ted create NB1 BLUE SHIA
        ted lock
    }


    # Clean up after a test

    proc cleanup {} {
        variable clockdata

        # Clean up the test environment
        tdb clock restore $clockdata

        if {[tdb state] eq "RUNNING"} {
            tdb sim pause
        } 

        if {[tdb state] eq "PAUSED"} {
            tdb sim unlock
        }

        if {[tdb clock now] > 0} {
            tdb clock reset
        }

        ted cleanup
    }

    #-------------------------------------------------------------------
    # SIM:STARTDATE

    test STARTDATE-1.1 {required parms} -body {
        ted order -reject SIM:STARTDATE {}
    } -result {
        startdate {required value}
    }


    test STARTDATE-1.2 {invalid startdate} -body {
        ted order -reject SIM:STARTDATE startdate NONESUCH
    } -result {
        startdate {Invalid week string: "NONESUCH"}
    }


    test STARTDATE-2.1 {startdate is set} -body {
        ted order SIM:STARTDATE startdate 2014W26
        tdb clock cget -week0
    } -cleanup {
        cleanup
    } -result {2014W26}


    test STARTDATE-2.2 {<Time> is sent} -body {
        ted notifier bind ::tdb <Time>
        ted order SIM:STARTDATE startdate 2014W26
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <Time>}
    }
    
    test STARTDATE-3.1 {<Time> is sent on undo} -setup {
        set undo [ted order SIM:STARTDATE startdate 2014W26]

    } -body {
        ted notifier bind ::tdb <Time>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <Time>}
    }
    
    #-------------------------------------------------------------------
    # SIM:STARTTICK

    test STARTTICK-1.1 {required parms} -body {
        ted order -reject SIM:STARTTICK {}
    } -result {
        starttick {required value}
    }


    test STARTTICK-1.2 {invalid starttick} -body {
        ted order -reject SIM:STARTTICK starttick NONESUCH
    } -result {
        starttick {invalid value "NONESUCH", expected integer}
    }


    test STARTTICK-2.1 {starttick is set} -body {
        ted order SIM:STARTTICK starttick 52
        tdb clock cget -tick0
    } -cleanup {
        cleanup
    } -result {52}


    test STARTTICK-2.2 {<Time> is sent} -body {
        ted notifier bind ::tdb <Time>
        ted order SIM:STARTTICK starttick 52
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <Time>}
    }
    
    test STARTTICK-3.1 {<Time> is sent on undo} -setup {
        set undo [ted order SIM:STARTTICK starttick 52]

    } -body {
        ted notifier bind ::tdb <Time>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <Time>}
    }
    
    #-------------------------------------------------------------------
    # SIM:LOCK

    
    test LOCK-1.1 {sanity check fails} -body {
        ted order -reject SIM:LOCK
    } -cleanup {
        cleanup
    } -result {
        * {The on-lock sanity check failed with one or more errors; time cannot advance. Fix the error, and try again. Please see the On-lock Sanity Check Report in the Detail Browser for details.}
    }

    test LOCK-2.1 {locks the scenario} -setup {
        ted create NB1 BLUE SHIA
        tdb parm set econ.gdpExp 0
        tdb parm set econ.empExp 0
    } -body {
        ted order SIM:LOCK
        tdb sim state
    } -cleanup {
        cleanup
    } -result {PAUSED}

    test LOCK-2.2 {Sends <State>} -setup {
        ted create NB1 BLUE SHIA
        tdb parm set econ.gdpExp 0
        tdb parm set econ.empExp 0
    } -body {
        ted notifier bind ::tdb <State>
        ted order SIM:LOCK
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <State>}
        {::tdb <State>}
    }



    #-------------------------------------------------------------------
    # SIM:RUN

    
    test RUN-1.1 {invalid days string} -setup {
        setup
    } -body {
        ted order -reject SIM:RUN weeks NONESUCH
    } -cleanup {
        cleanup
    } -result {
        weeks {invalid value "NONESUCH", expected integer}
    }


    test RUN-1.2 {negative days} -setup {
        setup
    } -body {
        ted order -reject SIM:RUN weeks -1
    } -cleanup {
        cleanup
    } -result {
        weeks {invalid value "-1", expected integer no less than 1}
    }

    test RUN-2.2 {Run for weeks} -setup {
        setup
    } -body {
        ted order SIM:RUN weeks 5
        list [tdb sim state] [tdb sim stoptime]
    } -cleanup {
        cleanup
    } -result {PAUSED 5}


    test RUN-2.3 {Sends <State>} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <State>
        ted order SIM:RUN weeks 5
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::tdb <State>}
        {::tdb <State>}
    }

    #-------------------------------------------------------------------
    # SIM:PAUSE

    proc pauseCmd {state i n} {
        if {$state eq "RUNNING" && $i == 3} {
            ted order SIM:PAUSE
        }
    }

    test PAUSE-1.1 {Not allowed in PREP} -body {
        tdb order available SIM:PAUSE
    } -cleanup {
        cleanup
    } -result {0}

    test PAUSE-1.2 {Pauses while running} -setup {
        setup
    } -body {
        tdb sim configure -tickcmd [namespace current]::pauseCmd
        ted order SIM:RUN weeks 10
        list [tdb sim state] [tdb clock now]
    } -cleanup {
        tdb sim configure -tickcmd ""
        cleanup
    } -result {PAUSED 3}


    test PAUSE-1.3 {Not allowed while paused} -setup {
        setup
    } -body {
        tdb order available SIM:PAUSE
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # SIM:UNLOCK

    
    test UNLOCK-1.1 {unlocks the scenario} -setup {
        setup
    } -body {
        ted order SIM:UNLOCK
        tdb sim state
    } -cleanup {
        cleanup
    } -result {PREP}

    test UNLOCK-1.2 {Sends <State>} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <State>
        ted order SIM:UNLOCK
        ted notifier received
        # Event is sent twice, once when state is set, and then
        # as part of "sim dbsync".
    } -cleanup {
        cleanup
    } -result {
        {::tdb <State>}
        {::tdb <State>}
    }

    #-------------------------------------------------------------------
    # SIM:REBASE

    test REBASE-1.1 {rebases the scenario} -setup {
        setup
        ted step
    } -body {
        ted order SIM:REBASE
        list [tdb sim state] [tdb clock now]
    } -cleanup {
        cleanup
    } -result {PREP 1}
    
    test REBASE-1.2 {Sends <State>} -setup {
        setup
    } -body {
        ted notifier bind ::tdb <State>
        ted order SIM:REBASE
        ted notifier received
        # Event is sent twice, once when state is set, and then
        # as part of "sim dbsync".
    } -cleanup {
        cleanup
    } -result {
        {::tdb <State>}
        {::tdb <State>}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







