# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer_civgroups.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tdb civgroup(sim) tests.
#
#    This test suite tests the gofer::CIVGROUPS type.
#
#    NOTE: The type itself is implemented using gofer(n); thus,
#    we don't need to test the behavior of the type itself.  As a result,
#    this test suite focusses on the gofer::CIVGROUPS-specific rule
#    objects.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.
namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create JOE BOB BLUE BRIT SHIA SUNN KURD

        # Add an empty group.  If any rule retrieves it, that's 
        # an error.
        ted order CIVGROUP:CREATE g NOBODY n NB1 basepop 0
    }

    proc setupMood {} {
        setup
        ted lock
        ted sat bset 1 SHIA AUT  100.0
        ted sat bset 1 SHIA CUL  100.0
        ted sat bset 1 SHIA QOL  100.0
        ted sat bset 1 SHIA SFT  100.0
        ted sat bset 1 SUNN AUT -100.0
        ted sat bset 1 SUNN CUL -100.0
        ted sat bset 1 SUNN QOL -100.0
        ted sat bset 1 SUNN SFT -100.0
        ted step
    }


    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Rule: BY_VALUE

    test BY_VALUE-1.1 {make, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS BY_VALUE make {SUNN SHIA}
    } -cleanup {
        cleanup
    } -result {raw_value {SUNN SHIA}}

    test BY_VALUE-2.1 {validate, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS BY_VALUE validate {raw_value {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {raw_value {SUNN SHIA}}

    test BY_VALUE-2.2 {validate, invalid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS BY_VALUE validate {raw_value {SUNN NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group*}

    test BY_VALUE-3.1 {narrative} -body {
        tdb gofer CIVGROUPS BY_VALUE narrative {raw_value SUNN}
    } -result {group SUNN}

    test BY_VALUE-4.1 {eval} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS BY_VALUE eval {raw_value {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {SUNN SHIA}

    #-------------------------------------------------------------------
    # Rule: MEGA

    test MEGA-1.1 {make, default} -setup {
        setup
    } -body {
        ted pdicts [tdb gofer CIVGROUPS MEGA make]
    } -cleanup {
        cleanup
    } -result {
        alist    {}
        awhich   ALL
        base     ALL
        byactors IGNORE
        bygroups IGNORE
        glist    {}
        hlist    {}
        hwhich   ALL
        livingby IGNORE
        mood     IGNORE
        nlist    {}
        where    IGNORE
    }

    test MEGA-1.2 {make, options} -setup {
        setup
    } -body {
        ted pdicts [tdb gofer CIVGROUPS MEGA make \
            -base     THESE                            \
            -glist    SHIA                             \
            -where    IN                               \
            -nlist    NB1                              \
            -livingby SA                               \
            -mood     GOOD                             \
            -byactors SUPPORTING                       \
            -awhich   ANY                              \
            -alist    JOE                              \
            -bygroups LIKING                           \
            -hwhich   ANY                              \
            -hlist    SUNN]
    } -cleanup {
        cleanup
    } -result {
        alist    JOE
        awhich   ANY
        base     THESE
        byactors SUPPORTING
        bygroups LIKING
        glist    SHIA
        hlist    SUNN
        hwhich   ANY
        livingby SA
        mood     GOOD
        nlist    NB1
        where    IN
    }
    
    test MEGA-1.3 {make, invalid option} -setup {
        setup
    } -body {
        ted pdicts [tdb gofer CIVGROUPS MEGA make NONESUCH ALL]
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Unknown option: NONESUCH}

    test MEGA-1.4 {make, invalid value} -setup {
        setup
    } -body {
        ted pdicts [tdb gofer CIVGROUPS MEGA make -base NONESUCH]
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid "base" value: "NONESUCH"}

    test MEGA-2.1 {validate, invalid base} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            base NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid "base" value: "NONESUCH"}

    test MEGA-2.2 {validate, invalid glist} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            base  THESE
            glist NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid civilian group, should be one of: SHIA, SUNN, KURD, NOBODY}

    test MEGA-2.3 {validate, invalid where} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            where NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: IGNORE, IN, NOTIN}

    test MEGA-2.4 {validate, invalid nlist} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            where IN
            nlist NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid neighborhood, should be one of: NB1, NB2}

    test MEGA-2.5 {validate, invalid livingby} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            livingby NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: IGNORE, SA, CASH}

    test MEGA-2.6 {validate, invalid mood} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            mood NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: IGNORE, GOOD, AMBIVALENT, BAD}

    test MEGA-2.7 {validate, invalid byactors} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            byactors NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: IGNORE, SUPPORTING, LIKING, DISLIKING}

    test MEGA-2.8 {validate, invalid awhich} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            byactors SUPPORTING
            awhich   NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: ANY, ALL}

    test MEGA-2.8 {validate, invalid alist} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            byactors SUPPORTING
            awhich   ALL
            alist    NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid actor, should be one of: BOB, JOE}

    test MEGA-2.9 {validate, invalid bygroups} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            bygroups NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: IGNORE, LIKING, DISLIKING, LIKED_BY, DISLIKED_BY}

    test MEGA-2.10 {validate, invalid hwhich} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            bygroups LIKING
            hwhich   NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", should be one of: ANY, ALL}

    test MEGA-2.11 {validate, invalid hlist} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MEGA validate {
            bygroups LIKING
            hwhich   ALL
            hlist    NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid group, should be one of: BLUE, BRIT, KURD, NOBODY, SHIA, SUNN}

    test MEGA-2.12 {validate, ignores and clears irrelevant fields} -setup {
        setup
    } -body {
        # The listed parameters are relevant only if related parameters
        # have a value other than "IGNORE".  By default they don't.
        # In this case, the irrelevant parameter values should be ignored,
        # and the default values returned instead.
        ted pdicts [tdb gofer CIVGROUPS MEGA validate {
            glist  NONESUCH
            nlist  NONESUCH
            awhich NONESUCH
            alist  NONESUCH
            hwhich NONESUCH
            hlist  NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        alist    {}
        awhich   ALL
        base     ALL
        byactors IGNORE
        bygroups IGNORE
        glist    {}
        hlist    {}
        hwhich   ALL
        livingby IGNORE
        mood     IGNORE
        nlist    {}
        where    IGNORE
    }

    test MEGA-3.1 {narrative, default} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -result {all civilian groups}

    test MEGA-3.2 {narrative, selected groups} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -base THESE
            -glist {SUNN SHIA}
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -result {groups (SUNN, SHIA)}

    test MEGA-3.3 {narrative, all groups with constraint} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -base ALL
            -mood  AMBIVALENT
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {Starting with all civilian groups, select those civilian groups *}

    test MEGA-3.4 {narrative, selected groups with constraints} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -base THESE
            -glist {SUNN SHIA}
            -mood  AMBIVALENT
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {Starting with groups (SUNN, SHIA), select those civilian groups *}

    test MEGA-3.6 {narrative: where IN, nlist} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -where IN
            -nlist {NB1 NB2}
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* living in neighborhoods (NB1, NB2)}

    test MEGA-3.7 {narrative: where NOTIN, nlist} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -where NOTIN
            -nlist {NB1 NB2}
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* not living in neighborhoods (NB1, NB2)}

    test MEGA-3.8 {narrative: livingby SA} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -livingby SA
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* living by subsistence agriculture}

    test MEGA-3.9 {narrative: livingby CASH} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -livingby CASH
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* living by the cash economy}

    test MEGA-3.10 {narrative: mood GOOD} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -mood GOOD
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* whose mood is satisfied or better}

    test MEGA-3.11 {narrative: mood AMBIVALENT} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -mood AMBIVALENT
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* whose mood is ambivalent}

    test MEGA-3.12 {narrative: mood BAD} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -mood BAD
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* whose mood is dissatisfied or worse}

    test MEGA-3.13 {narrative: byactors SUPPORTING} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -byactors SUPPORTING
            -alist    JOE
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* supporting actor JOE}

    test MEGA-3.14 {narrative: byactors LIKING} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -byactors LIKING
            -alist    JOE
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* liking actor JOE}

    test MEGA-3.15 {narrative: byactors DISLIKING} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -byactors DISLIKING
            -alist    JOE
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* disliking actor JOE}

    test MEGA-3.16 {narrative: bygroups LIKING} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -bygroups LIKING
            -hlist    SHIA
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* liking group SHIA}


    test MEGA-3.17 {narrative: bygroups DISLIKING} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -bygroups DISLIKING
            -hlist    SHIA
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* disliking group SHIA}

    test MEGA-3.18 {narrative: bygroups LIKED_BY} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -bygroups LIKED_BY
            -hlist    SHIA
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* liked by group SHIA}

    test MEGA-3.19 {narrative: bygroups DISLIKED_BY} -setup {
        setup
    } -body {
        # Most of this is handled by anyall_alist, which is
        # tested elsewhere.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -bygroups DISLIKED_BY
            -hlist    SHIA
        }]

        tdb gofer CIVGROUPS MEGA narrative $gdict
    } -cleanup {
        cleanup
    } -match glob -result {* disliked by group SHIA}

    test MEGA-4.1 {eval: default} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {KURD SHIA SUNN}

    test MEGA-4.2 {eval: THESE} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -base  THESE
            -glist {SHIA SUNN}
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    test MEGA-4.3 {eval: where IN} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -where IN
            -nlist NB1
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    test MEGA-4.4 {eval: where NOTIN} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -where NOTIN
            -nlist NB1
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {KURD}

    test MEGA-4.5 {eval: livingby SA} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -livingby SA
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {KURD}

    test MEGA-4.6 {eval: livingby CASH} -setup {
        setup
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -livingby CASH
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    test MEGA-4.7 {eval: mood GOOD} -setup {
        setupMood
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -mood GOOD
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {SHIA}

    test MEGA-4.8 {eval: mood AMBIVALENT} -setup {
        setupMood
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -mood AMBIVALENT
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {KURD}

    test MEGA-4.9 {eval: mood BAD} -setup {
        setupMood
    } -body {
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -mood BAD
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {SUNN}

    test MEGA-4.10 {eval: byactors SUPPORTING ALL BOB} -setup {
        setup
        foreach {g a support} {
            SHIA BOB 0.3
            SHIA JOE 0.3
            SUNN BOB 0.0
            BLUE BOB 0.3
        } {
            tdb eval {
                INSERT INTO support_nga(n,g,a,support)
                VALUES('NB1',$g,$a,$support)
            }
        }
    } -body {
        # This uses anyall_alist, like the specific actor-based rules.
        # We'll just spot check.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -byactors SUPPORTING
            -alist BOB
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {SHIA}

    test MEGA-4.11 {eval: bygroups LIKING KURD} -setup {
        setup
        ted lock
        ted hrel bset 1 SHIA KURD  0.3
        ted hrel bset 1 SHIA SUNN  0.3
        ted hrel bset 1 SUNN KURD  0.0
        ted hrel bset 1 BLUE KURD  0.3
        ted step
    } -body {
        # This uses anyall_glist, like the specific group-based rules.
        # We'll just spot check.
        set gdict [tdb gofer CIVGROUPS MEGA make {*}{
            -bygroups LIKING
            -hlist KURD
        }]
        lsort [tdb gofer CIVGROUPS MEGA eval $gdict]
    } -cleanup {
        cleanup
    } -result {KURD SHIA}

    #-------------------------------------------------------------------
    # Rule: RESIDENT_IN

    test RESIDENT_IN-1.1 {make, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS RESIDENT_IN make {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test RESIDENT_IN-2.1 {validate, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS RESIDENT_IN validate {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test RESIDENT_IN-2.2 {validate, invalid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS RESIDENT_IN validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test RESIDENT_IN-3.1 {narrative} -body {
        tdb gofer CIVGROUPS RESIDENT_IN narrative {nlist NB1}
    } -result {non-empty civilian groups resident in NB1}

    test RESIDENT_IN-4.1 {eval, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS RESIDENT_IN eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN KURD}


    #-------------------------------------------------------------------
    # Rule: NOT_RESIDENT_IN

    test NOT_RESIDENT_IN-1.1 {make, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS NOT_RESIDENT_IN make {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NOT_RESIDENT_IN-2.1 {validate, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS NOT_RESIDENT_IN validate {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NOT_RESIDENT_IN-2.2 {validate, invalid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS NOT_RESIDENT_IN validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test NOT_RESIDENT_IN-3.1 {narrative} -body {
        tdb gofer CIVGROUPS NOT_RESIDENT_IN narrative {nlist NB1}
    } -result {non-empty civilian groups not resident in NB1}

    test NOT_RESIDENT_IN-4.1 {eval, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS NOT_RESIDENT_IN eval {nlist NB2}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    test NOT_RESIDENT_IN-4.2 {eval, valid} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS NOT_RESIDENT_IN eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Rule: MOOD_IS_GOOD


    test MOOD_IS_GOOD-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_GOOD make
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_GOOD-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_GOOD validate {}
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_GOOD-3.1 {narrative} -body {
        tdb gofer CIVGROUPS MOOD_IS_GOOD narrative {}
    } -match glob -result {civilian groups whose mood is good}

    test MOOD_IS_GOOD-4.1 {eval} -setup {
        setupMood
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_GOOD eval {}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: MOOD_IS_BAD

    test MOOD_IS_BAD-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_BAD make
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_BAD-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_BAD validate {}
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_BAD-3.1 {narrative} -body {
        tdb gofer CIVGROUPS MOOD_IS_BAD narrative {}
    } -match glob -result {civilian groups whose mood is bad}

    test MOOD_IS_BAD-4.1 {eval} -setup {
        setupMood
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_BAD eval {}
    } -cleanup {
        cleanup
    } -result {SUNN}

    #-------------------------------------------------------------------
    # Rule: MOOD_IS_AMBIVALENT

    test MOOD_IS_AMBIVALENT-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_AMBIVALENT make
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_AMBIVALENT-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_AMBIVALENT validate {}
    } -cleanup {
        cleanup
    } -result {}

    test MOOD_IS_AMBIVALENT-3.1 {narrative} -body {
        tdb gofer CIVGROUPS MOOD_IS_AMBIVALENT narrative {}
    } -match glob -result {civilian groups whose mood is ambivalent}

    test MOOD_IS_AMBIVALENT-4.1 {eval} -setup {
        setupMood
    } -body {
        tdb gofer CIVGROUPS MOOD_IS_AMBIVALENT eval {}
    } -cleanup {
        cleanup
    } -result {KURD}


    #-------------------------------------------------------------------
    # Rule: SUPPORTING_ACTOR

    test SUPPORTING_ACTOR-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS SUPPORTING_ACTOR make any {JOE BOB}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test SUPPORTING_ACTOR-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS SUPPORTING_ACTOR validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test SUPPORTING_ACTOR-3.1 {narrative} -body {
        tdb gofer CIVGROUPS SUPPORTING_ACTOR narrative {anyall ANY alist JOE}
    } -match glob -result {civilian groups that actively support *}

    test SUPPORTING_ACTOR-4.1 {eval} -setup {
        setup
        foreach {g a support} {
            SHIA BOB 0.3
            SHIA JOE 0.3
            SUNN BOB 0.0
            BLUE BOB 0.3
        } {
            tdb eval {
                INSERT INTO support_nga(n,g,a,support)
                VALUES('NB1',$g,$a,$support)
            }
        }
    } -body {
        tdb gofer CIVGROUPS SUPPORTING_ACTOR eval {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: LIKING_ACTOR

    test LIKING_ACTOR-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS LIKING_ACTOR make any {JOE BOB}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test LIKING_ACTOR-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS LIKING_ACTOR validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test LIKING_ACTOR-3.1 {narrative} -body {
        tdb gofer CIVGROUPS LIKING_ACTOR narrative {anyall ANY alist JOE}
    } -match glob -result {civilian groups that like *}

    test LIKING_ACTOR-4.1 {eval} -setup {
        setup
        ted lock
        ted vrel bset 1 SHIA BOB  0.3
        ted vrel bset 1 SHIA JOE  0.3
        ted vrel bset 1 SUNN BOB  0.0
        ted vrel bset 1 BLUE BOB  0.3
        ted step
    } -body {
        tdb gofer CIVGROUPS LIKING_ACTOR eval {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: DISLIKING_ACTOR

    test DISLIKING_ACTOR-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS DISLIKING_ACTOR make any {JOE BOB}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test DISLIKING_ACTOR-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS DISLIKING_ACTOR validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test DISLIKING_ACTOR-3.1 {narrative} -body {
        tdb gofer CIVGROUPS DISLIKING_ACTOR narrative {anyall ANY alist JOE}
    } -match glob -result {civilian groups that dislike *}

    test DISLIKING_ACTOR-4.1 {eval} -setup {
        setup
        ted lock
        ted vrel bset 1 SHIA BOB -0.3
        ted vrel bset 1 SHIA JOE -0.3
        ted vrel bset 1 SUNN BOB  0.0
        ted vrel bset 1 BLUE BOB -0.3
        ted step
    } -body {
        tdb gofer CIVGROUPS DISLIKING_ACTOR eval {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: LIKING_GROUP

    test LIKING_GROUP-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS LIKING_GROUP make any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKING_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS LIKING_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKING_GROUP-3.1 {narrative} -body {
        tdb gofer CIVGROUPS LIKING_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that like *}

    test LIKING_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        ted hrel bset 1 SHIA KURD  0.3
        ted hrel bset 1 SHIA SUNN  0.3
        ted hrel bset 1 SUNN KURD  0.0
        ted hrel bset 1 BLUE KURD  0.3
        ted step
    } -body {
        tdb gofer CIVGROUPS LIKING_GROUP eval {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {KURD SHIA}

    #-------------------------------------------------------------------
    # Rule: DISLIKING_GROUP

    test DISLIKING_GROUP-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS DISLIKING_GROUP make any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKING_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS DISLIKING_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKING_GROUP-3.1 {narrative} -body {
        tdb gofer CIVGROUPS DISLIKING_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that dislike *}

    test DISLIKING_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        ted hrel bset 1 SHIA KURD -0.3
        ted hrel bset 1 SHIA SUNN -0.3
        ted hrel bset 1 SUNN KURD  0.0
        ted hrel bset 1 BLUE KURD -0.3
        ted step
    } -body {
        tdb gofer CIVGROUPS DISLIKING_GROUP eval {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {SHIA}

    #-------------------------------------------------------------------
    # Rule: LIKED_BY_GROUP

    test LIKED_BY_GROUP-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS LIKED_BY_GROUP make any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKED_BY_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS LIKED_BY_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test LIKED_BY_GROUP-3.1 {narrative} -body {
        tdb gofer CIVGROUPS LIKED_BY_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that are liked by *}

    test LIKED_BY_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        ted hrel bset 1 SHIA SUNN  0.3
        ted hrel bset 1 SHIA KURD  0.0
        ted hrel bset 1 KURD SUNN  0.3
        ted hrel bset 1 SHIA BLUE  0.3
        ted step
    } -body {
        tdb gofer CIVGROUPS LIKED_BY_GROUP eval {anyall ANY glist SHIA}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    #-------------------------------------------------------------------
    # Rule: DISLIKED_BY_GROUP

    test DISLIKED_BY_GROUP-1.1 {make} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS DISLIKED_BY_GROUP make any {BRIT BLUE}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKED_BY_GROUP-2.1 {validate} -setup {
        setup
    } -body {
        tdb gofer CIVGROUPS DISLIKED_BY_GROUP validate {anyall any glist {BRIT BLUE}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {BRIT BLUE}}

    test DISLIKED_BY_GROUP-3.1 {narrative} -body {
        tdb gofer CIVGROUPS DISLIKED_BY_GROUP narrative {anyall ANY glist BRIT}
    } -match glob -result {civilian groups that are disliked by *}

    test DISLIKED_BY_GROUP-4.1 {eval} -setup {
        setup
        ted lock
        ted hrel bset 1 SHIA SUNN -0.3
        ted hrel bset 1 SHIA KURD  0.0
        ted hrel bset 1 KURD SUNN -0.3
        ted hrel bset 1 SHIA BLUE -0.3
        ted step
    } -body {
        tdb gofer CIVGROUPS DISLIKED_BY_GROUP eval {anyall ANY glist SHIA}
    } -cleanup {
        cleanup
    } -result {SUNN}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

