# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-FUND.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:FUND:* order tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB
        variable S1
        variable B1
        variable T1
        set S1 [tdb strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename FUND
        lassign [$B1 tactics] T1
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set T1 {
        owner       JOE
        priority    bottom
        a           BOB
        x1          2000.0
    }

    #-------------------------------------------------------------------
    # TACTIC:FUND

    test TACTIC:FUND-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND
    } -result {
        tactic_id {required value}
    }

    test TACTIC:FUND-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid FUND ID: "NONESUCH"}
    }

    test TACTIC:FUND-1.3 {invalid amount} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND tactic_id [$T1 id] amount NONESUCH
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:FUND-1.4 {amount is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND tactic_id [$T1 id] amount -1
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:FUND-1.5 {invalid percent} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND tactic_id [$T1 id] \
                              mode PERCENT percent NONESUCH
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "NONESUCH", expected double}
    }

    test TACTIC:FUND-1.6 {percent is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND tactic_id [$T1 id] \
                              mode PERCENT percent -1
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "-1", expected double in range 0.0, 100.0}
    }

    test TACTIC:FUND-1.7 {invalid name} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUND tactic_id [$T1 id] name 1234
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:FUND-1.8 {duplicate name} -setup {
        setup
        set T2 [ted addtactic $B1 ABSIT]
    } -body {
        ted order -reject TACTIC:FUND tactic_id [$T1 id] \
            name [$T2 get name]
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Name already exists: "T2"}
    }

    test TACTIC:FUND-2.1 {tactic is created: ALL} -setup {
        setup
    } -body {
        ted order TACTIC:FUND  \
            tactic_id [$T1 id] \
            a BOB

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          BOB
        amount     0.0
        execstatus NONE
        faildict   {}
        id         *
        mode       ALL
        name       T*
        parent     *
        percent    0.0
        pot        *::pot
        state      normal
    }

    test TACTIC:FUND-2.2 {tactic is updated: EXACT} -setup {
        setup
    } -body {
        ted order TACTIC:FUND  \
            tactic_id [$T1 id] \
            a BOB              \
            mode EXACT         \
            amount 1000.0 

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          BOB
        amount     1000.0
        execstatus NONE
        faildict   {}
        id         *
        mode       EXACT
        name       T*
        parent     *
        percent    0.0
        pot        *::pot
        state      normal
    }

    test TACTIC:FUND-2.3 {tactic is updated: UPTO} -setup {
        setup
    } -body {
        ted order TACTIC:FUND  \
            tactic_id [$T1 id] \
            a BOB              \
            mode UPTO          \
            amount 2000.0

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          BOB
        amount     2000.0
        execstatus NONE
        faildict   {}
        id         *
        mode       UPTO
        name       T*
        parent     *
        percent    0.0
        pot        *::pot
        state      normal
    }

    test TACTIC:FUND-2.4 {tactic is updated: PERCENT} -setup {
        setup
    } -body {
        ted order TACTIC:FUND  \
            tactic_id [$T1 id] \
            a BOB              \
            mode PERCENT       \
            percent 10.0      

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          BOB
        amount     0.0
        execstatus NONE
        faildict   {}
        id         *
        mode       PERCENT
        name       T*
        parent     *
        percent    10.0
        pot        *::pot
        state      normal
    }

    test TACTIC:FUND-2.5 {tactic is updated: EXCESS} -setup {
        setup
    } -body {
        ted order TACTIC:FUND  \
            tactic_id [$T1 id] \
            a BOB              \
            mode EXCESS        \
            amount 3000.0

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          BOB
        amount     3000.0
        execstatus NONE
        faildict   {}
        id         *
        mode       EXCESS
        name       T*
        parent     *
        percent    0.0
        pot        *::pot
        state      normal
    }

    test TACTIC:FUND-2.6 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:FUND tactic_id [$T1 id]
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::projectlib::bean <Monitor>}
    }


    test TACTIC:FUND-2.7 {undo notifier event} -setup {
        setup
        ted order TACTIC:FUND tactic_id [$T1 id]
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        tdb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::projectlib::bean <Monitor>}
    }

    test TACTIC:FUND-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





