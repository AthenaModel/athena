# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition(sim) tests.
#
#    This test suite tests the condition(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable B1
        variable C1
        variable B2

        # FIRST, create a scenario
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD

        # NEXT, add a EXPR condition to the system's strategy
        set B1 [ted addblock SYSTEM]
        set B2 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 EXPR]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #===================================================================
    # condition class methods
    #
    # [::athena::condition define] is tested implicitly.

    #-------------------------------------------------------------------
    # type

    test type-1.1 {return type given type name} -body {
        ::athena::condition type EXPR
    } -result {::athena::condition::EXPR}
    

    #-------------------------------------------------------------------
    # typedict

    test typedict-1.1 {lists types and titles} -body {
        # Spot check
        set a [llength [::athena::condition types]]
        set b [dict size [::athena::condition typedict]]
        set c [dict get [::athena::condition typedict] ::athena::condition::EXPR]
        
        list [expr {$a == $b}] $c
    } -result {1 {EXPR: Boolean Expression}}

    #===================================================================
    # condition::<type> class methods

    #-------------------------------------------------------------------
    # ctype's typename

    test ctype_typename-1.1 {return type's name} -body {
        ::athena::condition::EXPR typename
    } -result {EXPR}
    
    #-------------------------------------------------------------------
    # ctype's title

    test ctype_title-1.1 {return type's title} -body {
        ::athena::condition::EXPR title
    } -result {Boolean Expression}
    
    #===================================================================
    # condition instance methods


    #-------------------------------------------------------------------
    # constructor

    test constructor-1.1 {condition is created} -setup {
        setup
    } -body {
        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        expression {}
        id         *
        metflag    {}
        name       C*
        parent     *
        pot        *::pot
        state      invalid
    }

    #-------------------------------------------------------------------
    # typename

    test typename-1.1 {can retrieve typename} -setup {
        setup
    } -body {
        $C1 typename
    } -cleanup {
        cleanup
    } -result {EXPR}
    
    #-------------------------------------------------------------------
    # agent

    test agent-1.1 {can retrieve owning agent} -setup {
        setup
    } -body {
        $C1 agent
    } -cleanup {
        cleanup
    } -result {SYSTEM}
    
    #-------------------------------------------------------------------
    # strategy

    test strategy-1.1 {can retrieve owning strategy} -setup {
        setup
    } -body {
        expr {[$C1 strategy] eq [tdb strategy getname SYSTEM]}
    } -cleanup {
        cleanup
    } -result {1}
    
    #-------------------------------------------------------------------
    # block

    test block-1.1 {can retrieve owning block} -setup {
        setup
    } -body {
        $C1 block
    } -cleanup {
        cleanup
    } -match glob -result {*::pot::block*}
    
    #-------------------------------------------------------------------
    # state

    test state-1.1 {can retrieve state} -setup {
        setup
    } -body {
        $C1 state
    } -cleanup {
        cleanup
    } -result {invalid}
    
    #-------------------------------------------------------------------
    # isknown

    # This method is tested with eval.

    #-------------------------------------------------------------------
    # ismet

    # This method is tested with eval.

    #-------------------------------------------------------------------
    # view

    test view-1.1 {view: text} -setup {
        setup
        set C2 [ted addcondition $B1 EXPR expression {1 == 1}]
    } -body {
        ted pdicts [$C2 view]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        agent      SYSTEM
        expression {1 == 1}
        fullname   SYSTEM/B*/C*
        id         *
        metflag    {}
        name       C*
        narrative  {Expression: 1 == 1}
        parent     *
        pot        *::pot
        state      normal
        statusicon ::projectgui::icon::dash13
        typename   EXPR
    }

    test view-1.2 {view: html} -setup {
        setup
        set C2 [ted addcondition $B1 EXPR expression {1 == 1}]
    } -body {
        ted pdicts [$C2 view html]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        agent      SYSTEM
        expression {1 == 1}
        fullname   SYSTEM/B*/C*
        id         *
        metflag    {}
        name       C*
        narrative  {Expression: 1 == 1}
        parent     *
        pot        *::pot
        state      normal
        statusicon ::projectgui::icon::dash13
        typename   EXPR
    }

    test view-1.3 {view: cget} -setup {
        setup
        set C2 [ted addcondition $B1 EXPR expression {1 == 1}]
    } -body {
        ted pdicts [$C2 view cget]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        agent        SYSTEM
        condition_id *
        expression   {1 == 1}
        fullname     SYSTEM/B*/C*
        name         C*
        narrative    {Expression: 1 == 1}
        parent       *
        state        normal
        typename     EXPR
    }

    #-------------------------------------------------------------------
    # check

    test check-1.1 {returns errors} -setup {
        setup
    } -body {
        $C1 set expression NONESUCH
        $C1 check
    } -cleanup {
        cleanup
    } -match glob -result {expression {*}}

    test check-1.2 {sets state to invalid on failure} -setup {
        setup
    } -body {
        $C1 set expression NONESUCH
        $C1 set state normal 
        $C1 check
        $C1 state
    } -cleanup {
        cleanup
    } -result {invalid}
    
    test check-1.3 {will reset invalid to normal on success} -setup {
        setup
    } -body {
        $C1 set expression {1 == 1}
        $C1 check
        $C1 state
    } -cleanup {
        cleanup
    } -result {normal}
    
    test check-1.4 {will not reset disabled to normal on success} -setup {
        setup
    } -body {
        $C1 set expression {1 == 1}
        $C1 set state disabled
        $C1 check
        $C1 state
    } -cleanup {
        cleanup
    } -result {disabled}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {returns narrative string} -setup {
        setup
    } -body {
        $C1 set expression {1 == 1}
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Expression: 1 == 1}
    

    #-------------------------------------------------------------------
    # eval/metflag

    test eval-1.1 {metflag is initially unknown, and presumed unmet} -setup {
        setup
    } -body {
        list [$C1 isknown] [$C1 ismet]
    } -cleanup {
        cleanup
    } -result {0 0}
    
    test eval-1.2 {eval evaluates condition} -setup {
        setup
        $C1 set expression {1 == 1}
        ted lock
    } -body {
        set a [$C1 eval]

        $C1 set expression {1 == 2}
        set b [$C1 eval]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    test eval-1.3 {after eval metflag is known} -setup {
        setup
        $C1 set expression {1 == 1}
        ted lock
    } -body {
        set a [$C1 eval]
        list [$C1 isknown] $a [$C1 ismet]
    } -cleanup {
        cleanup
    } -result {1 1 1}

    #-------------------------------------------------------------------
    # update_

    test update-1.1 {update_ clears the metflag} -setup {
        setup
        $C1 set expression {1 == 1}
        ted lock
        $C1 eval
    } -body {
        set a [$C1 isknown]
        $C1 update_ {expression} {expression {2 == 2}}
        set b [$C1 isknown]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    test update-1.2 {update_ does a sanity check} -setup {
        setup
    } -body {
        set a [$C1 state]
        $C1 update_ {expression} {expression {1 == 1}}
        set b [$C1 state]

        list $a $b
    } -cleanup {
        cleanup
    } -result {invalid normal}
    

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

