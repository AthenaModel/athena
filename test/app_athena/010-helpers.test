# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-helpers.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    helper(sim) tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test
    proc cleanup {} {
        ted cleanup
    }


    #-----------------------------------------------------------------
    # andlist 

    test andlist-1.1 {No items} -body {
        ::athena::andlist widget {}
    } -result {widget ???}

    test andlist-1.2 {One item} -body {
        ::athena::andlist widget {A}
    } -result {widget A}

    test andlist-1.3 {Two items} -body {
        ::athena::andlist widget {A B}
    } -result {widgets A and B}
    
    test andlist-1.4 {Three items} -body {
        ::athena::andlist widget {A B C}
    } -result {widgets A, B and C}

    #-----------------------------------------------------------------
    # fillparms

    test fillparms-1.1 {Fills in order parms} -setup {
        ted create SHIA
    } -body {
        array unset parms
        set parms(basepop) 150000
        set parms(demeanor) ""
        set parms(NONESUCH) ""

        ::athena::fillparms parms [tdb civgroup get SHIA]
        ted pdict [array get parms]

        # Parms with values are unchanged.
        # Parms with empty values are filled in, if a value is available.
    } -cleanup {
        cleanup
    } -result {
        basepop  150000
        NONESUCH {}
        demeanor AVERAGE
    }

    #-------------------------------------------------------------------
    # optdict2parmdict

    test optdict2parmdict {converts to parmdict} -body {
        ::athena::optdict2parmdict {-first 1 -second 2 third 3}
    } -result {first 1 second 2 third 3}

    #-------------------------------------------------------------------
    # parmdict2optdict
    
    test parmdict2optdict {converts to optdict} -body {
        ::athena::parmdict2optdict {-first 1 second 2 third 3}
    } -result {-first 1 -second 2 -third 3}

    #-------------------------------------------------------------------
    # dbexists

    test dbexists-1.1 {Queries simple entity existence} -setup {
        ted create SHIA
    } -body {
        set a [::athena::dbexists ::tdb civgroups g SHIA]
        tdb eval {DELETE FROM civgroups}
        set b [::athena::dbexists ::tdb civgroups g SHIA]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    #-------------------------------------------------------------------
    # dbget

    test dbget-1.1 {Queries entity dictionary} -setup {
        ted create SHIA
    } -body {
        ted pdicts [::athena::dbget ::tdb civgroups g SHIA]
    } -cleanup {
        cleanup
    } -result {
        basepop   1000
        g         SHIA
        hist_flag 0
        housing   AT_HOME
        lfp       60
        n         NB1
        pop_cr    0.0
        sa_flag   0
        upc       0.0
    }

    test dbget-1.2 {Queries column} -setup {
        ted create SHIA
    } -body {
        ::athena::dbget ::tdb civgroups g SHIA basepop
    } -cleanup {
        cleanup
    } -result {1000}

    test dbget-1.3 {Empty string if no such entity} -setup {
        ted create SHIA
    } -body {
        ::athena::dbget ::tdb civgroups g SUNN]
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # Done

    cleanupTests
}

namespace delete ::athena_test::tests::
