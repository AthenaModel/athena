# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#   040-driver_eni.test
#
# AUTHOR:
#   Will Duquette
#
# DESCRIPTION:
#   ENI tests.
#
#   This test suite tests that the rules fire when appropriate, by 
#   driving the ENI services model.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Define an htools buffer for tests
    htools ht

    # pprint text
    #
    # text  - block text
    #
    # Prints it so that it looks nice in a -result option.

    proc pprint {text} {
        return "\n[string trim $text]\n    "
    }

    # setup 
    #
    # Sets up for tests.
    
    proc setup {} {
        # FIRST, other rule sets shouldn't muddy the waters.
        parm set dam.PRESENCE.active no
        parm set dam.UNEMP.active no
        parm set dam.CONSUMP.active no
        rdb eval {DELETE FROM drivers}
        
        # NEXT, create the entities
        ted create JOE BOB NB1 BLUE SHIA SUNN

        # NEXT, JOE is the controller of neighborhood N1.
        ted order NBHOOD:UPDATE n NB1 controller JOE

    }
    
    # fundeni a amount
    # 
    # a       - The actor, JOE or BOB
    # amount  - The amount to fund
    #
    # Creates a FUNDENI tactic for the actor to fund SHIA and SUNN.

    proc fundeni {a amount} {
        set amount [moneyscan $amount]

        if {$amount == 0.0} {
            return
        }

        foreach tid [tactic ids] {
            ted order TACTIC:DELETE tactic_id $tid
        }

        ted order TACTIC:FUNDENI:CREATE \
            owner   $a                  \
            glist   {SHIA SUNN}         \
            x1      $amount             \
            on_lock YES                 \
            once    NO
    }

    # lock
    #
    # Locks the scenario and cleans up the rule firing data prior to a step.
    # This lets us get at expectations.

    proc lock {} {
        ted lock
        rdb eval {
            DELETE FROM rule_firings;
            DELETE FROM rule_inputs;
            DELETE FROM drivers;
        }
    }
    
    # Clean up after a test
    proc cleanup {} {
        ht clear
        ted cleanup
    }

    
    #-------------------------------------------------------------------
    # assess
    
    test assess-1.1 {Rule 1-1 fires} -setup {
        setup
    } -body {
        # No funding.
        ted lock

        ted querylist {
            SELECT * FROM rule_firings
        }
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          0
driver_id  1000
ruleset    ENI
rule       ENI-1-1
fdict      controller JOE required 0.6 expected 0.0 actual 0.0 needs 2.0 expectf 0.0 g SHIA dtype ENI case R-

firing_id  2
t          0
driver_id  1001
ruleset    ENI
rule       ENI-1-1
fdict      controller JOE required 0.6 expected 0.0 actual 0.0 needs 2.0 expectf 0.0 g SUNN dtype ENI case R-
    }
    
    test assess-1.2 {Rule 1-1 satisfaction} -setup {
        setup
    } -body {
        # No funding.
        ted lock
        ted query {
            SELECT rule, g, c
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='sat'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    c   
------- ---- --- 
ENI-1-1 SHIA AUT 
ENI-1-1 SHIA QOL 
ENI-1-1 SUNN AUT 
ENI-1-1 SUNN QOL 
    }

    test assess-1.3 {Rule 1-1 vrel} -setup {
        setup
    } -body {
        # No funding.
        ted lock
        ted query {
            SELECT rule, g, a, note
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='vrel'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    a   note                  
------- ---- --- --------------------- 
ENI-1-1 SHIA BOB credit=N, no control  
ENI-1-1 SHIA JOE credit=N, has control 
ENI-1-1 SUNN BOB credit=N, no control  
ENI-1-1 SUNN JOE credit=N, has control 
    }

    test assess-2.1 {Rule 1-2 fires} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 500
        ted step

        ted querylist {
            SELECT * FROM rule_firings
        }
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          1
driver_id  1000
ruleset    ENI
rule       ENI-1-2
fdict      controller JOE required 0.6 expected 0.71875 actual 0.625 needs 0.0 expectf -0.1875 g SHIA dtype ENI case E-

firing_id  2
t          1
driver_id  1001
ruleset    ENI
rule       ENI-1-2
fdict      controller JOE required 0.6 expected 0.71875 actual 0.625 needs 0.0 expectf -0.1875 g SUNN dtype ENI case E-
    }
    
    test assess-2.2 {Rule 1-2 satisfaction} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 500
        ted step

        ted query {
            SELECT rule, g, c
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='sat'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    c   
------- ---- --- 
ENI-1-2 SHIA AUT 
ENI-1-2 SHIA QOL 
ENI-1-2 SUNN AUT 
ENI-1-2 SUNN QOL 
    }

    test assess-2.3 {Rule 1-2 vrel} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 500
        ted step

        ted query {
            SELECT rule, g, a, note
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='vrel'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    a   note                  
------- ---- --- --------------------- 
ENI-1-2 SHIA BOB credit=N, no control  
ENI-1-2 SHIA JOE credit=M, has control 
ENI-1-2 SUNN BOB credit=N, no control  
ENI-1-2 SUNN JOE credit=M, has control 
    }

    test assess-3.1 {Rule 1-3 fires} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 600
        ted step

        ted querylist {
            SELECT * FROM rule_firings
        }
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          1
driver_id  1000
ruleset    ENI
rule       ENI-1-3
fdict      controller JOE required 0.6 expected 0.75 actual 0.75 needs 0.0 expectf 0.0 g SHIA dtype ENI case E

firing_id  2
t          1
driver_id  1001
ruleset    ENI
rule       ENI-1-3
fdict      controller JOE required 0.6 expected 0.75 actual 0.75 needs 0.0 expectf 0.0 g SUNN dtype ENI case E
    }
    
    test assess-3.2 {Rule 1-3 satisfaction} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 600
        ted step

        # No satisfaction effects when expectations are met
        rdb eval {
            SELECT count(*)
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='sat'
        }
    } -cleanup {
        cleanup
    } -result {0}

    test assess-3.3 {Rule 1-3 vrel} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 600
        ted step

        ted query {
            SELECT rule, g, a, note
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='vrel'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    a   note                  
------- ---- --- --------------------- 
ENI-1-3 SHIA BOB credit=N, no control  
ENI-1-3 SHIA JOE credit=M, has control 
ENI-1-3 SUNN BOB credit=N, no control  
ENI-1-3 SUNN JOE credit=M, has control 
    }

    test assess-4.1 {Rule 1-4 fires} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 800
        ted step

        ted querylist {
            SELECT * FROM rule_firings
        }
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          1
driver_id  1000
ruleset    ENI
rule       ENI-1-4
fdict      controller JOE required 0.6 expected 0.875 actual 1.0 needs 0.0 expectf 0.25 g SHIA dtype ENI case E+

firing_id  2
t          1
driver_id  1001
ruleset    ENI
rule       ENI-1-4
fdict      controller JOE required 0.6 expected 0.875 actual 1.0 needs 0.0 expectf 0.25 g SUNN dtype ENI case E+
    }
    
    test assess-4.2 {Rule 1-4 satisfaction} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 800
        ted step

        ted query {
            SELECT rule, g, c
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='sat'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    c   
------- ---- --- 
ENI-1-4 SHIA AUT 
ENI-1-4 SHIA QOL 
ENI-1-4 SUNN AUT 
ENI-1-4 SUNN QOL 
    }

    test assess-4.3 {Rule 1-4 vrel} -constraints tbd -setup {
        setup
    } -body {
        fundeni JOE 600
        lock
        fundeni JOE 800
        ted step

        ted query {
            SELECT rule, g, a, note
            FROM rule_firings JOIN rule_inputs USING (firing_id)
            WHERE atype='vrel'
        }
    } -cleanup {
        cleanup
    } -result {
rule    g    a   note                  
------- ---- --- --------------------- 
ENI-1-4 SHIA BOB credit=N, no control  
ENI-1-4 SHIA JOE credit=M, has control 
ENI-1-4 SUNN BOB credit=N, no control  
ENI-1-4 SUNN JOE credit=M, has control 
    }

    #-------------------------------------------------------------------
    # sigline

    test sigline-1.1 {sigline output} -setup {
        setup
    } -body {
        driver::ENI sigline SHIA 
    } -cleanup {
        cleanup
    } -result {Provision of ENI services to SHIA}
         

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative output} -setup {
        setup
    } -body {
        driver::ENI narrative {
            dtype      ENI
            g          SHIA
            case       E-
        } 
    } -cleanup {
        cleanup
    } -result {{group:SHIA} receives ENI services (case E-)}

         
    #-------------------------------------------------------------------
    # detail

    test detail-1.1 {detail, controller} -setup {
        setup
    } -body {
        driver::ENI detail {
            dtype      ENI
            g          SHIA
            actual     0.8
            required   0.6
            expected   0.7
            expectf    0.5
            needs      0.0
            controller JOE
            case       E+
        } [namespace current]::ht

        pprint [ht get] 
    } -cleanup {
        cleanup
    } -result {
Civilian group
<a href="my://app/group/SHIA">SHIA</a>
received ENI services at an actual level of
0.80, that is, at
80% of the saturation level
of service.  Group SHIA requires a level of at least
0.60, and expected a level of
0.70.<p>

The case is therefore E+, that is, SHIA received
more than expected.
These values led to the following rule set inputs:<p>

<i>expectf</i> = 0.50<br>
<i>needs</i> = 0.00<p>

Group SHIA's neighborhood was controlled by
actor <a href="my://app/actor/JOE">JOE</a>.<p>
    }
    
    test detail-1.2 {detail, no controller} -setup {
        setup
    } -body {
        driver::ENI detail {
            dtype      ENI
            g          SHIA
            actual     0.7
            required   0.6
            expected   0.8
            expectf    -0.5
            needs      0.0
            controller ""
            case       E-
        } [namespace current]::ht

        pprint [ht get] 
    } -cleanup {
        cleanup
    } -result {
Civilian group
<a href="my://app/group/SHIA">SHIA</a>
received ENI services at an actual level of
0.70, that is, at
70% of the saturation level
of service.  Group SHIA requires a level of at least
0.60, and expected a level of
0.80.<p>

The case is therefore E-, that is, SHIA received
less than expected.
These values led to the following rule set inputs:<p>

<i>expectf</i> = -0.50<br>
<i>needs</i> = 0.00<p>

Group SHIA's neighborhood was controlled by
no actor.<p>
    }

    
    cleanupTests
}

namespace delete ::athena_test::tests::









