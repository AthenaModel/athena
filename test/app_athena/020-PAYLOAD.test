# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-payload.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) PAYLOAD:* order tests.
#
#    This test suite tests the payload-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard payloads

    set P1 {
        iom_id       IOM1
        g            BLUE
        mag          1.0
    }

    set P2 {
        iom_id       IOM2
        g            BRIT
        mag          2.0
    }

    # Setup
    proc setup {} {
        ted create IOM1 IOM2 BLUE BRIT
    }


    # Clean up after a test
    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # PAYLOAD:DELETE
    #
    # Note: normally we'd test the CREATE orders before DELETE; but
    # there's a CREATE order for each flavor of payload.  We'll be
    # testing each flavor's orders together instead, and doing the
    # generic orders up front.

    test DELETE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:DELETE {}
    } -result {
        id {required value}
    }

    test DELETE-1.2 {invalid payload ID: no such IOM} -body {
        ted order -reject PAYLOAD:DELETE id {NONESUCH 1}
    } -result {
        id {Invalid IOM, none are defined}
    }

    test DELETE-1.3 {invalid payload ID: no such payload num} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:DELETE id {IOM1 NONESUCH}
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }


    test DELETE-2.1 {Effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
    } -body {
        ted notifier bind ::rdb <payloads>
        ted order PAYLOAD:DELETE id {IOM1 1}
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> delete {IOM1 1}}
    }


    test DELETE-3.1 {Undo effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
        ted order PAYLOAD:DELETE id {IOM1 1}
    } -body {
        ted notifier bind ::rdb <payloads>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> update {IOM1 1}}
    }


    #-------------------------------------------------------------------
    # PAYLOAD:STATE

    test STATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:STATE {}
    } -result {
        id {required value}
        state {required value}
    }

    
    test STATE-1.2 {unknown payload id} -body {
        ted order -reject PAYLOAD:STATE id {NONESUCH 1} state disabled
    } -result {
        id {Invalid IOM, none are defined}
    }


    test STATE-2.1 {Effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
    } -body {
        ted notifier bind ::rdb <payloads>
        ted order PAYLOAD:STATE id {IOM1 1} state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> update {IOM1 1}}
    }


    test STATE-3.1 {Undo effects} -setup {
        setup
        ted order PAYLOAD:COOP:CREATE $P1
        ted order PAYLOAD:STATE id {IOM1 1} state disabled
    } -body {
        ted notifier bind ::rdb <payloads>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> update {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






