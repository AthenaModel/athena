# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-BSYS.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) BSYS:* order tests.
#
#    This test suite tests the belief-system-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard Topics
    set T1 {
        name     "Topic #1"
        affinity yes
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # BSYS:PLAYBOX:UPDATE

    test PLAYBOX:UPDATE-1.1 {required parms} -body {
        ted order -reject BSYS:PLAYBOX:UPDATE {}
    } -result {
        gamma {required value}
    }

    
    test PLAYBOX:UPDATE-1.2 {invalid gamma} -body {
        ted order -reject BSYS:PLAYBOX:UPDATE gamma NONESUCH
    } -cleanup {
        cleanup
    } -result {
        gamma {invalid value "NONESUCH", should be a real number no less than 0.0}
    }


    test PLAYBOX:UPDATE-2.1 {gamma is updated} -body {
        ted order BSYS:PLAYBOX:UPDATE gamma 0.25

        bsys playbox get
    } -cleanup {
        cleanup
    } -result {gamma 0.25}

    test PLAYBOX:UPDATE-2.2 {playbox is updated} -body {
        ted notifier bind ::bsys <playbox>
        ted order BSYS:PLAYBOX:UPDATE gamma 0.25
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <playbox> update {}}
    }


    test PLAYBOX:UPDATE-3.1 {undo effects} -setup {
        ted order BSYS:PLAYBOX:UPDATE gamma 0.25
    } -body {
        ted notifier bind ::bsys <playbox>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <playbox> update {}}
    }

    #-------------------------------------------------------------------
    # BSYS:SYSTEM:ADD

    test SYSTEM:ADD-1.1 {non-integer ID specified} -body {
        ted order -reject BSYS:SYSTEM:ADD sid NONESUCH
    } -cleanup {
        cleanup
    } -result {
        sid {invalid value "NONESUCH", expected integer}
    }

    test SYSTEM:ADD-1.2 {existing ID specified} -body {
        ted order -reject BSYS:SYSTEM:ADD sid 1
    } -cleanup {
        cleanup
    } -result {
        sid {Belief system ID is already in use: "1"}
    }

    test SYSTEM:ADD-2.1 {creates new system, assigning ID} -body {
        set sid [ted order BSYS:SYSTEM:ADD {}]
        ted pdicts [bsys system get $sid]
    } -cleanup {
        cleanup
    } -match dict -result {
        commonality 1.0
        name        {System 2}
    }

    test SYSTEM:ADD-2.2 {creates new system with ID} -body {
        set sid [ted order BSYS:SYSTEM:ADD sid 5]
    } -cleanup {
        cleanup
    } -result {5}

    test SYSTEM:ADD-2.3 {notifications} -body {
        ted notifier bind ::bsys <system>
        ted order BSYS:SYSTEM:ADD {}
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <system> add 2}
        {::bsys <system> delete 2}
    }

    #-------------------------------------------------------------------
    # BSYS:SYSTEM:UPDATE

    test SYSTEM:UPDATE-1.1 {required parms} -body {
        ted order -reject BSYS:SYSTEM:UPDATE {}
    } -result {
        sid {required value}
    }
  
    test SYSTEM:UPDATE-1.2 {invalid system} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
    } -body {
        ted order -reject BSYS:SYSTEM:UPDATE sid NONESUCH commonality 0.5
    } -cleanup {
        cleanup
    } -result {
        sid {Invalid belief system ID}
    }

    test SYSTEM:UPDATE-1.3 {invalid name} -setup {
        ted order BSYS:SYSTEM:ADD sid 2
    } -body {
        ted order -reject BSYS:SYSTEM:UPDATE sid 2 \
            name [bsys system cget 1 -name]
    } -cleanup {
        cleanup
    } -result {
        name {name is in use by another system: "Neutral"}
    }

    test SYSTEM:UPDATE-1.4 {invalid commonality} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
    } -body {
        ted order -reject BSYS:SYSTEM:UPDATE sid $sid commonality NONESUCH
    } -cleanup {
        cleanup
    } -result {
        commonality {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }

    test SYSTEM:UPDATE-2.1 {system is updated} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
    } -body {
        ted order BSYS:SYSTEM:UPDATE sid $sid \
            name        FRED  \
            commonality 0.5

        ted pdicts [bsys system get $sid]
    } -cleanup {
        cleanup
    } -match dict -result {
        commonality 0.5
        name        FRED
    }

    test SYSTEM:UPDATE-2.2 {notifications} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
    } -body {
        ted notifier bind ::bsys <system>
        ted order BSYS:SYSTEM:UPDATE sid $sid \
            name        FRED  \
            commonality 0.5
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <system> update 2}
        {::bsys <system> update 2}
    }

    test SYSTEM:UPDATE-2.3 {can rename with same name} -setup {
        ted order BSYS:SYSTEM:ADD sid 2
    } -body {
        ted order BSYS:SYSTEM:UPDATE sid 2 \
            name [bsys system cget 2 -name]
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # BSYS:SYSTEM:DELETE

    test SYSTEM:DELETE-1.1 {required parms} -body {
        ted order -reject BSYS:SYSTEM:DELETE {}
    } -result {
        sid {required value}
    }

    test SYSTEM:DELETE-1.2 {invalid system} -body {
        ted order -reject BSYS:SYSTEM:DELETE sid 2
    } -result {
        sid {Invalid belief system ID}
    }

    test SYSTEM:DELETE-1.3 {uneditable system} -body {
        ted order -reject BSYS:SYSTEM:DELETE sid 1
    } -result {
        sid {The Neutral belief system cannot be modified.}
    }

    test SYSTEM:DELETE-1.4 {can't delete if in use by actor} -setup {
        ted create JOE
        ted order BSYS:SYSTEM:ADD sid 2
        actor mutate update {a JOE bsid 2}
    } -body {
        ted order -reject BSYS:SYSTEM:DELETE sid 2
    } -cleanup {
        cleanup
    } -result {
        sid {System is in use by an actor or group: "2"}
    }

    test SYSTEM:DELETE-1.5 {can't delete if in use by group} -setup {
        ted create SHIA
        ted order BSYS:SYSTEM:ADD sid 2
        civgroup mutate update {g SHIA bsid 2}
    } -body {
        ted order -reject BSYS:SYSTEM:DELETE sid 2
    } -cleanup {
        cleanup
    } -result {
        sid {System is in use by an actor or group: "2"}
    }


    test SYSTEM:DELETE-2.1 {deletes system} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
    } -body {
        ted order BSYS:SYSTEM:DELETE sid $sid
        bsys system ids
    } -cleanup {
        cleanup
    } -result {1}

    test SYSTEM:DELETE-2.2 {notifications} -body {
        ted notifier bind ::bsys <system>
        ted order BSYS:SYSTEM:ADD {}
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <system> add 2}
        {::bsys <system> delete 2}
    }


    #-------------------------------------------------------------------
    # BSYS:TOPIC:ADD

    test TOPIC:ADD-1.1 {non-integer ID specified} -body {
        ted order -reject BSYS:TOPIC:ADD tid NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tid {invalid value "NONESUCH", expected integer}
    }

    test TOPIC:ADD-1.2 {existing ID specified} -setup {
        bsys topic add 1
    } -body {
        ted order -reject BSYS:TOPIC:ADD tid 1
    } -cleanup {
        cleanup
    } -result {
        tid {Topic ID is already in use: "1"}
    }

    test TOPIC:ADD-2.1 {creates topic, assigning ID} -body {
        set tid [ted order BSYS:TOPIC:ADD]

        ted pdicts [bsys topic view $tid]
    } -cleanup {
        cleanup
    } -match dict -result {
        affinity  1
        aflag     Yes
        name      {Topic 1}
        relevance 1.00
        tid       1
    }

    test TOPIC:ADD-2.2 {creates topic given ID} -body {
        set tid [ted order BSYS:TOPIC:ADD tid 5]

        ted pdicts [bsys topic view $tid]
    } -cleanup {
        cleanup
    } -match dict -result {
        affinity  1
        aflag     Yes
        name      {Topic 5}
        relevance 1.00
        tid       5
    }


    test TOPIC:ADD-2.3 {effects} -body {
        ted notifier bind ::bsys <topic>
        ted order BSYS:TOPIC:ADD
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <topic> add 1}
        {::bsys <topic> delete 1}
    }

    #-------------------------------------------------------------------
    # BSYS:TOPIC:DELETE

    test TOPIC:DELETE-1.1 {required parms} -body {
        ted order -reject BSYS:TOPIC:DELETE {}
    } -result {
        tid {required value}
    }
    

    test TOPIC:DELETE-1.2 {unknown topic} -body {
        ted order -reject BSYS:TOPIC:DELETE tid NONESUCH
    } -result {
        tid {Invalid topic ID}
    }

    test TOPIC:DELETE-1.3 {can't delete if in use by a hook} -setup {
        ted create JOE
        ted order BSYS:TOPIC:ADD tid 1
        hook mutate create {
            hook_id H1
            longname H1
            narrative H1
        }
        hook mutate topic create {
            hook_id H1
            topic_id 1
            position 0.0
        }
    } -body {
        ted order -reject BSYS:TOPIC:DELETE tid 1
    } -cleanup {
        cleanup
    } -result {
        tid {Topic is in use by a semantic hook: "1"}
    }


    test TOPIC:DELETE-2.1 {Effects} -setup {
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted notifier bind ::bsys <topic>
        ted order BSYS:TOPIC:DELETE tid $tid
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <topic> delete 1}
        {::bsys <topic> add 1}
    }

    #-------------------------------------------------------------------
    # BSYS:TOPIC:UPDATE

    test TOPIC:UPDATE-1.1 {required parms} -body {
        ted order -reject BSYS:TOPIC:UPDATE {}
    } -result {
        tid {required value}
    }

    
    test TOPIC:UPDATE-1.2 {invalid topic} -setup {
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order -reject BSYS:TOPIC:UPDATE tid NONESUCH name "New Title"
    } -cleanup {
        cleanup
    } -result {
        tid {Invalid topic ID}
    }

    test TOPIC:UPDATE-1.3 {invalid name} -setup {
        ted order BSYS:TOPIC:ADD tid 1
        ted order BSYS:TOPIC:ADD tid 2
    } -body {
        ted order -reject BSYS:TOPIC:UPDATE tid 2 \
            name [bsys topic cget 1 -name]
    } -cleanup {
        cleanup
    } -result {
        name {name is in use by another topic: "Topic 1"}
    }


    test TOPIC:UPDATE-1.4 {invalid affinity} -setup {
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order -reject BSYS:TOPIC:UPDATE tid $tid affinity NONESUCH
    } -cleanup {
        cleanup
    } -result {
        affinity {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test TOPIC:UPDATE-2.1 {topic is updated} -setup {
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order BSYS:TOPIC:UPDATE \
            tid $tid name "New Title" affinity no

        ted pdicts [bsys topic get $tid]
    } -cleanup {
        cleanup
    } -result {
        affinity  0
        name      {New Title}
        relevance 1.0
    }

    test TOPIC:UPDATE-2.3 {notifications} -setup {
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted notifier bind ::bsys <topic>
        ted order BSYS:TOPIC:UPDATE \
            tid $tid name "New Title" affinity no
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <topic> update 1}
        {::bsys <topic> update 1}
    }

    test TOPIC:UPDATE-2.3 {can rename with same name} -setup {
        ted order BSYS:TOPIC:ADD tid 1
    } -body {
        ted order BSYS:TOPIC:UPDATE tid 1 \
            name [bsys topic cget 1 -name]
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # BSYS:BELIEF:UPDATE

    test BELIEF:UPDATE-1.1 {required parms} -body {
        ted order -reject BSYS:BELIEF:UPDATE {}
    } -result {
        bid {required value}
    }

    test BELIEF:UPDATE-1.2 {invalid belief: system} -body {
        ted order -reject BSYS:BELIEF:UPDATE \
            bid {NONESUCH NONESUCH} position 0.5 emphasis 0.7
    } -cleanup {
        cleanup
    } -result {
        bid {Invalid belief system ID}
    }

    test BELIEF:UPDATE-1.3 {invalid belief: topic} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
    } -body {
        ted order -reject BSYS:BELIEF:UPDATE \
            bid [list $sid NONESUCH] position 0.5 emphasis 0.7
    } -cleanup {
        cleanup
    } -result {
        bid {Invalid topic ID}
    }

    test BELIEF:UPDATE-1.4 {invalid position} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order -reject BSYS:BELIEF:UPDATE \
            bid [list $sid $tid] position NONESUCH
    } -cleanup {
        cleanup
    } -result {
        position {invalid value "NONESUCH", should be a real number in range -1.0, 1.0, or one of: P+, S+, W+, A, W-, S-, P-}
    }

    test BELIEF:UPDATE-1.5 {invalid emphasis} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order -reject BSYS:BELIEF:UPDATE \
            bid [list $sid $tid] emphasis NONESUCH
    } -cleanup {
        cleanup
    } -result {
        emphasis {invalid value "NONESUCH", should be a real number in range 0.0, 1.0, or one of: ASTRONG, AWEAK, NEITHER, DWEAK, DSTRONG, DEXTREME}
    }

    test BELIEF:UPDATE-2.1 {belief is updated} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order BSYS:BELIEF:UPDATE \
            bid [list $sid $tid] position 0.1 emphasis 0.2

        ted pdicts [bsys belief get $sid $tid]
    } -cleanup {
        cleanup
    } -match dict -result {
        emphasis 0.2
        position 0.1
    }

    test BELIEF:UPDATE-2.2 {symbols are OK} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted order BSYS:BELIEF:UPDATE \
            bid [list $sid $tid] position P- emphasis ASTRONG

        ted pdicts [bsys belief get $sid $tid]
    } -cleanup {
        cleanup
    } -result {
        emphasis 0.9
        position -0.9
    }

    test BELIEF:UPDATE-2.3 {notifications} -setup {
        set sid [ted order BSYS:SYSTEM:ADD {}]
        set tid [ted order BSYS:TOPIC:ADD]
    } -body {
        ted notifier bind ::bsys <belief>
        ted order BSYS:BELIEF:UPDATE \
            bid [list $sid $tid] position 0.1 emphasis 0.2
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::bsys <belief> update {2 1}}
        {::bsys <belief> update {2 1}}
    }
    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







