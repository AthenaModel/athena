# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_fundeni.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_fundeni(sim) tests.
#
#    This test suite tests the tactic::FUNDENI ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD NO_ONE

        demog start
        rdb eval {
            UPDATE demog_g SET population=10000 WHERE g='SHIA';
            UPDATE demog_g SET population=20000 WHERE g='SUNN';
            UPDATE demog_g SET population=40000 WHERE g='KURD';

            INSERT INTO influence_na(n,a,influence)
            VALUES('NB1','JOE',0.5);
            INSERT INTO influence_na(n,a,influence)
            VALUES('NB2','JOE',0.5);
        }

        service start
        service_eni load
        service_eni save
        cash load

        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 FUNDENI]
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        variable coffer
        $coffer destroy
        ted cleanup
    }

       


    #-------------------------------------------------------------------
    # constructor
    
    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        cmode      CAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule {}}
        id         *
        los        100.0
        mode       ALL
        name       T*
        parent     *
        percent    0.0
        pot        *::pot
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::FUNDENI new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Use remaining cash on hand to fund Essential Non-Infrastructure services for group ???. The amount spent will be capped at 100.0% of the saturation LOS.}

    test narrative-1.2 {narrative, three groups} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Use remaining cash on hand to fund Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD). The amount spent will be capped at 100.0% of the saturation LOS.}

    test narrative-1.3 {narrative, mode EXACT} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXACT
        $T1 set amount 10000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Fund exactly $10,000 worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD). The amount spent will be capped at 100.0% of the saturation LOS.}

    test narrative-1.4 {narrative, mode PERCENT} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode PERCENT
        $T1 set percent 10
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Fund 10.0% of cash-on-hand worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD). The amount spent will be capped at 100.0% of the saturation LOS.}

    test narrative-1.5 {narrative, mode UPTO} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode UPTO
        $T1 set amount 20000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Fund up to $20,000 worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD). The amount spent will be capped at 100.0% of the saturation LOS.}

    test narrative-1.6 {narrative, mode EXCESS} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXCESS
        $T1 set amount 50000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Fund with anything in excess of $50,000 worth of Essential Non-Infrastructure services for these groups (SHIA, SUNN, KURD). The amount spent will be capped at 100.0% of the saturation LOS.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails}  -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {glist {No rule specified}}

    test check-1.2 {check: g in glist no longer exist} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        rdb eval {DELETE FROM civgroups WHERE g='SUNN'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {glist {Invalid civilian group, should be one of: SHIA, KURD, NO_ONE}}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {mode ALL} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9100.0}

    test obligate-1.2 {mode ALL, UNCAPPED} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set cmode UNCAPPED
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.3 {mode EXACT, enough money} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXACT
        $T1 set amount 5000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9100.0}

    test obligate-1.4 {mode EXACT UNCAPPED, enough money} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXACT
        $T1 set cmode UNCAPPED
        $T1 set amount 5000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 5000.0}

    test obligate-1.5 {mode EXACT, UNCAPPED, not enough money} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXACT
        $T1 set cmode UNCAPPED
        $T1 set amount 50000.0
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $50,000, but had only $10,000.}}

    test obligate-1.6 {mode PERCENT} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode PERCENT
        $T1 set percent 5
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9500.0}

    test obligate-1.7 {mode PERCENT UNCAPPED} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode PERCENT
        $T1 set cmode UNCAPPED
        $T1 set percent 10
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9000.0}

    test obligate-1.8 {mode UPTO, under cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode UPTO
        $T1 set amount 500.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9500.0}

    test obligate-1.9 {mode UPTO UNCAPPED, under cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode UPTO
        $T1 set cmode UNCAPPED
        $T1 set amount 1000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9000.0}

    test obligate-1.10 {mode UPTO, over cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode UPTO
        $T1 set amount 50000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9100.0}

    test obligate-1.11 {mode UPTO UNCAPPED, over cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode UPTO
        $T1 set cmode UNCAPPED
        $T1 set amount 50000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.12 {mode EXCESS, under cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXCESS
        $T1 set amount 9000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9100.0}

    test obligate-1.13 {mode EXCESS UNCAPPED, under cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXCESS
        $T1 set cmode UNCAPPED
        $T1 set amount 1000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 1000.0}

    test obligate-1.14 {mode EXCESS, over cash on hand} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 set mode EXCESS
        $T1 set amount 50000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 10000.0}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: succeeds} -setup {
        setup
        $T1 set glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand gifts 
--- ------------ ------- ------------ ----- 
JOE 200000.0     10000.0 9100.0       0.0   
BOB 150000.0     5000.0  5000.0       0.0   
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





