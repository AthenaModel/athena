# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    CONDITION:* orders tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create SHIA
        variable S1
        variable B1
        variable C1
        ted order STRATEGY:BLOCK:ADD agent SYSTEM
        set S1 [tdb strategy getname SYSTEM]
        lassign [$S1 blocks] B1
        ted order BLOCK:CONDITION:ADD block_id [$B1 id] typename EXPR
        lassign [$B1 conditions] C1
        $C1 update_ {expression} {expression {1 == 1}}
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # CONDITION:STATE

    test CONDITION:STATE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject CONDITION:STATE
    } -cleanup {
        cleanup
    } -result {
        condition_id {required value}
        state {required value}
    }

    test CONDITION:STATE-1.2 {unknown condition_id} -setup {
        setup
    } -body {
        ted order -reject CONDITION:STATE condition_id NONESUCH state normal
    } -cleanup {
        cleanup
    } -match glob -result {
        condition_id {Invalid condition ID: "NONESUCH"}
    }

    test CONDITION:STATE-1.3 {invalid state} -setup {
        setup
    } -body {
        ted order -reject CONDITION:STATE condition_id [$C1 id] state NONESUCH
    } -cleanup {
        cleanup
    } -result {
        state {invalid value "nonesuch", should be one of: normal, disabled, invalid}
    }

    test CONDITION:STATE-2.1 {block updated} -setup {
        setup
    } -body {
        ted order CONDITION:STATE condition_id [$C1 id] state disabled

        $C1 state
    } -cleanup {
        cleanup
    } -result {disabled}

    test CONDITION:STATE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order CONDITION:STATE condition_id [$C1 id] state disabled
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test CONDITION:STATE-2.3 {undo notifier event} -setup {
        setup
        ted order CONDITION:STATE condition_id [$C1 id] state disabled
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        adb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





