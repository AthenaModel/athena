# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-FLOW.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:FLOW:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create NB1 NB2 SUNN SHIA KURD
        variable B1
        variable T1

        set B1 [ted addblock SYSTEM]
        set T1 [ted addtactic $B1 FLOW]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:FLOW

    test TACTIC:FLOW-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:FLOW-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid FLOW ID: "NONESUCH"}
    }

    test TACTIC:FLOW-1.3 {invalid f} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] f "NONE SUCH"
    } -cleanup {
        cleanup
    } -result {
        f {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:FLOW-1.4 {invalid g} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] g "NONE SUCH"
    } -cleanup {
        cleanup
    } -result {
        g {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:FLOW-1.5 {invalid mode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] mode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "NONESUCH", should be one of: ALL, RATE, UPTO, ALLBUT}
    }

    test TACTIC:FLOW-1.6 {invalid personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:FLOW-1.7 {invalid percent} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] percent NONESUCH
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "NONESUCH", expected double}
    }

    test TACTIC:FLOW-1.8 {0 personnel in tactic} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] mode UPTO
    } -cleanup {
        cleanup
    } -result {
        personnel {Mode requires personnel greater than 0.}
    }

    test TACTIC:FLOW-1.9 {0.0 percentage in tactic} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FLOW tactic_id [$T1 id] mode RATE
    } -cleanup {
        cleanup
    } -result {
        percent {Mode requires a percentage rate greater than 0.0%.}
    }

    test TACTIC:FLOW-2.1 {tactic updated} -setup {
        setup
    } -body {
        ted order TACTIC:FLOW \
            tactic_id [$T1 id]         \
            f         SHIA             \
            g         KURD             \
            mode      UPTO             \
            personnel 1000             \
            percent   5.0

        ted sortdict [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        f          SHIA
        faildict   {}
        g          KURD
        id         *
        mode       UPTO
        parent     ::bean::block*
        percent    5.0
        personnel  1000
        state      normal
    }

    test TACTIC:FLOW-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:FLOW tactic_id [$T1 id] personnel 100
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:FLOW-2.3 {undo notifier event} -setup {
        setup
        ted order TACTIC:FLOW tactic_id [$T1 id] personnel 100
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test TACTIC:FLOW-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







