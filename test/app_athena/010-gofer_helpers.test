# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer_helpers.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    civgroup(sim) tests.
#
#    This test suite tests the gofer helper commands.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.
namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2 JOE BOB BLUE BRIT TAL SHIA SUNN KURD
    }

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }

    #-------------------------------------------------------------------
    # anyall_alist

    test anyall_alist-1.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::anyall_alist validate {anyall any alist {JOE BOB}}
    } -cleanup {
        cleanup
    } -result {anyall ANY alist {JOE BOB}}

    test anyall_alist-1.2 {validate, invalid anyall} -setup {
        setup
    } -body {
        ::gofer::anyall_alist validate {anyall NONESUCH alist JOE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {invalid value "NONESUCH", should be one of: ANY, ALL}

    test anyall_alist-1.3 {validate, invalid alist} -setup {
        setup
    } -body {
        ::gofer::anyall_alist validate {anyall ANY alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor*}

    test anyall_alist-2.1 {narrative, one actor} -body {
        ::gofer::anyall_alist narrative {anyall ANY alist JOE}
    } -result {actor JOE}

    test anyall_alist-2.2 {narrative, any, several actors} -body {
        ::gofer::anyall_alist narrative {
            anyall ANY
            alist {JOE BOB}
        }
    } -result {any of these actors (JOE, BOB)}
    
    test anyall_alist-2.3 {narrative, all, several actors} -body {
        ::gofer::anyall_alist narrative {
            anyall ALL
            alist {JOE BOB}
        }
    } -result {all of these actors (JOE, BOB)}

    test anyall_alist-2.4 {narrative, -brief} -body {
        ::gofer::anyall_alist narrative {
            anyall ANY
            alist {A B C D E F G H I J}
        } -brief
    } -result {any of these actors (A, B, C, D, E, F, G, H, ...)}

    proc setup_anyall_alist_SupportingActor {} {
        setup
        foreach {g a support} {
            SHIA BOB 0.3
            SHIA JOE 0.3
            SUNN BOB 0.0
            SUNN JOE 0.3
            BLUE BOB 0.3
            BLUE JOE 0.0
            BRIT BOB 0.0
            BRIT JOE 0.0
            TAL  BOB 0.0
        } {
            rdb eval {
                INSERT INTO support_nga(n,g,a,support)
                VALUES('NB1',$g,$a,$support)
            }
        }
    }

    test anyall_alist-3.1 {supportingActor, one actor} -setup {
        setup_anyall_alist_SupportingActor
    } -body {
        ::gofer::anyall_alist supportingActor "" {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {BLUE SHIA}

    test anyall_alist-3.2 {supportingActor, any of several actors} -setup {
        setup_anyall_alist_SupportingActor
    } -body {
        ::gofer::anyall_alist supportingActor "" {anyall ANY alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {BLUE SHIA SUNN}

    test anyall_alist-3.3 {supportingActor, all of several actors} -setup {
        setup_anyall_alist_SupportingActor
    } -body {
        ::gofer::anyall_alist supportingActor "" {anyall ALL alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {SHIA}

    test anyall_alist-3.4 {supportingActor, by group type} -setup {
        setup_anyall_alist_SupportingActor
    } -body {
        ::gofer::anyall_alist supportingActor CIV {anyall ANY alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}


    proc setup_anyall_alist_LikingActor {} {
        setup
        ted lock
        foreach {g a vrel} {
            SHIA BOB 0.3
            SHIA JOE 0.3
            SUNN BOB 0.0
            SUNN JOE 0.3
            BLUE BOB 0.3
            BLUE JOE 0.0
            BRIT BOB 0.0
            BRIT JOE 0.0
            TAL  BOB 0.0
        } {
            aram vrel bset 1 $g $a $vrel
        }
        ted step
    }

    test anyall_alist-4.1 {likingActor, one actor} -setup {
        setup_anyall_alist_LikingActor
    } -body {
        ::gofer::anyall_alist likingActor "" {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {BLUE SHIA}

    test anyall_alist-4.2 {likingActor, any of several actors} -setup {
        setup_anyall_alist_LikingActor
    } -body {
        ::gofer::anyall_alist likingActor "" {anyall ANY alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {BLUE SHIA SUNN}

    test anyall_alist-4.3 {likingActor, all of several actors} -setup {
        setup_anyall_alist_LikingActor
    } -body {
        ::gofer::anyall_alist likingActor "" {anyall ALL alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {SHIA}

    test anyall_alist-4.4 {likingActor, by group type} -setup {
        setup_anyall_alist_LikingActor
    } -body {
        ::gofer::anyall_alist likingActor CIV {anyall ANY alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    proc setup_anyall_alist_DislikingActor {} {
        setup
        ted lock
        foreach {g a vrel} {
            SHIA BOB -0.3
            SHIA JOE -0.3
            SUNN BOB  0.0
            SUNN JOE -0.3
            BLUE BOB -0.3
            BLUE JOE  0.0
            BRIT BOB  0.0
            BRIT JOE  0.0
        } {
            aram vrel bset 1 $g $a $vrel
        }
        ted step
    }

    test anyall_alist-5.1 {dislikingActor, one actor} -setup {
        setup_anyall_alist_DislikingActor
    } -body {
        ::gofer::anyall_alist dislikingActor "" {anyall ANY alist BOB}
    } -cleanup {
        cleanup
    } -result {BLUE SHIA}

    test anyall_alist-5.2 {dislikingActor, any of several actors} -setup {
        setup_anyall_alist_DislikingActor
    } -body {
        ::gofer::anyall_alist dislikingActor "" {anyall ANY alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {BLUE SHIA SUNN}

    test anyall_alist-5.3 {dislikingActor, all of several actors} -setup {
        setup_anyall_alist_DislikingActor
    } -body {
        ::gofer::anyall_alist dislikingActor "" {anyall ALL alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {SHIA}

    test anyall_alist-5.4 {dislikingActor, by group type} -setup {
        setup_anyall_alist_DislikingActor
    } -body {
        ::gofer::anyall_alist dislikingActor CIV {anyall ANY alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {SHIA SUNN}

    #-------------------------------------------------------------------
    # anyall_glist

    test anyall_glist-1.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::anyall_glist validate {anyall any glist {SHIA SUNN}}
    } -cleanup {
        cleanup
    } -result {anyall ANY glist {SHIA SUNN}}

    test anyall_glist-1.2 {validate, invalid anyall} -setup {
        setup
    } -body {
        ::gofer::anyall_glist validate {anyall NONESUCH glist SHIA}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {invalid value "NONESUCH", should be one of: ANY, ALL}

    test anyall_glist-1.3 {validate, invalid glist} -setup {
        setup
    } -body {
        ::gofer::anyall_glist validate {anyall ANY glist {SHIA NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group*}

    test anyall_glist-1.4 {validate, invalid glist given type} -setup {
        setup
    } -body {
        ::gofer::anyall_glist validate {anyall ANY glist {SHIA BLUE}} frcgroup
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force group*}


    test anyall_glist-2.1 {narrative, one group} -body {
        ::gofer::anyall_glist narrative {anyall ANY glist SHIA}
    } -result {group SHIA}

    test anyall_glist-2.2 {narrative, any, several groups} -body {
        ::gofer::anyall_glist narrative {
            anyall ANY
            glist {SHIA SUNN}
        }
    } -result {any of these groups (SHIA, SUNN)}
    
    test anyall_glist-2.3 {narrative, all, several groups} -body {
        ::gofer::anyall_glist narrative {
            anyall ALL
            glist {SHIA SUNN}
        }
    } -result {all of these groups (SHIA, SUNN)}

    test anyall_glist-2.4 {narrative, -brief} -body {
        ::gofer::anyall_glist narrative {
            anyall ANY
            glist {A B C D E F G H I J}
        } -brief
    } -result {any of these groups (A, B, C, D, E, F, G, H, ...)}

    proc setupLikingGroup {} {
        setup
        ted lock
        aram hrel bset 1 SHIA KURD  0.3
        aram hrel bset 1 SHIA SUNN  0.3
        aram hrel bset 1 SUNN KURD  0.0
        aram hrel bset 1 SUNN SHIA  0.3
        aram hrel bset 1 BLUE KURD  0.3
        aram hrel bset 1 BLUE SHIA  0.0
        aram hrel bset 1 BRIT KURD  0.3
        aram hrel bset 1 BRIT SHIA  0.3

        ted step
    }

    test anyall_glist-3.1 {likingGroup, one group} -setup {
        setupLikingGroup
    } -body {
        ::gofer::anyall_glist likingGroup "" {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT KURD SHIA}

    test anyall_glist-3.2 {likingGroup, any of several groups} -setup {
        setupLikingGroup
    } -body {
        ::gofer::anyall_glist likingGroup "" {anyall ANY glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT KURD SHIA SUNN}

    test anyall_glist-3.3 {likingGroup, all of several actors} -setup {
        setupLikingGroup
    } -body {
        ::gofer::anyall_glist likingGroup "" {anyall ALL glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BRIT SHIA}

    test anyall_glist-3.4 {likingGroup, by group type} -setup {
        setupLikingGroup
    } -body {
        ::gofer::anyall_glist likingGroup CIV {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {KURD SHIA}

    proc setupDislikingGroup {} {
        setup
        ted lock
        aram hrel bset 1 SHIA KURD -0.3
        aram hrel bset 1 SHIA SUNN -0.3
        aram hrel bset 1 SUNN KURD  0.0
        aram hrel bset 1 SUNN SHIA -0.3
        aram hrel bset 1 BLUE KURD -0.3
        aram hrel bset 1 BLUE SHIA  0.0
        aram hrel bset 1 BRIT KURD -0.3
        aram hrel bset 1 BRIT SHIA -0.3

        ted step
    }

    test anyall_glist-4.1 {dislikingGroup, one group} -setup {
        setupDislikingGroup
    } -body {
        ::gofer::anyall_glist dislikingGroup "" {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT SHIA}

    test anyall_glist-4.2 {dislikingGroup, any of several groups} -setup {
        setupDislikingGroup
    } -body {
        ::gofer::anyall_glist dislikingGroup "" {anyall ANY glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT SHIA SUNN}

    test anyall_glist-4.3 {dislikingGroup, all of several actors} -setup {
        setupDislikingGroup
    } -body {
        ::gofer::anyall_glist dislikingGroup "" {anyall ALL glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BRIT}

    test anyall_glist-4.4 {dislikingGroup, by group type} -setup {
        setupDislikingGroup
    } -body {
        ::gofer::anyall_glist dislikingGroup CIV {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {SHIA}

    proc setupLikedByGroup {} {
        setup
        ted lock
        aram hrel bset 1 KURD BLUE  0.3
        aram hrel bset 1 KURD BRIT  0.3
        aram hrel bset 1 KURD SHIA  0.3
        aram hrel bset 1 KURD SUNN  0.0
        aram hrel bset 1 SHIA BLUE  0.0
        aram hrel bset 1 SHIA BRIT  0.3
        aram hrel bset 1 SHIA KURD  0.0
        aram hrel bset 1 SHIA SUNN  0.3

        ted step
    }

    test anyall_glist-5.1 {likedByGroup, one group} -setup {
        setupLikedByGroup
    } -body {
        ::gofer::anyall_glist likedByGroup "" {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT KURD SHIA}

    test anyall_glist-5.2 {likedByGroup, any of several groups} -setup {
        setupLikedByGroup
    } -body {
        ::gofer::anyall_glist likedByGroup "" {anyall ANY glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT KURD SHIA SUNN}

    test anyall_glist-5.3 {likedByGroup, all of several actors} -setup {
        setupLikedByGroup
    } -body {
        ::gofer::anyall_glist likedByGroup "" {anyall ALL glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BRIT SHIA}

    test anyall_glist-5.4 {likedByGroup, by group type} -setup {
        setupLikedByGroup
    } -body {
        ::gofer::anyall_glist likedByGroup CIV {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {KURD SHIA}

    proc setupDislikedByGroup {} {
        setup
        ted lock
        aram hrel bset 1 KURD BLUE -0.3
        aram hrel bset 1 KURD BRIT -0.3
        aram hrel bset 1 KURD SHIA -0.3
        aram hrel bset 1 KURD SUNN  0.0
        aram hrel bset 1 SHIA BLUE  0.0
        aram hrel bset 1 SHIA BRIT -0.3
        aram hrel bset 1 SHIA KURD  0.0
        aram hrel bset 1 SHIA SUNN -0.3

        ted step
    }

    test anyall_glist-6.1 {dislikedByGroup, one group} -setup {
        setupDislikedByGroup
    } -body {
        ::gofer::anyall_glist dislikedByGroup "" {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT SHIA}

    test anyall_glist-6.2 {dislikedByGroup, any of several groups} -setup {
        setupDislikedByGroup
    } -body {
        ::gofer::anyall_glist dislikedByGroup "" {anyall ANY glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT SHIA SUNN}

    test anyall_glist-6.3 {dislikedByGroup, all of several actors} -setup {
        setupDislikedByGroup
    } -body {
        ::gofer::anyall_glist dislikedByGroup "" {anyall ALL glist {KURD SHIA}}
    } -cleanup {
        cleanup
    } -result {BRIT}

    test anyall_glist-6.4 {dislikedByGroup, by group type} -setup {
        setupDislikedByGroup
    } -body {
        ::gofer::anyall_glist dislikedByGroup CIV {anyall ANY glist KURD}
    } -cleanup {
        cleanup
    } -result {SHIA}
    
    #-------------------------------------------------------------------
    # anyall_nlist

    test anyall_nlist-1.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::anyall_nlist validate {anyall any nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {anyall ANY nlist {NB1 NB2}}

    test anyall_nlist-1.2 {validate, invalid anyall} -setup {
        setup
    } -body {
        ::gofer::anyall_nlist validate {anyall NONESUCH nlist NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {invalid value "NONESUCH", should be one of: ANY, ALL}

    test anyall_nlist-1.3 {validate, invalid nlist} -setup {
        setup
    } -body {
        ::gofer::anyall_nlist validate {anyall ANY nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood*}

    test anyall_nlist-2.1 {narrative, one neighborhood} -body {
        ::gofer::anyall_nlist narrative {anyall ANY nlist NB1}
    } -result {neighborhood NB1}

    test anyall_nlist-2.2 {narrative, any, several neighborhoods} -body {
        ::gofer::anyall_nlist narrative {
            anyall ANY
            nlist {NB1 NB2}
        }
    } -result {any of these neighborhoods (NB1, NB2)}
    
    test anyall_nlist-2.3 {narrative, all, several neighborhoods} -body {
        ::gofer::anyall_nlist narrative {
            anyall ALL
            nlist {NB1 NB2}
        }
    } -result {all of these neighborhoods (NB1, NB2)}

    test anyall_nlist-2.4 {narrative, -brief} -body {
        ::gofer::anyall_nlist narrative {
            anyall ANY
            nlist {A B C D E F G H I J}
        } -brief
    } -result {any of these neighborhoods (A, B, C, D, E, F, G, H, ...)}

    proc setupDeployedTo {} {
        setup
        foreach {n g personnel} {
            NB1 BLUE 1
            NB1 BRIT 1
            NB2 BLUE 1
            NB2 BRIT 0
            NB1 TAL  0
            NB2 TAL  1
        } {
            rdb eval {
                INSERT INTO deploy_ng(n,g,personnel)
                VALUES($n, $g, $personnel)
            }
        }
    }

    test anyall_nlist-3.1 {deployedTo, one neighborhood} -setup {
        setupDeployedTo
    } -body {
        ::gofer::anyall_nlist deployedTo {anyall ANY nlist NB1}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT}

    test anyall_nlist-3.2 {deployedTo, any of several neighborhoods} -setup {
        setupDeployedTo
    } -body {
        ::gofer::anyall_nlist deployedTo {anyall ANY nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT TAL}

    test anyall_nlist-3.3 {deployedTo, all of several neighborhoods} -setup {
        setupDeployedTo
    } -body {
        ::gofer::anyall_nlist deployedTo {anyall ALL nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {BLUE}

    proc setupNotDeployedTo {} {
        setup
        foreach {n g personnel} {
            NB1 BLUE 0
            NB1 BRIT 0
            NB2 BLUE 0
            NB2 BRIT 1
            NB1 TAL  1
            NB2 TAL  0
        } {
            rdb eval {
                INSERT INTO deploy_ng(n,g,personnel)
                VALUES($n, $g, $personnel)
            }
        }
    }

    test anyall_nlist-4.1 {notDeployedTo, one neighborhood} -setup {
        setupNotDeployedTo
    } -body {
        ::gofer::anyall_nlist notDeployedTo {anyall ANY nlist NB1}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT}

    test anyall_nlist-4.2 {notDeployedTo, any of several neighborhoods} -setup {
        setupNotDeployedTo
    } -body {
        ::gofer::anyall_nlist notDeployedTo {anyall ANY nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {BLUE BRIT TAL}

    test anyall_nlist-4.3 {notDeployedTo, all of several neighborhoods} -setup {
        setupNotDeployedTo
    } -body {
        ::gofer::anyall_nlist notDeployedTo {anyall ALL nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {BLUE}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

