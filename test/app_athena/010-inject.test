# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-inject.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    inject(sim) tests.
#
#    This test suite tests the inject(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create BLUE BRIT 

        ted order CURSE:CREATE curse_id C1
        ted order CURSE:CREATE curse_id C2

        # Verify that unused columns contain NULL
        adb sql nullvalue "@"
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        adb sql nullvalue ""
        array unset parms
        ted cleanup
    }

    # Standard injects
    
    set I1 {
        curse_id     C1
        inject_type  COOP 
        mode         transient
        f            @C1
        g            @F1
        mag          1.0
    }

    set I2 {
        curse_id     C2
        inject_type  COOP 
        mode         transient
        f            @C1
        g            @F1
        mag          2.0
    }

    set I3 {
        curse_id     C1
        inject_type  HREL
        mode         transient
        f            @G1
        g            @F1
        mag          1.0
    }

    set I4 {
        curse_id     C1
        inject_type  VREL
        mode         transient
        a            @A1
        g            @G2
        mag          1.0
    }

    set I5 {
        curse_id    C1
        inject_type SAT
        mode        transient
        g           @C1
        c           SFT
        mag         1.0
    }

    set BADI1 {
        curse_id     C1
        inject_type  VREL
        mode         transient
        a            @C1
        g            @F1
        mag          1.0
    }

    set BADI2 {
        curse_id     C1
        inject_type  HREL
        mode         transient
        f            @A1
        g            @F1
        mag          1.0
    }

    set BADI3 {
        curse_id     C1
        inject_type  SAT
        mode         transient
        g            @F1
        mag          1.0
    }

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {inject is created} -setup {
        setup
    } -body {
        tdb inject create $I1
        ted querylist {SELECT * FROM curse_injects}
    } -cleanup {
        cleanup
    } -result {
curse_id     C1
inject_num   1
inject_type  COOP
mode         transient
narrative    Change cooperation of civilians in @C1 with forces in @F1 by 1.0 points (XXXS+).
state        normal
a            @
c            @
f            @C1
g            @F1
mag          1.0
    }

    test create-2.1 {undo deletes the inject} -setup {
        setup
        set undo [tdb inject create $I1]
    } -body {
        namespace eval :: $undo
        adb eval {SELECT * FROM curse_injects}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {inject is deleted} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I2
    } -body {
        tdb inject delete {C1 1}

        adb eval {SELECT curse_id,inject_num FROM curse_injects}
    } -cleanup {
        cleanup
    } -result {C2 1}

    test delete-2.1 {Undo restores inject} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I2
        set undo [tdb inject delete {C1 1}]
    } -body {
        namespace eval :: $undo
        ted querylist {SELECT * FROM curse_injects ORDER BY curse_id,inject_num}
    } -cleanup {
        cleanup
    } -result {
curse_id     C1
inject_num   1
inject_type  COOP
mode         transient
narrative    Change cooperation of civilians in @C1 with forces in @F1 by 1.0 points (XXXS+).
state        normal
a            @
c            @
f            @C1
g            @F1
mag          1.0

curse_id     C2
inject_num   1
inject_type  COOP
mode         transient
narrative    Change cooperation of civilians in @C1 with forces in @F1 by 2.0 points (XS+).
state        normal
a            @
c            @
f            @C1
g            @F1
mag          2.0
    }

    #-------------------------------------------------------------------
    # mutate update

    test update-1.1 {inject is updated} -setup {
        setup
        tdb inject create $I2
    } -body {
        tdb inject update {
            id     {C2 1}
            g      @F1
            mag    3.0
        }

        # This verifies both that requested changes are made, and
        # that NULL columns remain NULL.
        ted querylist {SELECT * FROM curse_injects}
    } -cleanup {
        cleanup
    } -result {
curse_id     C2
inject_num   1
inject_type  COOP
mode         transient
narrative    Change cooperation of civilians in @C1 with forces in @F1 by 3.0 points (S+).
state        normal
a            @
c            @
f            @C1
g            @F1
mag          3.0
    }

    test update-1.2 {empty values are OK} -setup {
        setup
        tdb inject create $I2
    } -body {
        set a [ted query {SELECT * FROM curse_injects}]

        tdb inject update {
            id   {C2 1}
        }

        set b [ted query {SELECT * FROM curse_injects}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        setup
        tdb inject create $I2
    } -body {

        set a [ted query {SELECT * FROM curse_injects}]

        set undo [tdb inject update {
            id     {C2 1}
            g      @F1
            mag    3.0
        }]

        namespace eval :: $undo

        set b [ted query {SELECT * FROM curse_injects}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # mutate state

    test state-1.1 {inject state is changed} -setup {
        setup
        tdb inject create $I2
    } -body {
        tdb inject state {C2 1} disabled

        ted querylist {SELECT * FROM curse_injects}
    } -cleanup {
        cleanup
    } -result {
curse_id     C2
inject_num   1
inject_type  COOP
mode         transient
narrative    Change cooperation of civilians in @C1 with forces in @F1 by 2.0 points (XS+).
state        disabled
a            @
c            @
f            @C1
g            @F1
mag          2.0
    }


    test state-2.1 {undo undoes the change} -setup {
        setup
        tdb inject create $I2
    } -body {

        set a [ted query {SELECT * FROM curse_injects}]

        set undo [tdb inject state {C2 1} disabled]

        namespace eval :: $undo

        set b [ted query {SELECT * FROM curse_injects}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid ID: no such CURSE} -setup {
        setup
    } -body {
        tdb inject validate {NONESUCH 1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid CURSE, should be one of: C1, C2}

    test validate-1.2 {Invalid ID: no curse_injects defined} -setup {
        setup
    } -body {
        tdb inject validate {C1 1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid inject "C1 1", no injects are defined for this CURSE}

    test validate-1.3 {Invalid ID: no such inject} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I2
    } -body {
        tdb inject validate {C1 2}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid inject "C1 2", inject number should be one of: 1}

    test validate-2.1 {Valid name} -setup {
        setup
        tdb inject create $I1
    } -body {
        tdb inject validate {C1 1}
    } -cleanup {
        cleanup
    } -result {C1 1}

    test validate-3.1 {Valid rolenames: SAT} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I3
        tdb inject create $I4
    } -body {
        tdb inject rolenames SAT g C1
    } -cleanup {
        cleanup
    } -result {@G1 @C1 @G2}

    test validate-3.2 {Valid rolenames: COOP} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I3
        tdb inject create $I4
    } -body {
        set a [tdb inject rolenames COOP f C1]
        set b [tdb inject rolenames COOP g C1]
        list $a $b
    } -cleanup {
        cleanup
    } -result {{@G1 @C1 @G2} {@G1 @G2 @F1}}

    test validate-3.3 {Valid rolenames: HREL} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I3
        tdb inject create $I4
    } -body {
        set a [tdb inject rolenames HREL f C1]
        set b [tdb inject rolenames HREL g C1]
        list $a $b
    } -cleanup {
        cleanup
    } -result {{@G1 @C1 @G2 @F1} {@G1 @C1 @G2 @F1}}

    test validate-3.4 {Valid rolenames: VREL} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I3
        tdb inject create $I4
    } -body {
        set a [tdb inject rolenames VREL a C1]
        set b [tdb inject rolenames VREL g C1]
        list $a $b
    } -cleanup {
        cleanup
    } -result {@A1 {@G1 @C1 @G2 @F1}}


    #-------------------------------------------------------------------
    # exists

    test exists-1.1 {no such inject} -setup {
        setup
        tdb inject create $I1
        tdb inject create $I2
    } -body {
        tdb inject exists {C1 2}
    } -cleanup {
        cleanup
    } -result {0}

    test exists-2.1 {Valid inject} -setup {
        setup
        tdb inject create $I1
    } -body {
        tdb inject exists {C1 1}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # get

    proc setup_get {} {
        variable I2
        setup
        tdb inject create $I2
    }

    test get-1.1 {get inject dict} -setup {
        setup_get
    } -body {
        ted pdict [tdb inject get {C2 1}]
    } -cleanup {
        cleanup
    } -result {
        state       normal
        a           @
        c           @
        narrative   {Change cooperation of civilians in @C1 with forces in @F1 by 2.0 points (XS+).}
        curse_id    C2
        inject_type COOP
        f           @C1
        g           @F1
        inject_num  1
        mode        transient
        mag         2.0
    }

    test get-1.2 {get parameter} -setup {
        setup_get
    } -body {
        tdb inject get {C2 1} g
    } -cleanup {
        cleanup
    } -result {@F1}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {call check method, no errors} -setup {
        setup
        tdb inject create $I2
    } -body {
        tdb inject coop check [tdb inject get {C2 1}]
    } -cleanup {
        cleanup
    } -result {}

    test check-1.2 {call check method, error} -setup {
        setup
        tdb inject create $I1
        tdb inject create $BADI1
    } -body {
        tdb inject vrel check [tdb inject get {C1 2}]
    } -cleanup {
        cleanup
    } -result {Role @C1 is CIVGROUPS role, must be an ACTORS role.}

    test check-1.3 {call check method, error} -setup {
        setup
        tdb inject create $I4
        tdb inject create $BADI2
    } -body {
        tdb inject hrel check [tdb inject get {C1 2}]
    } -cleanup {
        cleanup
    } -result {Role @A1 is ACTORS role, must be GROUPS role.}

    test check-1.4 {call check method, error} -setup {
        setup
        tdb inject create $I1
        tdb inject create $BADI3
    } -body {
        tdb inject sat check [tdb inject get {C1 2}]
    } -cleanup {
        cleanup
    } -result {Role @F1 is FRCGROUPS role, must be a CIVGROUPS role.}

    #-------------------------------------------------------------------
    # coop narrative

    test narrative-1.1 {narrative} -setup {
        setup
        tdb inject create $I1
    } -body {
        tdb inject coop narrative [tdb inject get {C1 1}]
    } -cleanup {
        cleanup
    } -result {Change cooperation of civilians in @C1 with forces in @F1 by 1.0 points (XXXS+).}

    #-------------------------------------------------------------------
    # hrel narrative

    test narrative-1.2 {narrative} -setup {
        setup
        tdb inject create $I3
    } -body {
        tdb inject hrel narrative [tdb inject get {C1 1}]
    } -cleanup {
        cleanup
    } -result {Change horizontal relationships of groups in @G1 with groups in @F1 by 1.0 points (XXXS+).}

    #-------------------------------------------------------------------
    # sat narrative

    test narrative-1.3 {narrative} -setup {
        setup
        tdb inject create $I5
    } -body {
        tdb inject sat narrative [tdb inject get {C1 1}]
    } -cleanup {
        cleanup
    } -result {Change satisfaction of civilians in @C1 with SFT by 1.0 points (XXXS+).}

    #-------------------------------------------------------------------
    # vrel narrative

    test narrative-1.4 {narrative} -setup {
        setup
        tdb inject create $I4
    } -body {
        tdb inject vrel narrative [tdb inject get {C1 1}]
    } -cleanup {
        cleanup
    } -result {Change vertical relationships of groups in role @G2 with actors in role @A1 by 1.0 points (XXXS+).}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

