# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-SIM.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) SIM:* order tests.
#
#    This test suite tests the sim(sim) orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    variable clockdata [simclock checkpoint]

    # Set up to run

    proc setup {} {
        ted create NB1 BLUE SHIA
        ted lock
    }


    # Clean up after a test

    proc cleanup {} {
        variable clockdata

        # Clean up the test environment
        simclock restore $clockdata

        if {[sim state] eq "RUNNING"} {
            sim mutate pause
        } 

        if {[sim state] eq "PAUSED"} {
            sim restart
        }

        if {[simclock now] > 0} {
            simclock reset
        }

        ted cleanup

        assert {![aram initialized]}
    }

    #-------------------------------------------------------------------
    # SIM:STARTDATE

    test STARTDATE-1.1 {required parms} -body {
        ted order -reject SIM:STARTDATE {}
    } -result {
        startdate {required value}
    }


    test STARTDATE-1.2 {invalid startdate} -body {
        ted order -reject SIM:STARTDATE startdate NONESUCH
    } -result {
        startdate {Invalid week string: "NONESUCH"}
    }


    test STARTDATE-2.1 {startdate is set} -body {
        ted order SIM:STARTDATE startdate 2014W26
        simclock cget -week0
    } -cleanup {
        cleanup
    } -result {2014W26}


    test STARTDATE-2.2 {<Time> is sent} -body {
        ted notifier bind ::sim <Time>
        ted order SIM:STARTDATE startdate 2014W26
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <Time>}
    }
    
    test STARTDATE-3.1 {<Time> is sent on undo} -setup {
        set undo [ted order SIM:STARTDATE startdate 2014W26]

    } -body {
        ted notifier bind ::sim <Time>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <Time>}
    }
    
    #-------------------------------------------------------------------
    # SIM:STARTTICK

    test STARTTICK-1.1 {required parms} -body {
        ted order -reject SIM:STARTTICK {}
    } -result {
        starttick {required value}
    }


    test STARTTICK-1.2 {invalid starttick} -body {
        ted order -reject SIM:STARTTICK starttick NONESUCH
    } -result {
        starttick {invalid value "NONESUCH", expected integer}
    }


    test STARTTICK-2.1 {starttick is set} -body {
        ted order SIM:STARTTICK starttick 52
        simclock cget -tick0
    } -cleanup {
        cleanup
    } -result {52}


    test STARTTICK-2.2 {<Time> is sent} -body {
        ted notifier bind ::sim <Time>
        ted order SIM:STARTTICK starttick 52
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <Time>}
    }
    
    test STARTTICK-3.1 {<Time> is sent on undo} -setup {
        set undo [ted order SIM:STARTTICK starttick 52]

    } -body {
        ted notifier bind ::sim <Time>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <Time>}
    }
    
    #-------------------------------------------------------------------
    # SIM:LOCK

    
    test LOCK-1.1 {sanity check fails} -body {
        ted order -reject SIM:LOCK
    } -cleanup {
        cleanup
    } -result {
        * {The on-lock sanity check failed with one or more errors; time cannot advance. Fix the error, and try again. Please see the On-lock Sanity Check Report in the Detail Browser for details.}
    }

    test LOCK-2.1 {locks the scenario} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        ted order SIM:LOCK
        sim state
    } -cleanup {
        cleanup
    } -result {PAUSED}

    test LOCK-2.2 {Sends <State>} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        ted notifier bind ::sim <State>
        ted order SIM:LOCK
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
    }



    #-------------------------------------------------------------------
    # SIM:RUN

    
    test RUN-1.1 {invalid days string} -setup {
        setup
    } -body {
        ted order -reject SIM:RUN weeks NONESUCH
    } -cleanup {
        cleanup
    } -result {
        weeks {invalid value "NONESUCH", expected integer}
    }


    test RUN-1.2 {negative days} -setup {
        setup
    } -body {
        ted order -reject SIM:RUN weeks -1
    } -cleanup {
        cleanup
    } -result {
        weeks {invalid value "-1", expected integer no less than 0}
    }

    
    test RUN-1.3 {invalid block} -setup {
        setup
    } -body {
        ted order -reject SIM:RUN weeks 1 block NONESUCH
    } -cleanup {
        cleanup
    } -result {
        block {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    
    test RUN-1.4 {block, but no stop time} -setup {
        setup
    } -body {
        ted order -reject SIM:RUN block YES
    } -cleanup {
        cleanup
    } -result {
        block {Cannot block without specifying the weeks to run}
    }


    test RUN-2.1 {Run until paused} -setup {
        setup
    } -body {
        ted order SIM:RUN
        list [sim state] [sim stoptime]
    } -cleanup {
        cleanup
    } -result {RUNNING 0}


    test RUN-2.2 {Run for days} -setup {
        setup
    } -body {
        ted order SIM:RUN weeks 5
        list [sim state] [sim stoptime]
    } -cleanup {
        cleanup
    } -result {RUNNING 5}


    test RUN-2.3 {Sends <State>} -setup {
        setup
    } -body {
        ted notifier bind ::sim <State>
        ted order SIM:RUN
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
    }

    #-------------------------------------------------------------------
    # SIM:PAUSE

    test PAUSE-1.1 {Not allowed in PREP} -body {
        ted order -reject SIM:PAUSE
    } -cleanup {
        cleanup
    } -result {
        * {Order state is PREP, but order is valid only in these states: RUNNING, TACTIC}
    }


    test PAUSE-1.2 {Pauses while running} -setup {
        setup
    } -body {
        ted order SIM:RUN
        simclock tick
        ted order SIM:PAUSE
        sim state
    } -cleanup {
        cleanup
    } -result {PAUSED}


    test PAUSE-1.3 {Not allowed while paused} -setup {
        setup
    } -body {
        ted order SIM:RUN
        simclock tick
        ted order SIM:PAUSE
        ted order -reject SIM:PAUSE
    } -cleanup {
        cleanup
    } -result {
        * {Order state is PAUSED, but order is valid only in these states: RUNNING, TACTIC}
    }


    test PAUSE-1.4 {Sends <State>} -setup {
        setup
    } -body {
        ted order SIM:RUN
        ted notifier bind ::sim <State>
        ted order SIM:PAUSE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
    }

    #-------------------------------------------------------------------
    # SIM:UNLOCK

    
    test UNLOCK-1.1 {unlocks the scenario} -setup {
        setup
    } -body {
        ted order SIM:UNLOCK
        sim state
    } -cleanup {
        cleanup
    } -result {PREP}

    test UNLOCK-1.2 {Sends <State>} -setup {
        setup
    } -body {
        ted notifier bind ::sim <State>
        ted order SIM:UNLOCK
        ted notifier received
        # Event is sent twice, once when state is set, and then
        # as part of "sim dbsync".
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
        {::sim <State>}
    }

    #-------------------------------------------------------------------
    # SIM:REBASE

    test REBASE-1.1 {rebases the scenario} -setup {
        setup
        ted step
    } -body {
        ted order SIM:REBASE
        list [sim state] [simclock now]
    } -cleanup {
        cleanup
    } -result {PREP 1}
    
    test REBASE-1.2 {Sends <State>} -setup {
        setup
    } -body {
        ted notifier bind ::sim <State>
        ted order SIM:REBASE
        ted notifier received
        # Event is sent twice, once when state is set, and then
        # as part of "sim dbsync".
    } -cleanup {
        cleanup
    } -result {
        {::sim <State>}
        {::sim <State>}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







