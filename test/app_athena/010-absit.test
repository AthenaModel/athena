# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-absit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    absit(sim) tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    set s1 {
        stype     BADWATER
        n         NB1
        coverage  1.0 
        g         BLUE
        resolver  NONE
        inception 1   
        rduration ""
    } 

    set s2 {
        stype     COMMOUT
        n         NB1 
        coverage  0.5 
        g         NONE
        resolver  BLUE
        inception 0   
        rduration ""
    } 

    set s3 {
        stype     INDSPILL
        n         NB1
        coverage  1.0 
        g         BLUE
        resolver  NONE
        inception 1   
        rduration ""
    } 

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {Ensit is created} -setup {
        ted create NB1 BLUE
    } -body {
        absit mutate create $s1
        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -match glob -result {
s          1
stype      BADWATER
n          NB1
coverage   1.0
inception  1
resolver   NONE
rduration  1
state      INITIAL
ts         0
tr         1
location   *
    }
    

    test create-1.2 {Ensit is created, duration can be set} -setup {
        ted create JOE NB1 BLUE SHIA
    } -body {
        absit mutate create [dict merge $s1 [list rduration 20]]

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -match glob -result {
s          1
stype      BADWATER
n          NB1
coverage   1.0
inception  1
resolver   NONE
rduration  20
state      INITIAL
ts         0
tr         20
location   *
    }

    test create-1.3 {If created while PAUSED, ts = now+1} -setup {
        ted create JOE NB1 BLUE SHIA
    } -body {
        ted lock
        absit mutate create $s1

        rdb eval {SELECT ts, tr FROM absits}
    } -cleanup {
        cleanup
    } -result {1 2}

    test create-2.1 {Undo deletes the entity} -setup {
        ted create NB1 BLUE
        set undo [absit mutate create $s1]
    } -body {
        {*}$undo
        rdb query {SELECT s FROM absits}
    } -cleanup {
        cleanup
    } -result {}


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {Entity is deleted} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
    } -body {
        absit mutate delete 1

        # Is 1 gone?
        rdb eval {SELECT s FROM absits}
    } -cleanup {
        cleanup
    } -result {2}


    test delete-2.1 {Undo restores absit} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
    } -body {
        set a [absit get 1]
        set undo [absit mutate delete 1]
        {*}$undo
        set b [absit get 1]
        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate update


    test update-1.1 {absit is updated} -setup {
        ted create NB1 NB2 BLUE
        absit mutate create $s1
    } -body {
        absit mutate update {
            s         1 
            stype     BADFOOD
            n         NB2 
            coverage  0.5
            inception 0
            g         NONE
            resolver  BLUE
            rduration 10
        }

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -match glob -result {
s          1
stype      BADFOOD
n          NB2
coverage   0.5
inception  0
resolver   BLUE
rduration  10
state      INITIAL
ts         0
tr         10
location   *
    }

    test update-1.2 {identical values are OK} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM absits}]

        absit mutate update [concat {s 1} $s1]

        set b [ted query {SELECT * FROM absits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.3 {empty values are OK} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM absits}]

        absit mutate update  {
            s         1
            stype     ""
            n         ""
            coverage  ""
            inception ""
            g         ""
            resolver  ""
            rduration ""
        }

        set b [ted query {SELECT * FROM absits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-1.5 {location is updated} -setup {
        ted create NB1 NB2 BLUE
        absit mutate create $s1
    } -body {
        set a [absit get 1 location]
        absit mutate update {
            s         1 
            stype     ""
            n         NB2
            coverage  ""
            inception ""
            g         ""
            resolver  ""
            rduration ""
        }
        set b [absit get 1 location]
        expr {$a ne $b}
    } -cleanup {
        cleanup
    } -result {1}


    test update-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM absits}]

        set undo [absit mutate update {
            s         1 
            stype     BADFOOD
            n         ""
            coverage  ""
            inception ""
            g         ""
            resolver  ""
            rduration ""
        }]

        {*}$undo

        set b [ted query {SELECT * FROM absits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate resolve


    test resolve-1.1 {absit is resolved by NONE} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
    } -body {
        absit mutate resolve {
            s         1 
            resolver  NONE
        }

        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -match glob -result {
s          1
stype      BADWATER
n          NB1
coverage   1.0
inception  1
resolver   NONE
rduration  0
state      RESOLVED
ts         0
tr         0
location   *
    }


    test resolve-2.1 {undo undoes the change} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
    } -body {
        set a [ted query {SELECT * FROM absits}]

        set undo [absit mutate resolve {
            s        1
            resolver NONE
        }]

        {*}$undo

        set b [ted query {SELECT * FROM absits}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate reconcile

    test reconcile-1.1 {resolver set to NONE if resolver doesn't exist} -setup {
        ted create NB1
        absit mutate create [dict merge $s1 [list g NONE]]
        absit mutate resolve [list s 1 resolver BLUE]
    } -body {
        absit mutate reconcile

        rdb eval {SELECT resolver FROM absits}
    } -cleanup {
        cleanup
    } -result {NONE}


    #-------------------------------------------------------------------
    # get

    test get-1.1 {get all} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
    } -body {
        ted pdicts [absit get 1]
        
    } -cleanup {
        cleanup
    } -match dictglob -result {
        coverage  1.0
        inception 1
        location  *
        n         NB1
        rduration 1
        resolver  NONE
        s         1
        state     INITIAL
        stype     BADWATER
        tr        1
        ts        0
    }

    test get-1.2 {get parm} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
    } -body {
        absit get 1 n
    } -cleanup {
        cleanup
    } -result {NB1}

    #-------------------------------------------------------------------
    # existsInNbhood

    test existsInNbhood-1.1 {get list of live absits} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2

        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit existsInNbhood NB1
    } -cleanup {
        cleanup
    } -result {BADWATER}


    test existsInNbhood-1.2 {Check existence of types} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        list \
            [absit existsInNbhood NB1 BADWATER] \
            [absit existsInNbhood NB1 COMMOUT]
    } -cleanup {
        cleanup
    } -result {1 0}


    #-------------------------------------------------------------------
    # absentFromNbhood

    test absentFromNbhood-1.1 {get list of absent absits} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        # Only BADWATER should be missing.
        absit absentFromNbhood NB1
    } -cleanup {
        cleanup
    } -result {BADFOOD COMMOUT CULSITE DISASTER DISEASE DROUGHT EPIDEMIC FOODSHRT FUELSHRT GARBAGE INDSPILL MINEFIELD NOWATER ORDNANCE PIPELINE POWEROUT REFINERY RELSITE SEWAGE TRAFFIC}

    
    #-------------------------------------------------------------------
    # names/validate
    #
    # enum(n)-like subcommands for all absits, live and RESOLVED.

    test names-1.1 {get list of absit IDs} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
    } -body {
        absit names
    } -cleanup {
        cleanup
    } -result {1 2}
    

    test names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
    } -body {
        absit validate 2
    } -cleanup {
        cleanup
    } -result {2}
    

    test names-1.3 {validate invalid ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
    } -body {
        absit validate 3
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid abstract situation ID: "3"}
    

    #-------------------------------------------------------------------
    # initial names/validate
    #
    # enum(n)-like subcommands for absits in the INITIAL state

    test initial_names-1.1 {get list of absit IDs} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit initial names
    } -cleanup {
        cleanup
    } -result {1}
    

    test initial_names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit initial validate 1
    } -cleanup {
        cleanup
    } -result {1}
    

    test initial_names-1.3 {validate RESOLVED ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {not a "live" situation: "2"}
    

    test initial_names-1.4 {validate active ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        rdb eval {UPDATE absits SET state='ONGOING' WHERE s=2}
    } -body {
        absit initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {operation is invalid; time has passed.}

    #-------------------------------------------------------------------
    # live names/validate
    #
    # enum(n)-like subcommands for absits that "live"

    test live_names-1.1 {get list of absit IDs} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit live names
    } -cleanup {
        cleanup
    } -result {1}
    

    test live_names-1.2 {validate valid ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit live validate 1
    } -cleanup {
        cleanup
    } -result {1}
    

    test live_names-1.3 {validate invalid ID} -setup {
        ted create NB1 BLUE
        absit mutate create $s1
        absit mutate create $s2
        absit mutate resolve {
            s        2
            resolver NONE
        }
    } -body {
        absit live validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {not a "live" situation: "2".}


    #-------------------------------------------------------------------
    # rebase

    test rebase-1.1 {Clean up absits} -setup {
        ted create NB1 JOE BLUE SHIA
        absit mutate create $s1
        absit mutate create $s2
        absit mutate create $s3
        ted lock
        absit mutate resolve {s 1 resolver NONE}
        ted step
        ted step
    } -body {
        absit rebase

        # RESOLVED absits should be gone.  For those remaining,
        # tc=ts=now (t=2); state is INITIAL; inception is 0;
        # driver IDs are unassigned; duration is truncated.
        ted querylist {SELECT * FROM absits}
    } -cleanup {
        cleanup
    } -match glob -result {
s          3
stype      INDSPILL
n          NB1
coverage   1.0
inception  0
resolver   NONE
rduration  10
state      INITIAL
ts         2
tr         12
location   *
    }    

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
    parm set dam.UNEMP.active yes
}

namespace delete ::athena_test::tests::










