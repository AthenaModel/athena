# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_support.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_support(sim) tests.
#
#    This test suite tests the tactic_support(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT
        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 SUPPORT]
        control load
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        a          {}
        execstatus NONE
        faildict   {}
        id         *
        nlist      {_type NBHOODS _rule {}}
        parent     ::bean::block*
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::SUPPORT new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}
    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Support actor ??? in nbhood ???.}

    test narrative-1.2 {narrative, with valid fields} -setup {
        setup
        $T1 configure \
            -a     BOB \
            -nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Support actor {actor:BOB} in these neighborhoods (NB1, NB2).}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        a     {No actor specified.}
        nlist {No rule specified}
    }

    test check-1.2 {invalid actor} -setup {
        setup
    } -body {
        $T1 configure \
            -a     NONESUCH \
            -nlist [gofer construct NBHOODS BY_VALUE NB1]
        $T1 check
    } -cleanup {
        cleanup
    } -result {a {No such actor: "NONESUCH".}}

    test check-1.4 {invalid nlist gofer} -setup {
        setup
        $T1 configure \
            -a      BOB \
            -nlist {}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {Not a gofer NBHOODS value}}



    test check-2.1 {Success} -setup {
        setup
        $T1 configure \
            -a     BOB \
            -nlist [gofer construct NBHOODS BY_VALUE NB1]
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {always succeeds.} -setup {
        setup
    } -body {
        $T1 obligate $coffer
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {always succeeds} -setup {
        setup
        $T1 configure \
            -a     BOB \
            -nlist [gofer construct NBHOODS BY_VALUE NB1]
    } -body {
        $T1 check
        $T1 obligate $coffer
        $T1 execute
        control save
        ted query {SELECT * FROM supports_na WHERE a='JOE'}
    } -cleanup {
        cleanup
    } -result {
n   a   supports 
--- --- -------- 
NB1 JOE BOB      
NB2 JOE JOE      
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








