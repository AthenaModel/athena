# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-DEPLOY.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:DEPLOY:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD
        variable B1
        variable T1

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 DEPLOY]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:DEPLOY

    test TACTIC:DEPLOY-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:DEPLOY-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid DEPLOY ID: "NONESUCH"}
    }

    test TACTIC:DEPLOY-1.3 {invalid pmode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] pmode NONESUCH
    } -cleanup {
        cleanup
    } -match dictglob -result {
        pmode {invalid value "NONESUCH", should be one of: *}
    }

    test TACTIC:DEPLOY-1.4 {invalid personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:DEPLOY-1.5 {-1 personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] personnel -1
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "-1", expected integer no less than 0}
    }

    test TACTIC:DEPLOY-1.6 {invalid nmode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] nmode NONESUCH
    } -cleanup {
        cleanup
    } -match dictglob -result {
        nmode {invalid value "NONESUCH", should be one of: BY_POP, EQUAL}
    }

    test TACTIC:DEPLOY-1.7 {invalid redeploy} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] redeploy NONESUCH
    } -cleanup {
        cleanup
    } -result {
        redeploy {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test TACTIC:DEPLOY-1.8 {pmode SOME, previous personnel is 0} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] pmode SOME
    } -cleanup {
        cleanup
    } -result {
        personnel {For pmode SOME, personnel must be positive.}
    }

    test TACTIC:DEPLOY-1.9 {negative min} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] min -1
    } -cleanup {
        cleanup
    } -result {
        min {invalid value "-1", expected integer no less than 0}
    }

    test TACTIC:DEPLOY-1.10 {zero max} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] \
            pmode UPTO min 0 max 0
    } -cleanup {
        cleanup
    } -result {
        max {For pmode UPTO, max must be greater than 0.}
    }

    test TACTIC:DEPLOY-1.11 {UPTO, max < min} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] \
            pmode UPTO max 1 min 2
    } -cleanup {
        cleanup
    } -result {
        max {For pmode UPTO, max must be greater than min.}
    }

    test TACTIC:DEPLOY-1.12 {percent is out of range} -setup {
        setup
    } -body {
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] percent 101
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "101", expected double in range 0.0, 100.0}
    }

    test TACTIC:DEPLOY-1.13 {PERCENT, percent is 0} -setup {
        setup
    } -body {
        # percent defaults to 0
        ted order -reject TACTIC:DEPLOY tactic_id [$T1 id] \
            pmode PERCENT
    } -cleanup {
        cleanup
    } -result {
        max {For pmode PERCENT, percent must be positive.}
    }


    test TACTIC:DEPLOY-2.1 {tactic updated, invalid} -setup {
        setup

        # set last_tick so that we can verify that it is cleared
        $T1 set last_tick 5
    } -body {
        ted order TACTIC:DEPLOY \
            tactic_id [$T1 id]  \
            g         NONESUCH  \
            pmode     SOME      \
            personnel 1000      \
            min       5         \
            max       10        \
            percent   15        \
            nlist     NONESUCH  \
            nmode     EQUAL     \
            redeploy  yes        

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        faildict   {}
        g          NONESUCH
        id         *
        last_tick  {}
        max        10
        min        5
        nlist      NONESUCH
        nmode      EQUAL
        parent     ::bean::block*
        percent    15
        personnel  1000
        pmode      SOME
        redeploy   1
        state      invalid
    }

    test TACTIC:DEPLOY-2.2 {tactic updated, valid} -setup {
        setup

        # set last_tick so that we can verify that it is cleared
        $T1 set last_tick 5
    } -body {
        ted order TACTIC:DEPLOY \
            tactic_id [$T1 id]  \
            g         BLUE      \
            pmode     SOME      \
            personnel 1000      \
            min       5         \
            max       10        \
            percent   15        \
            nlist     [gofer construct NBHOODS BY_VALUE {NB1}] \
            nmode     EQUAL     \
            redeploy  yes

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        faildict   {}
        g          BLUE
        id         *
        last_tick  {}
        max        10
        min        5
        nlist      {_type NBHOODS _rule BY_VALUE nlist NB1}
        nmode      EQUAL
        parent     ::bean::block*
        percent    15
        personnel  1000
        pmode      SOME
        redeploy   1
        state      normal
    }

    test TACTIC:DEPLOY-2.3 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:DEPLOY tactic_id [$T1 id] personnel 100
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:DEPLOY-2.4 {undo notifier event} -setup {
        setup
        ted order TACTIC:DEPLOY tactic_id [$T1 id] personnel 100
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test TACTIC:DEPLOY-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







