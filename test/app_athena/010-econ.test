# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-econ.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    econ(sim) tests.
#
#    This test suite tests the econ(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    test samupdate-1.1 {sam is updated} -setup {
        ted create NB1 NB2
    } -body {
        econ mutate samcell {
            id  BX.world.world
            val 100M
        }

        dict get [[econ sam] get] BX.world.world
    } -cleanup {
        cleanup
    } -result {100M}

    test samupdate-2.1 {undo undoes the change} -setup {
        ted create NB1 NB2
    } -body {
        set a [dict get [[econ sam] get] BX.world.world]

        set undo [econ mutate samcell {
            id BX.world.world
            val 100M
        }]

        eval $undo

        set b [dict get [[econ sam] get] BX.world.world]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    test cgeupdate-1.1 {cge is updated} -setup {
        ted create NB1 NB2
    } -body {
        econ mutate cgecell {
            id  BPF.world.black
            val 100M
        }

        dict get [[econ cge] get] BPF.world.black
    } -cleanup {
        cleanup
    } -result {100M}

    test cgeupdate-2.1 {undo undoes the change} -setup {
        ted create NB1 NB2
    } -body {
        set a [dict get [[econ cge] get] BPF.world.black]

        set undo [econ mutate cgecell {
            id BPF.world.black
            val 100M
        }]

        eval $undo

        set b [dict get [[econ cge] get] BPF.world.black]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





