# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-MAP.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) MAP:* order tests.
#
#    This test suite tests the map-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        array unset parms
        ted notifier forget
        scenario new
    }

    #-------------------------------------------------------------------
    # MAP:IMPORT:FILE

    test MAP:IMPORT:FILE-1.1 {filename is required} -body {
        ted order -reject MAP:IMPORT:FILE {}
    } -result {
        filename {required value}
    }
    
    test MAP:IMPORT:FILE-1.2 {filename is bad} -constraints tk -body {
        ted order -reject MAP:IMPORT:FILE filename nosuchfile.png
    } -result {
        filename {Could not open the specified file as a map image}
    }

    test MAP:IMPORT:FILE-2.1 {map loaded} -constraints tk -body {
        ted order MAP:IMPORT:FILE filename map.png

        rdb onecolumn {SELECT filename FROM maps WHERE id=1}
    } -cleanup {
        cleanup
    } -result {map.png}

    test MAP:IMPORT:FILE-2.2 {<MapChanged> sent} -constraints tk -body {
        ted notifier bind ::map <MapChanged>
        ted order MAP:IMPORT:FILE filename map.png
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::map <MapChanged>}
    }

    test MAP:IMPORT:FILE:3.1 {undo resets map} -constraints tk -setup {
        ted order MAP:IMPORT:FILE filename map.png
    } -body {
        cif undo
        rdb onecolumn {SELECT filename FROM maps WHERE id=1}
    } -result {blank.png}

    test MAP:IMPORT:FILE:3.2 {undo sends <MapChanged>} -constraints tk -setup {
        ted order MAP:IMPORT:FILE filename map.png
    } -body {
        ted notifier bind ::map <MapChanged>
        cif undo
        ted notifier received
    } -result {
        {::map <MapChanged>}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





