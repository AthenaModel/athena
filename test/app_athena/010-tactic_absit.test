# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_absit.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_absit(sim) tests.
#
#    This test suite tests the tactic_absit(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # If opt is -valid, sets up a valid tactic.
    proc setup {{opt ""}} {
        variable B1
        variable T1
        variable coffer

        # FIRST, create the basic entities.
        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD

        # NEXT, create a default ABSIT tactic
        set B1 [ted addblock SYSTEM]
        set T1 [ted addtactic $B1 ABSIT]

        # NEXT, prepare for obligation
        personnel start
        personnel load
        set coffer [coffer new JOE]
    }

    proc cleanup {} {
        variable coffer
        $coffer destroy
        strategy locking 0
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        coverage   1.0
        duration   1
        execstatus NONE
        faildict   {}
        id         *
        n          {}
        parent     ::bean::block*
        resolver   NONE
        state      invalid
        stype      {}
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::ABSIT new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {??? abstract situation in ??? (cov=1.00) for 1 week(s).}

    test narrative-1.2 {narrative, specific settings} -setup {
        setup
        $T1 configure         \
            -n        NB1     \
            -stype    COMMOUT \
            -coverage 0.5     \
            -duration 2
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {COMMOUT abstract situation in {nbhood:NB1} (cov=0.50) for 2 week(s).}

    test narrative-1.3 {narrative, resolver} -setup {
        setup
        $T1 configure         \
            -n        NB1     \
            -stype    COMMOUT \
            -resolver BLUE    \
            -duration 2
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {COMMOUT abstract situation in {nbhood:NB1} (cov=1.00) resolved by {group:BLUE} after 2 week(s).}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        n {No neighborhood selected.} 
        stype {No situation type selected.}
    }

    test check-1.2 {unknown n} -setup {
        setup 
    } -body {
        $T1 configure -n NONESUCH -stype COMMOUT
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        n {No such neighborhood: "NONESUCH".}
    }

    test check-1.3 {stype doesn't exist} -setup {
        setup 
    } -body {
        $T1 configure -n NB1 -stype NONESUCH
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        stype {No such abstraction situation type: "NONESUCH".}
    }

    test check-1.4 {unknown resolver} -setup {
        setup
    } -body {
        $T1 configure -n NB1 -stype COMMOUT -resolver NONESUCH
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        resolver {No such FRC group: "NONESUCH".}
    }

    test check-1.5 {Success} -setup {
        setup
        $T1 configure -n NB1 -stype COMMOUT -resolver BLUE
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate
    #

    test obligate-1.1 {obligate always works, no money} -setup {
        setup
        $T1 configure -n NB1 -stype COMMOUT
    } -body {
        $T1 obligate $coffer
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {creates absit} -setup {
        setup
        $T1 configure         \
            -n        NB1     \
            -stype    COMMOUT \
            -coverage 0.5     \
            -resolver BLUE    \
            -duration 2
    } -body {
        $T1 execute
        ted querylist {SELECT stype,n,coverage,inception,resolver,rduration FROM absits}
    } -cleanup {
        cleanup
    } -result {
stype      COMMOUT
n          NB1
coverage   0.5
inception  1
resolver   BLUE
rduration  2
    }

    test execute-1.2 {creates only one absit for n,stype} -setup {
        setup
        $T1 configure         \
            -n        NB1     \
            -stype    COMMOUT \
            -coverage 0.5     \
            -resolver BLUE    \
            -duration 2
    } -body {
        $T1 execute
        $T1 execute
        rdb eval {SELECT n, stype FROM absits}
    } -cleanup {
        cleanup
    } -result {NB1 COMMOUT}

    test execute-1.3 {can create multiple} -setup {
        setup
        $T1 configure         \
            -n        NB1     \
            -stype    COMMOUT \
            -coverage 0.5     \
            -resolver BLUE    \
            -duration 2
    } -body {
        $T1 execute
        $T1 configure -stype NOWATER
        $T1 execute
        rdb eval {SELECT n, stype FROM absits ORDER BY n, stype}
    } -cleanup {
        cleanup
    } -result {NB1 COMMOUT NB1 NOWATER}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::









