# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-SPEND.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:SPEND:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        ted create JOE
        variable S1
        variable B1
        variable T1
        set S1 [strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename SPEND
        lassign [$B1 tactics] T1
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:SPEND

    test TACTIC:SPEND-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:SPEND-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid SPEND ID: "NONESUCH"}
    }

    test TACTIC:SPEND-1.3 {invalid mode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] mode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "NONESUCH", should be one of: ALL, EXACT, UPTO, PERCENT, EXCESS}
    }

    test TACTIC:SPEND-1.4 {invalid amount} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] amount NONESUCH
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:SPEND-1.5 {invalid percent} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] \
                                       mode PERCENT percent NONESUCH
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "NONESUCH", expected double}
    }

    test TACTIC:SPEND-1.6 {invalid goods} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] goods NONESUCH
    } -cleanup {
        cleanup
    } -result {
        goods {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:SPEND-1.7 {invalid black} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] black NONESUCH
    } -cleanup {
        cleanup
    } -result {
        black {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:SPEND-1.8 {invalid pop} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] pop NONESUCH
    } -cleanup {
        cleanup
    } -result {
        pop {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:SPEND-1.9 {invalid region} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] region NONESUCH
    } -cleanup {
        cleanup
    } -result {
        region {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:SPEND-1.10 {invalid world} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] world NONESUCH
    } -cleanup {
        cleanup
    } -result {
        world {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:SPEND-1.11 {mode EXACT, amount 0.0} -setup {
        setup
    } -body {
        # amount is 0.0 by default
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] mode EXACT
    } -cleanup {
        cleanup
    } -result {
        amount {You must specify an amount > 0.0}
    }

    test TACTIC:SPEND-1.12 {all shares 0} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SPEND tactic_id [$T1 id] \
            goods 0 black 0 pop 0 region 0 world 0
    } -cleanup {
        cleanup
    } -result {
        goods {At least one sector must have a positive share.}
    }

    test TACTIC:SPEND-2.1 {tactic updated, mode EXACT} -setup {
        setup
    } -body {
        ted order TACTIC:SPEND \
            tactic_id [$T1 id] \
            mode      EXACT    \
            amount    100.0    \
            goods     10

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     100.0
        black      1
        execstatus NONE
        faildict   {}
        goods      10
        id         *
        mode       EXACT
        parent     ::bean::block*
        percent    0.0
        pop        1
        region     1
        state      normal
        world      1
    }

    test TACTIC:SPEND-2.2 {tactic updated, mode UPTO} -setup {
        setup
    } -body {
        ted order TACTIC:SPEND \
            tactic_id [$T1 id] \
            mode      UPTO     \
            amount    100.0    \
            goods     10

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     100.0
        black      1
        execstatus NONE
        faildict   {}
        goods      10
        id         *
        mode       UPTO
        parent     ::bean::block*
        percent    0.0
        pop        1
        region     1
        state      normal
        world      1
    }

    test TACTIC:SPEND-2.3 {tactic updated, mode PERCENT} -setup {
        setup
    } -body {
        ted order TACTIC:SPEND \
            tactic_id [$T1 id] \
            mode      PERCENT  \
            percent   10.0    \
            goods     10

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        black      1
        execstatus NONE
        faildict   {}
        goods      10
        id         *
        mode       PERCENT
        parent     ::bean::block*
        percent    10.0
        pop        1
        region     1
        state      normal
        world      1
    }

    test TACTIC:SPEND-2.4 {tactic updated, mode EXCESS} -setup {
        setup
    } -body {
        ted order TACTIC:SPEND \
            tactic_id [$T1 id] \
            mode      EXCESS   \
            amount    100.0    \
            goods     10

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     100.0
        black      1
        execstatus NONE
        faildict   {}
        goods      10
        id         *
        mode       EXCESS
        parent     ::bean::block*
        percent    0.0
        pop        1
        region     1
        state      normal
        world      1
    }

    test TACTIC:SPEND-2.5 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:SPEND tactic_id [$T1 id] amount 10.0
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:SPEND-2.3 {undo notifier event} -setup {
        setup
        ted order TACTIC:SPEND tactic_id [$T1 id] amount 10.0
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test TACTIC:SPEND-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







