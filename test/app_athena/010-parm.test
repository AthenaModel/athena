# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-parm.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    parm(sim) tests.
#
#    This test suite tests the parm(sim) mutators, queries, etc.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test
    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # init

    # Nothing to test.

    #-------------------------------------------------------------------
    # mutate import

    test mutate_import-1.1 {Imports a file} -setup {
        makeFile {
            parm dam.absit.nominalCoverage 0.5
        } temp.parmdb
    } -body {
        parm mutate import [file join [temporaryDirectory] temp.parmdb]
        parm get dam.absit.nominalCoverage
    } -cleanup {
        cleanup
    } -result {0.5}


    test mutate_import-1.2 {Changes are undone} -setup {
        makeFile {
            parm dam.absit.nominalCoverage 0.5
        } temp.parmdb
    } -body {
        set a [parm get dam.absit.nominalCoverage]
        set undo [parm mutate import \
                      [file join [temporaryDirectory] temp.parmdb]]
        set b [parm get dam.absit.nominalCoverage]
        eval $undo
        set c [parm get dam.absit.nominalCoverage]

        list [expr {$a == $c}] [expr {$a != $b}]
    } -cleanup {
        cleanup
    } -result {1 1}


    #-------------------------------------------------------------------
    # mutate reset
    #
    # We can't test this thoroughly, because the results depend on the
    # defaults.parmdb file.  However, we can make sure that it can be
    # executed without error, and that the undo script is correct.

    test mutate_reset-1.1 {Can be called without error} -body {
        parm mutate reset
    } -cleanup {
        cleanup
    } -result {::parm restore {}}

    #-------------------------------------------------------------------
    # mutate set


    test mutate_set-1.1 {Sets an unknown parameter} -body {
        parm mutate set foo bar
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {unknown parameter: "foo"}


    test mutate_set-1.2 {Sets a known parameter to an invalid value} -body {
        parm mutate set dam.absit.nominalCoverage foo
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid dam.absit.nominalCoverage value "foo": invalid value "foo", should be a real number in range 0.1, 1.0}


    test mutate_set-2.1 {Set is successful} -body {
        parm mutate set dam.absit.nominalCoverage 0.1
        parm get dam.absit.nominalCoverage
    } -cleanup {
        cleanup
    } -result {0.1}


    test mutate_set-2.2 {Set can be undone} -body {
        set a [parm get dam.absit.nominalCoverage]

        set undo [parm mutate set dam.absit.nominalCoverage 0.2]
        eval $undo

        set b [parm get dam.absit.nominalCoverage]

        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests


}

namespace delete ::athena_test::tests::








