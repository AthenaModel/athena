# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-cif.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    cif(sim) tests.
#
#    This test suite tests the cif(sim) commands.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # setup for tests

    proc setup {} {
        ted create JOE
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Create a forcegroup (we'll use FRCGROUP:CREATE as the order that
    # we test with)

    proc addgroup {name args} {
        ted order FRCGROUP:CREATE g $name a JOE {*}$args
    }

    proc pprint {text} {
        return "\n$text    "
    }

    proc dumpinfo {} {
        append out \
            "top:     <[cif top]>\n"  \
            "canundo: <[cif canundo]>\n" \
            "canredo: <[cif canredo]>\n"

        set dump [cif dump -count 100]

        if {$dump ne ""} {
            append out "\n$dump"
        }

        return [pprint $out]
    }


    #-------------------------------------------------------------------
    # basic behavior

    # 1.* : Initial state

    test basic-1.1 {initial state} -body {
        dumpinfo
    } -result {
top:     <>
canundo: <>
canredo: <>
    }

    test basic-1.2 {add orders} -setup {
        setup
    } -body {
        addgroup G1
        addgroup G2

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <2>
canundo: <Create Force Group>
canredo: <>

#2 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G2
    a: JOE
Undo Script:
    ::frcgroup mutate delete G2

#1 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1
    }

    test basic-1.3 {add orders, undo 1} -setup {
        setup
    } -body {
        addgroup G1
        addgroup G2
        cif undo

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <1>
canundo: <Create Force Group>
canredo: <Create Force Group>

#1 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1
    }

    test basic-1.4 {add orders, undo/redo 1} -setup {
        setup
    } -body {
        addgroup G1
        addgroup G2
        cif undo
        cif redo

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <2>
canundo: <Create Force Group>
canredo: <>

#2 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G2
    a: JOE
Undo Script:
    ::frcgroup mutate delete G2

#1 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1
    }

    #-------------------------------------------------------------------
    # Block undo/redo


    test block-1.1 {endblock must match startblock} -setup {
        setup
    } -body {
        cif startblock A
        addgroup G1
        addgroup G2
        cif endblock B
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Start marker not found for block <B>}

    test block-1.2 {block} -setup {
        setup
    } -body {
        cif startblock "Add groups"
        addgroup G1
        addgroup G2
        cif endblock "Add groups"

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <4>
canundo: <Add groups>
canredo: <>

Marker: 4 end <Add groups> @ 0

#3 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G2
    a: JOE
Undo Script:
    ::frcgroup mutate delete G2

#2 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1

Marker: 1 start <Add groups> @ 0
    }
    

    test block-1.3 {block: undo} -setup {
        setup
    } -body {
        cif startblock "Add groups"
        addgroup G1
        addgroup G2
        cif endblock "Add groups"
        cif undo

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <>
canundo: <>
canredo: <Add groups>
    }

    test block-1.4 {block: undo/redo} -setup {
        setup
    } -body {
        cif startblock "Add groups"
        addgroup G1
        addgroup G2
        cif endblock "Add groups"
        cif undo
        cif redo

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <4>
canundo: <Add groups>
canredo: <>

Marker: 4 end <Add groups> @ 0

#3 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G2
    a: JOE
Undo Script:
    ::frcgroup mutate delete G2

#2 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1

Marker: 1 start <Add groups> @ 0
    }

    #-------------------------------------------------------------------
    # Transaction

    test transaction-1.1 {successful} -setup {
        setup
    } -body {
        set list {G1 G2}
        cif transaction "Add groups" {
            foreach g $list {
                addgroup $g
            }
        }

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <4>
canundo: <Add groups>
canredo: <>

Marker: 4 end <Add groups> @ 0

#3 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G2
    a: JOE
Undo Script:
    ::frcgroup mutate delete G2

#2 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1

Marker: 1 start <Add groups> @ 0
    }

    test transaction-2.1 {error, error is rethrown} -setup {
        setup
    } -body {
        addgroup G1

        cif transaction "Add groups" {
            addgroup G2
            addgroup G3 color NONESUCH
        }
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {color {Invalid hex color specifier, should be "#RRGGBB" or "#RRRRGGGGBBBB"}}
    

    test transaction-2.2 {error, cif is correct} -setup {
        setup
    } -body {
        addgroup G1

        catch {
            cif transaction "Add groups" {
                addgroup G2
                addgroup G3 color NONESUCH
            }
        }

        dumpinfo
    } -cleanup {
        cleanup
    } -result {
top:     <1>
canundo: <Create Force Group>
canredo: <>

#1 FRCGROUP:CREATE @ 0: 
Parameters:
    g: G1
    a: JOE
Undo Script:
    ::frcgroup mutate delete G1
    }
    
    test transaction-2.3 {error, really undone} -setup {
        setup
    } -body {
        addgroup G1

        catch {
            cif transaction "Add groups" {
                addgroup G2
                addgroup G3 color NONESUCH
            }
        }

        frcgroup names
    } -cleanup {
        cleanup
    } -result {G1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







