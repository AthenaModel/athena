# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-SERVICE.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    TACTIC:SERVICE:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable B1
        variable T1

        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD USAID

        set B1 [ted addblock SYSTEM]
        set T1 [ted addtactic $B1 SERVICE]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:SERVICE

    test TACTIC:SERVICE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:SERVICE-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid SERVICE ID: "NONESUCH"}
    }

    test TACTIC:SERVICE-1.3 {invalid los} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE tactic_id [$T1 id] los NONESUCH
    } -cleanup {
        cleanup
    } -result {
        los {invalid value "NONESUCH", should be a real number in range 0.0, 1.0}
    }

    test TACTIC:SERVICE-1.4 {invalid s} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE tactic_id [$T1 id] s NONESUCH
    } -cleanup {
        cleanup
    } -result {
        s {invalid value "NONESUCH", should be one of: ENERGY, WATER, TRANSPORT}
    }

    test TACTIC:SERVICE-1.5 {negative los} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE tactic_id [$T1 id] los -0.1
    } -cleanup {
        cleanup
    } -result {
        los {invalid value "-0.1", should be a real number in range 0.0, 1.0}
    }

    test TACTIC:SERVICE-1.6 {los too large} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE tactic_id [$T1 id] los 10.0
    } -cleanup {
        cleanup
    } -result {
        los {invalid value "10.0", should be a real number in range 0.0, 1.0}
    }

    test TACTIC:SERVICE-1.7 {invalid mode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE tactic_id [$T1 id] mode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "NONESUCH", should be one of: EXACT, REQ, EXPECT, DELTA}
    }

    test TACTIC:SERVICE-1.8 {invalid deltap, mode is DELTA} -setup {
        setup
    } -body {
        ted order -reject TACTIC:SERVICE \
            tactic_id [$T1 id] \
            mode DELTA         \
            deltap 999
    } -cleanup {
        cleanup
    } -result {
        deltap {invalid value "999", expected double in range -100.0, 100.0}
    }

    test TACTIC:SERVICE-2.1 {tactic valid} -setup {
        setup
    } -body {
        ted order TACTIC:SERVICE \
            tactic_id [$T1 id]  \
            nlist     [gofer construct NBHOODS BY_VALUE {NB1 NB2}] \
            s         ENERGY \
            los       0.75

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        deltap     0.0
        execstatus NONE
        faildict   {}
        id         5
        los        0.75
        mode       EXACT
        nlist      {_type NBHOODS _rule BY_VALUE nlist {NB1 NB2}}
        parent     4
        pot        ::pot
        s          ENERGY
        state      normal
    }

    test TACTIC:SERVICE-2.2 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:SERVICE \
            tactic_id [$T1 id]  \
            nlist     [gofer construct NBHOODS BY_VALUE {NB1 NB2}] \
            s         ENERGY \
            los       0.75
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:SERVICE-2.3 {undo notifier event} -setup {
        setup
        ted order TACTIC:SERVICE \
            tactic_id [$T1 id]  \
            nlist     [gofer construct NBHOODS BY_VALUE {NB1 NB2}] \
            s         ENERGY \
            los       0.75
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test TACTIC:SERVICE-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







