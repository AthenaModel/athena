# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_stance.test
#
# AUTHOR:
#    Will Duquette
#    Dave Hanks
#
# DESCRIPTION:
#    tactic_stance(sim) tests.
#
#    This test suite tests the tactic_stance(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable B1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 STANCE]
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        drel       0.0
        execstatus NONE
        f          {}
        faildict   {}
        glist      {_type GROUPS _rule {}}
        id         *
        mode       BY_GROUP
        nlist      {_type NBHOODS _rule {}}
        parent     ::bean::block*
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::STANCE new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Group ??? adopts a stance of 0.00 (Is Indifferent To) toward group ???.}

    test narrative-1.2 {valid fields, by group} -setup {
        setup
        $T1 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Group {group:BLUE} adopts a stance of 0.00 (Is Indifferent To) toward these groups (SHIA, SUNN).}

    test narrative-1.3 {valid fields, by neighborhood} -setup {
        setup
        $T1 configure \
            -f BLUE \
            -mode BY_NBHOOD \
            -nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Group {group:BLUE} adopts a stance of 0.00 (Is Indifferent To) toward the group(s) in these neighborhoods (NB1, NB2).}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: f no longer exists} -setup {
        setup
        $T1 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
        rdb eval {DELETE FROM frcgroups WHERE g='BLUE'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {f {JOE does not own a group called "BLUE".}}

    test check-1.2 {check: g in glist no longer exists} -setup {
        setup
        $T1 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
        rdb eval {DELETE FROM groups WHERE g='SUNN'}
        rdb eval {DELETE FROM civgroups WHERE g='SUNN'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {glist {Invalid group, should be one of: BLUE, BRIT, KURD, SHIA}}

    test check-1.3 {check: n in nlist no longer exists} -setup {
        setup
        $T1 configure \
            -f BLUE \
            -mode BY_NBHOOD \
            -nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        rdb eval {DELETE FROM nbhoods WHERE n='NB1'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {Invalid neighborhood, should be one of: NB2}}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {normally successful} -setup {
        setup
        $T1 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
    } -body {
        $T1 execute
        ted query {SELECT * FROM stance_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    stance 
---- ---- ------ 
BLUE SHIA 0.0    
BLUE SUNN 0.0    
    }

    test execute-1.2 {unsuccessful when stances already set} -setup {
        setup
        set T2 [ted addtactic $B1 STANCE]
        $T1 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
        $T2 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -drel 0.5 \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
    } -body {
        $T1 execute
        $T2 execute
        ted query {SELECT * FROM stance_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    stance 
---- ---- ------ 
BLUE SHIA 0.0    
BLUE SUNN 0.0    
    }

    test execute-2.1 {BY_NBHOOD mode} -setup {
        setup
        $T1 configure \
            -f BLUE \
            -mode BY_NBHOOD \
            -drel 0.8 \
            -nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
    } -body {
        $T1 execute
        ted query {SELECT * FROM stance_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    stance 
---- ---- ------ 
BLUE SHIA 0.8    
BLUE SUNN 0.8    
BLUE KURD 0.8    
    }

    test execute-2.2 {BY_GROUP mode} -setup {
        setup
        $T1 configure \
            -f BLUE   \
            -mode BY_GROUP \
            -drel 0.6 \
            -glist [gofer construct GROUPS BY_VALUE {SHIA SUNN}]
    } -body {
        $T1 execute 
        ted query {SELECT * FROM stance_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    stance 
---- ---- ------ 
BLUE SHIA 0.6    
BLUE SUNN 0.6    
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






