# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_maintain.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_maintain(sim) tests.
#
#    This test suite tests the tactic::MAINTAIN ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        econ setstate ENABLED
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD BLUE

        rdb eval {
            INSERT INTO plants_shares(n, a, num, rho)
            VALUES('NB1', 'JOE', 1, 0.9);
        }

        demog start
        plant start
        cash load

        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 MAINTAIN]
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        variable coffer
        $coffer destroy
        ted cleanup
    }

       
    #-------------------------------------------------------------------
    # constructor
    
    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     100000
        execstatus NONE
        faildict   {}
        fmode      ALL
        id         *
        level      0.0
        name       T*
        nlist      {_type NBHOODS _rule {}}
        parent     *
        percent    100
        pot        ::pot
        rmode      FULL
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::MAINTAIN new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend as much cash-on-hand as possible to maintain full capacity of the infrastructure owned in nbhood ???.}

    test narrative-1.2 {narrative, two nbhoods} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set amount 10000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend as much cash-on-hand as possible to maintain full capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.3 {narrative, rmode FULL} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set amount 10000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend as much cash-on-hand as possible to maintain full capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.4 {narrative, rmode UPTO} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set rmode UPTO
        $T1 set level 80
        $T1 set amount 10000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend as much cash-on-hand as possible to maintain at least 80.0% capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.5 {narrative, fmode PERCENT} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set level 80
        $T1 set fmode PERCENT
        $T1 set percent 10
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend no more than 10.0% of cash-on-hand to maintain full capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    test narrative-1.6 {narrative, fmode EXACT} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set level 80
        $T1 set fmode EXACT
        $T1 set amount 10000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Spend no more than $10,000 of cash-on-hand to maintain full capacity of the infrastructure owned in these neighborhoods (NB1, NB2).}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails}  -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {No rule specified}}

    test check-1.2 {check: n in nlist no longer exist} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        rdb eval {DELETE FROM nbhoods WHERE n='NB2'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {nlist {Invalid neighborhood, should be one of: NB1}}

    test check-1.3 {check: owner has auto-maintain enabled} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        rdb eval {UPDATE actors SET auto_maintain=1}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {owner {JOE has auto maintenance enabled.}}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {rmode FULL, no cap} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.2 {rmode FULL, spending cap} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set fmode EXACT
        $T1 set amount 5000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 5000.0}

    test obligate-1.3 {rmode UPTO, 100%, no cap} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set rmode UPTO
        $T1 set level 100.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.4 {rmode UPTO, 100%, spending cap} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set rmode UPTO
        $T1 set level 100.0
        $T1 set fmode EXACT
        $T1 set amount 5000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 5000.0}

    test obligate-1.5 {rmode UPTO, < 100%} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set rmode UPTO
        $T1 set level 90.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.6 {fmode EXACT, use less than cash available} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set fmode EXACT
        $T1 set amount 5000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 5000.0}

    test obligate-1.7 {fmode EXACT, use all cash available} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set fmode EXACT
        $T1 set amount 100000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.8 {fmode PERCENT} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set fmode PERCENT
        $T1 set percent 10.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 9000.0}

    test obligate-1.9 {no money} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set amount 50000.0
        $coffer spend [$coffer cash]
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -match glob -result {CASH {Need * for repairs, have none.}}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: succeeds} -setup {
        setup
        $T1 set nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
        $T1 set amount 10000
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand gifts 
--- ------------ ------- ------------ ----- 
JOE 200000.0     10000.0 0.0          0.0   
BOB 150000.0     5000.0  5000.0       0.0   
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





