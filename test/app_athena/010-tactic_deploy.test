# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_deploy.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_deploy(sim) tests.
#
#    This test suite tests the tactic_deploy(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # setup ?mode?
    #
    # mode  - base,  strategy context set, T1 is invalid.  (Default)
    #         valid, strategy context set, T1 is valid
    #         prep,  no strategy context set, T1 is valid
    #
    # If mode is "base" or "valid", $coffer is defined and the context
    # is set as though we are beginning strategy execution.
    #
    # If mode is "prep", we are simply in PREP and are ready to
    # lock the scenario.

    proc setup {{mode base}} {
        variable T1
        variable coffer
        ted create JOE BOB DAVE NB1 NB2 BLUE BRIT SHIA SUNN KURD

        setcost 1.0

        set B1 [ted addblock JOE onlock 1]
        set T1 [ted addtactic $B1 DEPLOY]

        # Make T1 valid, if appropriate
        if {$mode in {valid prep}} {
            $T1 configure \
                -g     BLUE \
                -nlist [gofer construct NBHOODS BY_VALUE {NB1 NB2}]
            assert {[$T1 check] eq ""}
        }

        # Enter strategy execution context, if appropriate
        if {$mode in {base valid}} {
            context
        } else {
            set coffer ""
        }
    }

    # Enter the strategy execution context.  This defines the coffer,
    # etc.
    proc context {} {
        variable coffer

        if {[sim state] eq "PREP"} {
            demog start
            personnel start
        }

        cash load
        personnel load
        set coffer [coffer new JOE]
    }

    # Set the maintenance cost for BLUE, in $/person deployed
    proc setcost {cost} {
        ted order FRCGROUP:UPDATE g BLUE cost $cost
    }

    # Set the amount of cash in the coffer.
    proc setcash {amount} {
        variable coffer
        $coffer deposit [$coffer cash]
        $coffer withdraw $amount
    }

    # Set the number of troops available for deployment.
    proc settroops {personnel} {
        variable coffer
        $coffer demobilize BLUE [$coffer troops BLUE undeployed]

        if {$personnel > 0} {
            $coffer mobilize BLUE $personnel
        }
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        if {$coffer ne ""} {
            $coffer destroy
        }
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        faildict   {}
        g          {}
        id         *
        last_tick  {}
        max        0
        min        0
        nlist      {_type NBHOODS _rule {}}
        nmode      BY_POP
        parent     ::bean::block*
        percent    0
        personnel  0
        pmode      ALL
        redeploy   0
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::DEPLOY new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Deploy all of group ???'s undeployed personnel into nbhood ??? as an existing deployment, allocating personnel to neighborhoods in proportion to population.}

    test narrative-1.2 {with g and nlist} -setup {
        setup
        $T1 configure -g BLUE -nlist [gofer construct NBHOODS BY_VALUE NB1]
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy all of group {group:BLUE}'s undeployed personnel into neighborhood NB1 as *}

    test narrative-1.3 {redeploy} -setup {
        setup
        $T1 configure -redeploy 1
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy * as a new deployment, *.}

    test narrative-2.1 {pmode SOME} -setup {
        setup
        $T1 configure -pmode SOME -personnel 1000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy 1000 of group ???'s undeployed personnel *}

    test narrative-2.2 {pmode UPTO} -setup {
        setup
        $T1 configure -pmode UPTO -min 1000 -max 2000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy at least 1000 and up to 2000 of group ???'s undeployed personnel *}

    test narrative-2.3 {pmode ALLBUT} -setup {
        setup
        $T1 configure -pmode ALLBUT -personnel 1000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy all but 1000 of group ???'s undeployed personnel *}

    test narrative-2.4 {pmode PERCENT} -setup {
        setup
        $T1 configure -pmode PERCENT -percent 25.5
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy 25.5% of group ???'s undeployed personnel *}

    test narrative-3.1 {nmode EQUAL} -setup {
        setup
        $T1 configure -nmode EQUAL
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -match glob -result {Deploy *, allocating an equal number of personnel to each neighborhood.}


    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        g     {No group selected.} 
        nlist {No rule specified}
    }

    test check-1.2 {g doesn't exist or is owned by another actor} -setup {
        setup
    } -body {
        $T1 configure -g NONESUCH -nlist [gofer construct NBHOODS BY_VALUE NB1]
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -result {
        g {JOE does not own a group called "NONESUCH".}
    }

    test check-2.1 {Success} -setup {
        setup
    } -body {
        $T1 configure -g BLUE -nlist [gofer construct NBHOODS BY_VALUE NB1]
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate
    #
    # The following tree shows an outline of the test cases, with 
    # outline numbers.
    #
    # new deployments
    #   1.* do a new deployment
    #       on lock
    #       when redeploy is set
    #       last_tick is ""
    #       last_tick is too early
    #   2.* general success characteristics: 
    #       nmode=BY_POP, troops deployed by population
    #       nmode=EQUAL, troops deployed equally
    #       troops obligated
    #       cash obligated
    #   3.*: nlist failures
    #       failure: nlist produces no neighborhoods
    #       failure: nmode=BY_POP, nlist produces only empty neighborhoods
    #   4.*: pmode=ALL
    #       success: empty deployment
    #           -> No troops or cash obligated
    #       success: on lock, can afford all troops
    #       success: on tick, can afford all troops
    #       success: on tick, can afford some troops
    #       failure: on tick, can't afford any troops.
    #   5.* pmode=SOME
    #       failure: insufficient troops
    #       failure: ontick, insufficient cash
    #       success: sufficient troops and cash
    #       success: onlock, sufficient troops, insufficient cash
    #   6.* pmode=UPTO
    #       failure: insufficient troops
    #       failure: on tick, insufficient cash
    #       success: sufficient troops and cash, max allocated
    #       success: on tick, not enough cash for max
    #       success: not enough troops for max
    #       success: on lock, not enough cash for max
    #   7.* pmode=ALLBUT
    #       success: no troops to deploy, empty deployment.
    #       failure: on tick, insufficient cash
    #       success: on tick, sufficient cash
    #       success: on lock, insufficient cash
    #   8.* pmode=PERCENT
    #       success: no troops to deploy, empty deployment.
    #       failure: on tick, insufficient cash
    #       success: on tick, sufficient cash
    #       success: on lock, insufficient cash
    # 9.*: existing deployment
    #   success: empty deployment
    #       -> no troops obligated
    #       -> no cash obligated
    #   success: troops deployed
    #       -> troops obligated
    #       -> cash obligated
    #   failure: insufficient troops
    #   failure: insufficient cash

    # 1.*: New Deployments; Verify that we do the right kind of 
    # deployment, new or existing.

    test obligate-1.1 {get old on first tick after lock} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
    } -body {
        $T1 obligate $coffer 
        $T1 trans old
    } -cleanup {
        cleanup
    } -result {1}

    test obligate-1.2 {get new on lock} -setup {
        setup prep  ;# Set up in PREP state
    } -body {
        ted lock    ;# All personnel should be deployed 
        $T1 trans old
    } -cleanup {
        cleanup
    } -result {0}

    test obligate-1.3 {get new when redeploy is set} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
    } -body {
        $T1 configure -redeploy 1
        $T1 obligate $coffer
        $T1 trans old
    } -cleanup {
        cleanup
    } -result {0}

    test obligate-1.4 {get new when last_tick is ""} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
    } -body {
        $T1 configure -last_tick ""
        $T1 obligate $coffer
        $T1 trans old
    } -cleanup {
        cleanup
    } -result {0}

    test obligate-1.5 {get new when last_tick is too early} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
    } -body {
        $T1 configure -last_tick -2
        $T1 obligate $coffer
        $T1 trans old
    } -cleanup {
        cleanup
    } -result {0}

    # 2.*: General Success Characteristics

    test obligate-2.1 {nmode=BY_POP, troops deployed by pop} -setup {
        setup prep  ;# Set up in PREP state
    } -body {
        $T1 configure -nmode BY_POP
        ted lock 

        # NB1 has twice the population of NB2
        rdb eval {SELECT n,personnel FROM deploy_ng WHERE g='BLUE'}
    } -cleanup {
        cleanup
    } -result {NB1 3333 NB2 1667}
   
    test obligate-2.2 {nmode=EQUAL, troops deployed equally} -setup {
        setup prep  ;# Set up in PREP state
    } -body {
        $T1 configure -nmode EQUAL
        ted lock 

        rdb eval {SELECT n,personnel FROM deploy_ng WHERE g='BLUE'}
    } -cleanup {
        cleanup
    } -result {NB1 2500 NB2 2500}

    test obligate-2.3 {troops and cash obligated} -setup {
        setup valid
    } -body {
        set a [$coffer cash]
        set b [$coffer troops BLUE undeployed]

        set c [$T1 obligate $coffer]
        set d [$coffer cash]
        set e [$coffer troops BLUE undeployed]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {10000.0 5000 1 5000.0 0}
   
    # 3.*: New deployment, nlist failures 

    test obligate-3.1 {nlist returns no neighborhoods} -setup {
        setup valid
    } -body {
        $T1 configure -nlist [gofer construct NBHOODS WITH_DEPLOYMENT ALL BRIT]
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {WARNING {Gofer retrieved no neighborhoods.}}

    test obligate-3.2 {nlist returns empty neighborhoods} -setup {
        setup valid
        rdb eval {UPDATE demog_n SET population=0}
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {WARNING {All retrieved neighborhoods are empty.}}

    # 4.*: New deployment, pmode = ALL

    test obligate-4.1 {pmode=ALL, empty deployment} -setup {
        setup valid
        $coffer demobilize BLUE [$coffer troops BLUE undeployed]
    } -body {
        set a [$T1 obligate $coffer]
        set b [$T1 trans deployment]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 {} 10000.0}

    test obligate-4.2 {pmode=ALL, on lock can afford all troops} -setup {
        setup valid
        setcost 10   ;# $10 * 5000 troops = $50,000; $10,000 available
        strategy locking 1
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE undeployed]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 0}

    test obligate-4.3 {pmode=ALL, on tick, can afford all troops} -setup {
        setup valid
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 5000.0 0}

    test obligate-4.4 {pmode=ALL, on tick, can afford some troops} -setup {
        setup valid
        setcost 10   ;# $10 * 5000 troops = $50,000; $10,000 available
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        # Deployed 1000, leaving 4000
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 4000}

    test obligate-4.5 {pmode=ALL, on tick, can't afford any troops} -setup {
        setup valid
        $coffer spend [$coffer cash]
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Could not afford to deploy any troops.}}

    # 5.*: New deployment, pmode=SOME

    test obligate-5.1 {pmode=SOME, insufficient troops} -setup {
        setup valid
        $T1 configure -pmode SOME -personnel 10000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {PERSONNEL {Required 10000 personnel, but had only 5000 available.}}

    test obligate-5.2 {pmode=SOME, on tick, insufficient cash} -setup {
        setup valid
        setcost 10
        $T1 configure -pmode SOME -personnel 5000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $50,000, but had only $10,000.}}

    test obligate-5.3 {pmode=SOME, sufficient troops and cash} -setup {
        setup valid
        $T1 configure -pmode SOME -personnel 1000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 9000.0 4000}

    test obligate-5.4 {pmode=SOME, on lock, sufficient troops, no cash} -setup {
        setup valid
        $T1 configure -pmode SOME -personnel 1000
        $coffer spend [$coffer cash]
        strategy locking 1
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE undeployed]

        list $a $b
    } -cleanup {
        cleanup
    } -result {1 4000}

    # 6.*: New deployment, pmode=UPTO

    test obligate-6.1 {pmode=UPTO, insufficient troops} -setup {
        setup valid
        $T1 configure -pmode UPTO -min 10000 -max 20000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {PERSONNEL {Required 10000 personnel, but had only 5000 available.}}

    test obligate-6.2 {pmode=UPTO, insufficient cash} -setup {
        setup valid
        setcost 10
        $T1 configure -pmode UPTO -min 5000 -max 10000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $50,000, but had only $10,000.}}

    test obligate-6.3 {pmode=UPTO, success, max allocated} -setup {
        setup valid
        $T1 configure -pmode UPTO -min 1000 -max 2000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 8000.0 3000}

    test obligate-6.4 {pmode=UPTO, success, no cash for max} -setup {
        setup valid
        setcost 10
        $T1 configure -pmode UPTO -min 100 -max 5000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 4000}

    test obligate-6.5 {pmode=UPTO, success, no troops for max} -setup {
        setup valid
        $T1 configure -pmode UPTO -min 100 -max 10000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 5000.0 0}

    test obligate-6.6 {pmode=UPTO, success, on lock, no cash for max} -setup {
        setup valid
        setcost 100
        strategy locking 1
        $T1 configure -pmode UPTO -min 100 -max 5000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 0}

    # 7.*: New deployment, pmode=ALLBUT

    test obligate-7.1 {pmode=ALLBUT, no troops} -setup {
        setup valid
        $T1 configure -pmode ALLBUT -personnel 5000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 10000.0 5000}

    test obligate-7.2 {pmode=ALLBUT, on tick, no cash} -setup {
        setup valid
        setcost 10
        $T1 configure -pmode ALLBUT -personnel 1000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $40,000, but had only $10,000.}}

    test obligate-7.3 {pmode=ALLBUT, on tick, got cash} -setup {
        setup valid
        $T1 configure -pmode ALLBUT -personnel 1000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 6000.0 1000}

    test obligate-7.4 {pmode=ALLBUT, on lock, no cash} -setup {
        setup valid
        setcost 100
        strategy locking 1
        $T1 configure -pmode ALLBUT -personnel 1000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 1000}


    # 8.*: New deployment, pmode=PERCENT

    test obligate-8.1 {pmode=PERCENT, no troops} -setup {
        setup valid
        settroops 0
        $T1 configure -pmode PERCENT -percent 10
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 10000.0 0}

    test obligate-8.2 {pmode=PERCENT, on tick, no cash} -setup {
        setup valid
        setcost 10
        $T1 configure -pmode PERCENT -percent 100
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $50,000, but had only $10,000.}}

    test obligate-8.3 {pmode=PERCENT, on tick, got cash} -setup {
        setup valid
        $T1 configure -pmode PERCENT -percent 50
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 7500.0 2500}

    test obligate-8.4 {pmode=PERCENT, on lock, no cash} -setup {
        setup valid
        setcost 100
        strategy locking 1
        $T1 configure -pmode PERCENT -percent 50
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer cash]
        set c [$coffer troops BLUE undeployed]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0.0 2500}

    # 9.*: Existing Deployment

    test obligate-9.1 {empty deployment} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
        setcash 10000.0

        # Make it look like all personnel have been attrited away
        rdb eval {DELETE FROM working_deploy_tng}
    } -body {
        list \
            [$T1 obligate $coffer] \
            [$T1 trans old]        \
            [$T1 trans deployment] \
            [$coffer cash]         \
            [$coffer troops BLUE undeployed] 
    } -cleanup {
        cleanup
    } -result {1 1 {} 10000.0 5000}

    test obligate-9.2 {troops deployed} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
        setcash 10000.0
    } -body {
        list \
            [$T1 obligate $coffer] \
            [$T1 trans old]        \
            [$T1 trans deployment] \
            [$coffer cash]         \
            [$coffer troops BLUE undeployed] 
    } -cleanup {
        cleanup
    } -result {1 1 {NB1 3333 NB2 1667} 5000.0 0}

    test obligate-9.3 {insufficient troops} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
        setcash 10000.0
        $coffer demobilize BLUE 1000
    } -body {
        $T1 obligate $coffer
        list [$T1 trans old] {*}[$T1 faildict]
    } -cleanup {
        cleanup
    } -result {1 PERSONNEL {Required 5000 personnel, but had only 4000 available.}}

    test obligate-9.4 {insufficient cash} -setup {
        setup prep  ;# Set up in PREP state
        ted lock    ;# All personnel should be deployed 
        context     ;# Provide execution context
        setcash 1000.0
    } -body {
        $T1 obligate $coffer
        list [$T1 trans old] {*}[$T1 faildict]
    } -cleanup {
        cleanup
    } -result {1 CASH {Required $5,000, but had only $1,000.}}


    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {deploys troops} -setup {
        setup prep
    } -body {
        ted lock  ;# Executes T1
        rdb eval {SELECT n, personnel FROM deploy_tng WHERE g='BLUE'}
    } -cleanup {
        cleanup
    } -match glob -result {NB1 3333 NB2 1667}

    test execute-1.2 {expends cash} -setup {
        setup prep
    } -body {
        ted lock ;# Executes T1
        rdb onecolumn {SELECT cash_on_hand FROM working_cash WHERE a='JOE'}
    } -cleanup {
        cleanup
    } -result {5000.0}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::









