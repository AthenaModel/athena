# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-CURSE.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    app_sim(1) TACTIC:CURSE:* order tests.
#
#    This test suite tests the CURSE tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB SHIA SUNN BLUE

        variable S1
        variable B1
        variable T1

        set S1 [strategy getname SYSTEM]
        ted order STRATEGY:BLOCK:ADD agent SYSTEM

        ted order CURSE:CREATE curse_id C1
        ted order CURSE:CREATE curse_id C2

        ted order INJECT:SAT:CREATE curse_id C1 g @CIV1 c SFT mag XL+
        ted order INJECT:SAT:CREATE curse_id C2 g @CIV2 c SFT mag XL+

        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename CURSE

        lassign [$B1 tactics] T1
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard items

    set TC1 {
        curse C1
        roles {@CIV1 {
                  _type CIVGROUPS
                  _rule BY_VALUE
                  raw_value {SUNN SHIA}
                  }
              }
    }

    #-------------------------------------------------------------------
    # TACTIC:CURSE

    test TACTIC:CURSE-1.1 {required parms} -body {
        ted order -reject TACTIC:CURSE
    } -result {
        tactic_id {required value}
    }

    test TACTIC:CURSE-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid CURSE ID: "NONESUCH"}
    }

    test TACTIC:CURSE-1.3 {roles is not a dict} -setup {
        setup
    } -body {
        ted order TACTIC:CURSE tactic_id [$T1 id] roles NONESUCH
        $T1 check
    } -cleanup {
        cleanup
    } -match glob -result {*roles {NONESUCH: not a dictionary}}

    test TACTIC:CURSE-1.4 {roles is invalid} -setup {
        setup
    } -body {
        ted order TACTIC:CURSE tactic_id [$T1 id] roles {NONESUCH NONESUCH}
        $T1 check
    } -cleanup {
        cleanup
    } -match glob -result {*roles {Not a gofer value}}

    test TACTIC:CURSE-1.5 {curse isn't normal} -setup {
        setup
        ted order CURSE:STATE curse_id C1 state disabled
    } -body {
        ted order TACTIC:CURSE tactic_id [$T1 id] curse C1
        $T1 check
    } -cleanup {
        cleanup
    } -match glob -result {curse {Curse C1 is disabled.}*}

    test TACTIC:CURSE-1.6 {invalid name} -setup {
        setup
    } -body {
        ted order -reject TACTIC:CURSE tactic_id [$T1 id] name 1234
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:CURSE-1.7 {duplicate name} -setup {
        setup
        set T2 [ted addtactic $B1 ABSIT]
    } -body {
        ted order -reject TACTIC:CURSE tactic_id [$T1 id] \
            name [$T2 get name]
    } -cleanup {
        cleanup
    } -match glob -result {
        name {Name already exists: "T2"}
    }

    test TACTIC:CURSE-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:CURSE tactic_id [$T1 id] {*}$TC1

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        curse      C1
        execstatus NONE
        faildict   {}
        id         *
        name       T*
        parent     *
        pot        *::pot
        roles      *
        state      normal
    }

    test TACTIC:CURSE-2.2 {notifiers} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:CURSE tactic_id [$T1 id] {*}$TC1
        ted notifier received

        # NOTE: Two updates, because of priority setting.
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}


    test TACTIC:CURSE-3.1 {undo notifier event} -setup {
        setup
        ted order TACTIC:CURSE tactic_id [$T1 id] 
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        adb order undo
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:CURSE-4.1 {identity} -setup {
        setup
        # Create a tactic in the initial state
        set T1 [ted addtactic $B1 CURSE]
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





