# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_compare.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_compare(sim) tests.
#
#    This test suite tests the condition_compare(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable C1
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        set C1 [condition::COMPARE new]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        comp    EQ
        id      *
        metflag {}
        parent  {}
        state   normal
        x       {_type NUMBER _rule BY_VALUE raw_value 0}
        y       {_type NUMBER _rule BY_VALUE raw_value 0}
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set C1 [condition::COMPARE new -parent DUMMY]
        $C1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}


    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, initial state} -setup {
        setup
    } -body {
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Compare whether 0 is equal to 0}

    test narrative-1.2 {narrative, with group} -setup {
        setup
        $C1 configure \
            -x [gofer construct NUMBER COOP SHIA BLUE] \
            -comp LT \
            -y [gofer construct NUMBER BY_VALUE 45.0]
    } -body {
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Compare whether coop("SHIA","BLUE") is less than 45.0}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: invalid x,y} -setup {
        setup
        $C1 configure \
            -x [gofer construct NUMBER COOP SHIA BLUE] \
            -y [gofer construct NUMBER COOP SUNN BRIT]
        rdb eval {
            DELETE FROM civgroups WHERE g ='SHIA';
            DELETE FROM frcgroups WHERE g ='BRIT';
        }
    } -body {
        ted pdicts [$C1 check]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        x {Invalid civilian group, should be one of: *}
        y {Invalid force group, should be one of: *}
    }

    test check-1.2 {check: successful} -setup {
        setup
        $C1 configure \
            -x [gofer construct NUMBER COOP SHIA BLUE] \
            -y [gofer construct NUMBER COOP SUNN BRIT]
    } -body {
        $C1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # eval
    #
    # We know that the tactic is using ecomparatorx to do the comparison,
    # so we don't need to check every value of comp.
    #
    # We know that x and y are gofer::NUMBER values; we don't need to
    # check every possible x and y value.
    #
    # So just check two numbers.

    test eval-1.1 {Test eval} -setup {
        setup
    } -body {
        # x and y are both zero                
        $C1 configure -comp LT
        set a [$C1 eval]

        $C1 configure -comp EQ
        set b [$C1 eval]

        list $a $b
    } -cleanup {
        cleanup
    } -result {0 1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








