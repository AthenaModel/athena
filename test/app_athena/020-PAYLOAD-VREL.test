# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-PAYLOAD-VREL.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) PAYLOAD:VREL:* order tests.
#
#    This test suite tests the VREL payload's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE BOB IOM1 IOM2
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # Standard payloads

    set P1 {
        iom_id       IOM1
        a            JOE
        mag          1.0
    }

    set P2 {
        iom_id       IOM2
        a            BOB
        mag          M+ 
    }

    #-------------------------------------------------------------------
    # PAYLOAD:VREL:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:VREL:CREATE {}
    } -result {
        iom_id {required value}
        a {required value}
        mag {required value}
    }

    test CREATE-1.2 {iom_id is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:VREL:CREATE {*}$P1 iom_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        iom_id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test CREATE-1.3 {a is unknown} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:VREL:CREATE {*}$P1 a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test CREATE-1.4 {mag is invalid} -setup {
        setup
    } -body {
        ted order -reject PAYLOAD:VREL:CREATE {*}$P1 mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test CREATE-2.1 {payload is created} -setup {
        setup
    } -body {
        ted order PAYLOAD:VREL:CREATE $P2

        ted querylist {SELECT * FROM gui_payloads_VREL}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  VREL
narrative     Change vertical relationships with BOB by 5.0 points (M+).
state         normal
a             BOB
mag           5.0
    }

    test CREATE-2.2 {Effects} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <payloads>
        ted order PAYLOAD:VREL:CREATE $P1
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> update {IOM1 1}}
    }


    test CREATE-3.1 {undo effects} -setup {
        setup
        ted order PAYLOAD:VREL:CREATE $P1
    } -body {
        ted notifier bind ::rdb <payloads>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> delete {IOM1 1}}
    }

    #-------------------------------------------------------------------
    # PAYLOAD:VREL:UPDATE

    proc setup_update_vrel {} {
        variable P2
        setup
        ted order PAYLOAD:VREL:CREATE $P2
    }

    test UPDATE-1.1 {required parms} -body {
        ted order -reject PAYLOAD:VREL:UPDATE {}
    } -result {
        id {required value}
    }

    
    test UPDATE-1.2 {IOM in id is unknown} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {NONESUCH 1}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid IOM, should be one of: IOM1, IOM2}
    }

    test UPDATE-1.3 {payload number in id is unknown} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {IOM1 NONESUCH}
    } -cleanup {
        cleanup
    } -result {
        id {Invalid payload "IOM1 NONESUCH", no payloads are defined for this IOM}
    }

    test UPDATE-1.4 {a is unknown} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {IOM2 1} a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: BOB, JOE}
    }

    test UPDATE-1.5 {mag is invalid} -setup {
        setup_update_vrel
    } -body {
        ted order -reject PAYLOAD:VREL:UPDATE id {IOM2 1} mag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mag {invalid value "NONESUCH", should be a real number in range -100.0, 100.0, or one of: XXXXL+, XXXL+, XXL+, XL+, L+, M+, S+, XS+, XXS+, XXXS+, ZERO, XXXS-, XXS-, XS-, S-, M-, L-, XL-, XXL-, XXXL-, XXXXL-}
    }

    test UPDATE-2.1 {payload is updated} -setup {
        setup_update_vrel
    } -body {
        ted order PAYLOAD:VREL:UPDATE id {IOM2 1} a JOE mag 10.0

        ted querylist {SELECT * FROM gui_payloads_VREL}
    } -cleanup {
        cleanup
    } -result {
id            IOM2 1
iom_id        IOM2
payload_num   1
payload_type  VREL
narrative     Change vertical relationships with JOE by 10.0 points (XL+).
state         normal
a             JOE
mag           10.0
    }

    test UPDATE-2.2 {Effects} -setup {
        setup
        ted order PAYLOAD:VREL:CREATE $P2
    } -body {
        ted notifier bind ::rdb <payloads>
        ted order PAYLOAD:VREL:UPDATE id {IOM2 1} a JOE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> update {IOM2 1}}
        {::rdb <payloads> update {IOM2 1}}
    }


    test UPDATE-3.1 {undo effects} -setup {
        setup_update_vrel
        ted order PAYLOAD:VREL:UPDATE id {IOM2 1} a JOE
    } -body {
        ted notifier bind ::rdb <payloads>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <payloads> update {IOM2 1}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





