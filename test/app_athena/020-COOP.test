# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-COOPERATION.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) COOP:* order tests.
#
#    This test suite tests the cooperation-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create BLUE NB1 SHIA SUNN
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }


    #-------------------------------------------------------------------
    # COOP:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject COOP:UPDATE {}
    } -result {
        id {required value}
    }
    

    test UPDATE-1.2 {invalid id} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        id {Invalid civilian group, should be one of: SHIA, SUNN}
    }


    test UPDATE-1.3 {invalid base: out of range} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE id {SHIA BLUE} base 100.1
    } -cleanup {
        cleanup
    } -result {
        base {invalid value "100.1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }

    test UPDATE-1.4 {invalid regress_to} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE id {SHIA BLUE} regress_to NONESUCH
    } -cleanup {
        cleanup
    } -result {
        regress_to {invalid value "NONESUCH", should be one of: BASELINE, NATURAL}
    }

    test UPDATE-1.5 {invalid natural} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE id {SHIA BLUE} natural NONESUCH
    } -cleanup {
        cleanup
    } -result {
        natural {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }

    test UPDATE-2.1 {base is updated} -setup {
        setup
    } -body {
        ted order COOP:UPDATE {
            id          {SHIA BLUE}
            base        40.0
            regress_to  NATURAL
            natural     70.0
        }

        ted query {SELECT * FROM coop_fg}
    } -cleanup {
        cleanup
    } -result {
f    g    base regress_to natural 
---- ---- ---- ---------- ------- 
SHIA BLUE 40.0 NATURAL    70.0    
SUNN BLUE 50.0 BASELINE   50.0    
    }


    test UPDATE-2.2 {<coop_fg> update} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <coop_fg>
        ted order COOP:UPDATE id {SHIA BLUE} base 50.0
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <coop_fg> update {SHIA BLUE}}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted order COOP:UPDATE {
            id      {SHIA BLUE}
            base    40.0
        }
    } -body {
        ted notifier bind ::rdb <coop_fg>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <coop_fg> update {SHIA BLUE}}
    }

    #-------------------------------------------------------------------
    # COOP:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE:MULTI {}
    } -cleanup {
        cleanup
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid id in ids} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE:MULTI \
            ids {NONESUCH1 {SHIA BLUE}}
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid civilian group, should be one of: SHIA, SUNN}
    }

    test UPDATE:MULTI-1.3 {invalid coop: out of range} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE:MULTI \
            ids {{SHIA BLUE}} base 100.1
    } -cleanup {
        cleanup
    } -result {
        base {invalid value "100.1", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }


    test UPDATE:MULTI-1.4 {invalid regress_to} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE:MULTI \
            ids {{SHIA BLUE}} regress_to NONESUCH
    } -cleanup {
        cleanup
    } -result {
        regress_to {invalid value "NONESUCH", should be one of: BASELINE, NATURAL}
    }

    test UPDATE:MULTI-1.5 {invalid natural} -setup {
        setup
    } -body {
        ted order -reject COOP:UPDATE:MULTI \
            ids {{SHIA BLUE}} natural NONESUCH
    } -cleanup {
        cleanup
    } -result {
        natural {invalid value "NONESUCH", should be a real number in range 0.0, 100.0, or one of: AC, VC, C, MC, U, VU, NC}
    }

    test UPDATE:MULTI-2.1 {one cooperation of several is updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <coop_fg>

        ted order COOP:UPDATE:MULTI {
            ids         {{SHIA BLUE}}
            base        41
            regress_to  NATURAL
            natural     70.0
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <coop_fg> update {SHIA BLUE}}
    }


    test UPDATE:MULTI-2.2 {several cooperations are updated} -setup {
        setup
    } -body {
        ted notifier bind ::rdb <coop_fg>
        ted order COOP:UPDATE:MULTI {
            ids         {{SHIA BLUE} {SUNN BLUE}} 
            base        40.0
            regress_to  NATURAL
            natural     70.0
        }
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <coop_fg> update {SHIA BLUE}}
        {::rdb <coop_fg> update {SUNN BLUE}}
    }


    test UPDATE:MULTI-3.1 {undo undoes the change} -setup {
        setup

        ted order COOP:UPDATE:MULTI {
            ids         {{SHIA BLUE} {SUNN BLUE}}
            base        40.0
            regress_to  NATURAL
            natural     70.0
        }
    } -body {
        ted notifier bind ::rdb <coop_fg>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <coop_fg> update {SHIA BLUE}}
        {::rdb <coop_fg> update {SUNN BLUE}}
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







