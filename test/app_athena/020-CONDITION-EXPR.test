# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-EXPR.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    CONDITION:EXPR:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    set S1 ::strategy::SYSTEM

    proc setup {} {
        variable B1
        variable C1
        set B1 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 EXPR]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # CONDITION:EXPR

    test CONDITION:EXPR-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject CONDITION:EXPR
    } -cleanup {
        cleanup
    } -result {
        condition_id {required value}
    }

    test CONDITION:EXPR-1.2 {unknown condition_id} -setup {
        setup
    } -body {
        ted order -reject CONDITION:EXPR condition_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        condition_id {Invalid EXPR ID: "NONESUCH"}
    }

    test CONDITION:EXPR-2.1 {condition updated} -setup {
        setup
    } -body {
        ted order CONDITION:EXPR \
            condition_id [$C1 id] \
            expression   "1 + 1 == 2"

        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        expression {1 + 1 == 2}
        id         *
        metflag    {}
        parent     *
        pot        ::pot
        state      normal
    }

    test CONDITION:EXPR-2.2 {sanity check done} -setup {
        setup
    } -body {
        ted order CONDITION:EXPR condition_id [$C1 id] expression ""
        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        expression {}
        id         *
        metflag    {}
        parent     *
        pot        ::pot
        state      invalid
    }

    test CONDITION:EXPR-2.3 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order CONDITION:EXPR condition_id [$C1 id] expression 1
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test CONDITION:EXPR-2.4 {undo notifier event} -setup {
        setup
        ted order CONDITION:EXPR condition_id [$C1 id] expression 1
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test CONDITION:EXPR-3.1 {identity} -setup {
        setup
    } -body {
        ted condition identity $C1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





