# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-ASSIGN.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    TACTIC:ASSIGN:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable B1
        variable T1

        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD USAID

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 ASSIGN]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:ASSIGN

    test TACTIC:ASSIGN-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN
    } -cleanup {
        cleanup
    } -result {
        tactic_id {required value}
    }

    test TACTIC:ASSIGN-1.2 {unknown tactic_id} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        tactic_id {Invalid ASSIGN ID: "NONESUCH"}
    }

    test TACTIC:ASSIGN-1.3 {invalid g} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] g "NONE SUCH"
    } -cleanup {
        cleanup
    } -result {
        g {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:ASSIGN-1.4 {invalid n} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] n "NONE SUCH"
    } -cleanup {
        cleanup
    } -result {
        n {Identifiers begin with a letter and contain only letters and digits.}
    }

    test TACTIC:ASSIGN-1.5 {invalid activity} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] activity NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        activity {Invalid activity, should be one of: *}
    }

    test TACTIC:ASSIGN-1.6 {invalid pmode} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] pmode NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        pmode {invalid value "NONESUCH", should be one of: ALL, *}
    }

    test TACTIC:ASSIGN-1.7 {invalid personnel} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        personnel {invalid value "NONESUCH", expected integer}
    }

    test TACTIC:ASSIGN-1.8 {pmode SOME, personnel is 0} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] pmode SOME
    } -cleanup {
        cleanup
    } -result {
        personnel {For pmode SOME, personnel must be positive.}
    }

    test TACTIC:ASSIGN-1.9 {negative min} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] min -1
    } -cleanup {
        cleanup
    } -result {
        min {invalid value "-1", expected integer no less than 0}
    }

    test TACTIC:ASSIGN-1.10 {zero max} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] \
            pmode UPTO min 0 max 0
    } -cleanup {
        cleanup
    } -result {
        max {For pmode UPTO, max must be greater than 0.}
    }

    test TACTIC:ASSIGN-1.11 {UPTO, max < min} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] \
            pmode UPTO max 1 min 2
    } -cleanup {
        cleanup
    } -result {
        max {For pmode UPTO, max must be greater than min.}
    }

    test TACTIC:ASSIGN-1.12 {invalid percent} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] percent 100.1
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "100.1", expected double in range 0.0, 100.0}
    }

    test TACTIC:ASSIGN-1.13 {PERCENT, percent is 0.0} -setup {
        setup
    } -body {
        ted order -reject TACTIC:ASSIGN tactic_id [$T1 id] \
            pmode PERCENT percent 0.0
    } -cleanup {
        cleanup
    } -result {
        max {For pmode PERCENT, percent must be positive.}
    }

    test TACTIC:ASSIGN-2.1 {tactic updated, still invalid} -setup {
        setup
    } -body {
        ted order TACTIC:ASSIGN \
            tactic_id [$T1 id]  \
            n         NB1       \
            activity  PATROL    \
            pmode     SOME      \
            personnel 1000      \
            min       1         \
            max       2         \
            percent   5.0

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        activity   PATROL
        execstatus NONE
        faildict   {}
        g          {}
        id         *
        max        2
        min        1
        n          NB1
        parent     ::bean::block*
        percent    5.0
        personnel  1000
        pmode      SOME
        state      invalid
    }

    test TACTIC:ASSIGN-2.2 {tactic updated, now valid} -setup {
        setup
    } -body {
        ted order TACTIC:ASSIGN \
            tactic_id [$T1 id]  \
            g         BLUE      \
            n         NB1       \
            activity  PATROL    \
            pmode     SOME      \
            personnel 1000      \
            min       1         \
            max       2         \
            percent   5.0

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        activity   PATROL
        execstatus NONE
        faildict   {}
        g          BLUE
        id         *
        max        2
        min        1
        n          NB1
        parent     ::bean::block*
        percent    5.0
        personnel  1000
        pmode      SOME
        state      normal
    }

    test TACTIC:ASSIGN-2.3 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:ASSIGN tactic_id [$T1 id] \
            g         BLUE     \
            n         NB1      \
            activity  PATROL   \
            pmode     SOME     \
            personnel 1000
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test TACTIC:ASSIGN-2.4 {undo notifier event} -setup {
        setup
        ted order TACTIC:ASSIGN tactic_id [$T1 id] \
            g         BLUE     \
            n         NB1      \
            activity  PATROL   \
            personnel 1000     \
            pmode     SOME
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test TACTIC:ASSIGN-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







