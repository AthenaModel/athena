# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer_number.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    actor(sim) tests.
#
#    This test suite tests the gofer::NUMBER type.
#
#    NOTE: The type itself is implemented using gofer(n); thus,
#    we don't need to test the behavior of the type itself.  As a result,
#    this test suite focusses on the gofer::NUMBER-specific rule
#    objects.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.
namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {{opt ""}} {
        if {$opt eq "-econ"} {
            econ setstate ENABLED
        }
        ted create JOE BOB BLUE BRIT TAL SUNN SHIA KURD USAID
    }

    proc cleanup {} {
        # Clean up the test environment
        array unset parms
        ted cleanup
    }


    #-------------------------------------------------------------------
    # Rule: BY_VALUE

    test BY_VALUE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE construct 45.0
    } -cleanup {
        cleanup
    } -result {raw_value 45.0}

    test BY_VALUE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE validate {raw_value 45.0}
    } -cleanup {
        cleanup
    } -result {raw_value 45.0}

    test BY_VALUE-2.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE validate {raw_value NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid value "NONESUCH", expected double}

    test BY_VALUE-3.1 {narrative} -body {
        ::gofer::NUMBER::BY_VALUE narrative {raw_value 45.0}
    } -result {45.0}

    test BY_VALUE-4.1 {eval} -setup {
        setup
    } -body {
        ::gofer::NUMBER::BY_VALUE eval {raw_value 45.0}
    } -cleanup {
        cleanup
    } -result {45.0}

    #-------------------------------------------------------------------
    # Rule: EXPR

    test EXPR-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::EXPR construct 45.0*8/2
    } -cleanup {
        cleanup
    } -result {expr_value 45.0*8/2}

    test EXPR-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::EXPR validate {expr_value 45.0*8/2}
    } -cleanup {
        cleanup
    } -result {expr_value 45.0*8/2}

    test EXPR-2.2 {validate, invalid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::EXPR validate {expr_value NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {invalid bareword "NONESUCH"}

    test EXPR-3.1 {narrative} -body {
        ::gofer::NUMBER::EXPR narrative {expr_value 45.0*8/2}
    } -result {45.0*8/2}

    test EXPR-4.1 {eval} -setup {
        setup
    } -body {
        ::gofer::NUMBER::EXPR eval {expr_value 45.0*8/2}
    } -cleanup {
        cleanup
    } -result {180.0}

    #-------------------------------------------------------------------
    # Rule: AFFINITY

    test AFFINITY-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AFFINITY construct SHIA JOE
    } -cleanup {
        cleanup
    } -result {x SHIA y JOE}

    test AFFINITY-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AFFINITY validate {x shia y joe}
    } -cleanup {
        cleanup
    } -result {x SHIA y JOE}

    test AFFINITY-2.2 {validate, invalid x} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AFFINITY validate {x NONESUCH y JOE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid Group/Actor "NONESUCH", should be one of: BLUE, BOB, BRIT, JOE, KURD, SHIA, SUNN, TAL, USAID}

    test AFFINITY-2.3 {validate, invalid y} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AFFINITY validate {x SHIA y NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid Group/Actor "NONESUCH", should be one of: BLUE, BOB, BRIT, JOE, KURD, SHIA, SUNN, TAL, USAID}

    test AFFINITY-3.1 {narrative} -body {
        ::gofer::NUMBER::AFFINITY narrative {x JOE y BLUE}
    } -result {affinity("JOE","BLUE")}

    test AFFINITY-4.1 {eval prep} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AFFINITY eval {x SHIA y BLUE}
    } -cleanup {
        cleanup
    } -result {0.00}

    test AFFINITY-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::AFFINITY eval {x SHIA y BLUE}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: AGENT_PLANTS

    test AGENT_PLANTS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AGENT_PLANTS construct JOE
    } -cleanup {
        cleanup
    } -result {a JOE}

    test AGENT_PLANTS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AGENT_PLANTS validate {a joe}
    } -cleanup {
        cleanup
    } -result {a JOE}

    test AGENT_PLANTS-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AGENT_PLANTS validate {a NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid agent,*}

    test AGENT_PLANTS-3.1 {narrative} -body {
        ::gofer::NUMBER::AGENT_PLANTS narrative {a JOE}
    } -result {aplants("JOE")}

    test AGENT_PLANTS-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::AGENT_PLANTS eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    test AGENT_PLANTS-4.2 {eval lock} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::AGENT_PLANTS eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: ASSIGNED

    test ASSIGNED-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED construct BLUE PATROL NB1
    } -cleanup {
        cleanup
    } -result {g BLUE activity PATROL n NB1}

    test ASSIGNED-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g blue activity patrol n nb1}
    } -cleanup {
        cleanup
    } -result {g BLUE activity PATROL n NB1}

    test ASSIGNED-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g BLUE activity PATROL n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test ASSIGNED-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g NONESUCH activity PATROL n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH", should be one of: BLUE, BRIT, TAL, USAID}

    test ASSIGNED-2.4 {validate, invalid activity} -setup {
        setup
    } -body {
        ::gofer::NUMBER::ASSIGNED validate {g BLUE activity NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Group BLUE cannot be assigned activity NONESUCH}

    test ASSIGNED-3.1 {narrative} -body {
        ::gofer::NUMBER::ASSIGNED narrative {g BLUE activity PATROL n NB1}
    } -result {assigned("BLUE","PATROL","NB1")}

    test ASSIGNED-4.1 {eval, no data} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::ASSIGNED eval {g BLUE activity PATROL n NB1}
    } -cleanup {
        cleanup
    } -result {0}

    test ASSIGNED-4.1 {eval, data} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::ASSIGNED eval {g BLUE activity PATROL n NB1}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: GROUP_CONSUMERS

    test GROUP_CONSUMERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_CONSUMERS construct {SHIA SUNN}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_CONSUMERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_CONSUMERS validate {glist {shia sunn}}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_CONSUMERS-2.2 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_CONSUMERS validate {glist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_CONSUMERS-2.3 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_CONSUMERS validate {glist {SHIA NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_CONSUMERS-3.1 {narrative} -body {
        ::gofer::NUMBER::GROUP_CONSUMERS narrative {glist {SUNN SHIA}}
    } -result {consumers("SUNN","SHIA")}

    test GROUP_CONSUMERS-3.2 {narrative} -body {
        ::gofer::NUMBER::GROUP_CONSUMERS narrative {glist {SUNN}}
    } -result {consumers("SUNN")}

    test GROUP_CONSUMERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_CONSUMERS eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {0}

    test GROUP_CONSUMERS-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::GROUP_CONSUMERS eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {1000}

    #-------------------------------------------------------------------
    # Rule: COOP

    test COOP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP construct SHIA BLUE
    } -cleanup {
        cleanup
    } -result {f SHIA g BLUE}

    test COOP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP validate {f shia g blue}
    } -cleanup {
        cleanup
    } -result {f SHIA g BLUE}

    test COOP-2.2 {validate, invalid f} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP validate {f NONESUCH g BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test COOP-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COOP validate {f SHIA g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force group,*}

    test COOP-3.1 {narrative} -body {
        ::gofer::NUMBER::COOP narrative {f SHIA g BLUE}
    } -result {coop("SHIA","BLUE")}

    test COOP-4.1 {eval} -setup {
        setup
        # Set coop to 25.0
        ted order COOP:UPDATE \
            id {SHIA BLUE} base 25.0 regress_to NATURAL natural 25.0
        ted lock
    } -body {
        ::gofer::NUMBER::COOP eval {f SHIA g BLUE}
    } -cleanup {
        cleanup
    } -result {25.0}

    #-------------------------------------------------------------------
    # Rule: COVERAGE

    test COVERAGE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE construct BLUE PRESENCE NB1
    } -cleanup {
        cleanup
    } -result {g BLUE activity PRESENCE n NB1}

    test COVERAGE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {g blue activity patrol n nb1}
    } -cleanup {
        cleanup
    } -result {g BLUE activity PATROL n NB1}

    test COVERAGE-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {g BLUE activity PATROL n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test COVERAGE-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {g NONESUCH activity PATROL n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH", should be one of: BLUE, BRIT, TAL, USAID}

    test COVERAGE-2.4 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE validate {g BLUE activity NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid activity,*}

    test COVERAGE-3.1 {narrative} -body {
        ::gofer::NUMBER::COVERAGE narrative {g BLUE activity PATROL n NB1}
    } -result {coverage("BLUE","PATROL","NB1")}

    test COVERAGE-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::COVERAGE eval {g BLUE activity PATROL n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test COVERAGE-4.1 {eval no data before lock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::COVERAGE eval {g BLUE activity PATROL n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: DEPLOYED

    test DEPLOYED-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::DEPLOYED construct BLUE {NB1}
    } -cleanup {
        cleanup
    } -result {g BLUE nlist NB1}

    test DEPLOYED-1.2 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::DEPLOYED construct BLUE {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {g BLUE nlist {NB1 NB2}}

    test DEPLOYED-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::DEPLOYED validate {g blue nlist {nb1 nb2}}
    } -cleanup {
        cleanup
    } -result {g BLUE nlist {NB1 NB2}}

    test DEPLOYED-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::DEPLOYED validate {g NONESUCH nlist {NB1}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test DEPLOYED-2.3 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::DEPLOYED validate {g BLUE nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test DEPLOYED-3.1 {narrative} -body {
        ::gofer::NUMBER::DEPLOYED narrative {g BLUE nlist {NB1 NB2}}
    } -result {deployed("BLUE","NB1","NB2")}

    test DEPLOYED-3.2 {narrative} -body {
        ::gofer::NUMBER::DEPLOYED narrative {g BLUE nlist {NB1}}
    } -result {deployed("BLUE","NB1")}

    test DEPLOYED-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::DEPLOYED eval {g BLUE nlist NB1}
    } -cleanup {
        cleanup
    } -result {0}

    test DEPLOYED-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::DEPLOYED eval {g BLUE nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: GDP

    test GDP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GDP construct
    } -cleanup {
        cleanup
    } -result {}

    test GDP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GDP validate {}
    } -cleanup {
        cleanup
    } -result {}

    test GDP-3.1 {narrative} -body {
        ::gofer::NUMBER::GDP narrative {}
    } -result {gdp()}

    test GDP-4.1 {eval, not locked} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GDP eval {}
    } -cleanup {
        cleanup
    } -result {0.00}

    test GDP-4.2 {eval, locked} -setup {
        setup
        ted lock
    } -body {
        set a [format %.2f [econ value Out::DGDP]]
        set b [::gofer::NUMBER::GDP eval {}]
        expr {$a == $b}
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # Rule: GOODS_CAP

    test GOODS_CAP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_CAP construct JOE
    } -cleanup {
        cleanup
    } -result {a JOE}

    test GOODS_CAP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_CAP validate {a joe}
    } -cleanup {
        cleanup
    } -result {a JOE}

    test GOODS_CAP-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_CAP validate {a NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid agent,*}

    test GOODS_CAP-3.1 {narrative} -body {
        ::gofer::NUMBER::GOODS_CAP narrative {a JOE}
    } -result {goodscap("JOE")}

    test GOODS_CAP-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_CAP eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    test GOODS_CAP-4.2 {eval lock} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::GOODS_CAP eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: GOODS_IDLE

    test GOODS_IDLE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_IDLE construct 
    } -cleanup {
        cleanup
    } -result {}

    test GOODS_IDLE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_IDLE validate {}
    } -cleanup {
        cleanup
    } -result {}

    test GOODS_IDLE-3.1 {narrative} -body {
        ::gofer::NUMBER::GOODS_IDLE narrative {}
    } -result {goodsidle()}

    test GOODS_IDLE-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GOODS_IDLE eval {}
    } -cleanup {
        cleanup
    } -result {0.00}

    test GOODS_IDLE-4.2 {eval lock} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::GOODS_IDLE eval {}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: HREL

    test HREL-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::HREL construct SHIA BLUE
    } -cleanup {
        cleanup
    } -result {f SHIA g BLUE}

    test HREL-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::HREL validate {f shia g blue}
    } -cleanup {
        cleanup
    } -result {f SHIA g BLUE}

    test HREL-2.2 {validate, invalid f} -setup {
        setup
    } -body {
        ::gofer::NUMBER::HREL validate {f NONESUCH g BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test HREL-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::HREL validate {f SHIA g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test HREL-3.1 {narrative} -body {
        ::gofer::NUMBER::HREL narrative {f SHIA g BLUE}
    } -result {hrel("SHIA","BLUE")}

    test HREL-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::HREL eval {f SHIA g BLUE}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: INCOME

    test INCOME-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME-3.1 {narrative} -body {
        ::gofer::NUMBER::INCOME narrative {alist {BOB JOE}}
    } -result {income("BOB","JOE")}

    test INCOME-3.2 {narrative} -body {
        ::gofer::NUMBER::INCOME narrative {alist {BOB}}
    } -result {income("BOB")}

    test INCOME-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME-4.2 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {480.07}

    test INCOME-4.3 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME eval {alist {JOE}}
    } -cleanup {
        cleanup
    } -result {960.15}

    test INCOME-4.4 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME eval {alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {1440.22}

    #-------------------------------------------------------------------
    # Rule: INCOME_BLACK

    test INCOME_BLACK-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_BLACK construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_BLACK-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_BLACK validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_BLACK-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_BLACK validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_BLACK-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_BLACK validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_BLACK-3.1 {narrative} -body {
        ::gofer::NUMBER::INCOME_BLACK narrative {alist {BOB JOE}}
    } -result {income_black("BOB","JOE")}

    test INCOME_BLACK-3.2 {narrative} -body {
        ::gofer::NUMBER::INCOME_BLACK narrative {alist {BOB}}
    } -result {income_black("BOB")}

    test INCOME_BLACK-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_BLACK eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_BLACK-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_BLACK eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_BLACK-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_BLACK eval {alist {JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_BLACK-4.4 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_BLACK eval {alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: INCOME_GOODS

    test INCOME_GOODS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_GOODS construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_GOODS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_GOODS validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_GOODS-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_GOODS validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_GOODS-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_GOODS validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_GOODS-3.1 {narrative} -body {
        ::gofer::NUMBER::INCOME_GOODS narrative {alist {BOB JOE}}
    } -result {income_goods("BOB","JOE")}

    test INCOME_GOODS-3.2 {narrative} -body {
        ::gofer::NUMBER::INCOME_GOODS narrative {alist {BOB}}
    } -result {income_goods("BOB")}

    test INCOME_GOODS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_GOODS eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_GOODS-4.2 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_GOODS eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {480.07}

    test INCOME_GOODS-4.3 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_GOODS eval {alist {JOE}}
    } -cleanup {
        cleanup
    } -result {960.15}

    test INCOME_GOODS-4.4 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_GOODS eval {alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {1440.22}

    #-------------------------------------------------------------------
    # Rule: INCOME_POP

    test INCOME_POP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_POP construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_POP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_POP validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_POP-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_POP validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_POP-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_POP validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_POP-3.1 {narrative} -body {
        ::gofer::NUMBER::INCOME_POP narrative {alist {BOB JOE}}
    } -result {income_pop("BOB","JOE")}

    test INCOME_POP-3.2 {narrative} -body {
        ::gofer::NUMBER::INCOME_POP narrative {alist {BOB}}
    } -result {income_pop("BOB")}

    test INCOME_POP-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_POP eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_POP-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_POP eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_POP-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_POP eval {alist {JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_POP-4.4 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_POP eval {alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: INCOME_REGION

    test INCOME_REGION-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_REGION construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_REGION-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_REGION validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_REGION-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_REGION validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_REGION-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_REGION validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_REGION-3.1 {narrative} -body {
        ::gofer::NUMBER::INCOME_REGION narrative {alist {BOB JOE}}
    } -result {income_region("BOB","JOE")}

    test INCOME_REGION-3.2 {narrative} -body {
        ::gofer::NUMBER::INCOME_REGION narrative {alist {BOB}}
    } -result {income_region("BOB")}

    test INCOME_REGION-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_REGION eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_REGION-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_REGION eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_REGION-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_REGION eval {alist {JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_REGION-4.4 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_REGION eval {alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: INCOME_WORLD

    test INCOME_WORLD-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_WORLD construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_WORLD-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_WORLD validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test INCOME_WORLD-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_WORLD validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_WORLD-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_WORLD validate {alist {JOE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INCOME_WORLD-3.1 {narrative} -body {
        ::gofer::NUMBER::INCOME_WORLD narrative {alist {BOB JOE}}
    } -result {income_world("BOB","JOE")}

    test INCOME_WORLD-3.2 {narrative} -body {
        ::gofer::NUMBER::INCOME_WORLD narrative {alist {BOB}}
    } -result {income_world("BOB")}

    test INCOME_WORLD-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INCOME_WORLD eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_WORLD-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_WORLD eval {alist BOB}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_WORLD-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_WORLD eval {alist {JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    test INCOME_WORLD-4.4 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::INCOME_WORLD eval {alist {BOB JOE}}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: INFLUENCE

    test INFLUENCE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE construct JOE NB1
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test INFLUENCE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE validate {a joe n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test INFLUENCE-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE validate {a NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test INFLUENCE-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE validate {a JOE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test INFLUENCE-3.1 {narrative} -body {
        ::gofer::NUMBER::INFLUENCE narrative {a JOE n NB1}
    } -result {influence("JOE","NB1")}

    test INFLUENCE-4.1 {eval, no value available} -setup {
        setup
    } -body {
        ::gofer::NUMBER::INFLUENCE eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test INFLUENCE-4.2 {eval, value available} -setup {
        setup
        # Set influence to 0.75
        rdb eval {
            INSERT OR REPLACE INTO influence_na(n,a,influence)
            VALUES('NB1','JOE',0.75)
        }
    } -body {
        ::gofer::NUMBER::INFLUENCE eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.75}

    #-------------------------------------------------------------------
    # Rule: LOCAL_CONSUMERS

    test LOCAL_CONSUMERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_CONSUMERS construct
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_CONSUMERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_CONSUMERS validate {}
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_CONSUMERS-3.1 {narrative} -body {
        ::gofer::NUMBER::LOCAL_CONSUMERS narrative {}
    } -result {local_consumers()}

    test LOCAL_CONSUMERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_CONSUMERS eval {}
    } -cleanup {
        cleanup
    } -result {0}

    test LOCAL_CONSUMERS-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::LOCAL_CONSUMERS eval {}
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # Rule: LOCAL_POPULATION

    test LOCAL_POPULATION-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_POPULATION construct
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_POPULATION-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_POPULATION validate {}
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_POPULATION-3.1 {narrative} -body {
        ::gofer::NUMBER::LOCAL_POPULATION narrative {}
    } -result {local_pop()}

    test LOCAL_POPULATION-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_POPULATION eval {}
    } -cleanup {
        cleanup
    } -result {0}

    test LOCAL_POPULATION-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::LOCAL_POPULATION eval {}
    } -cleanup {
        cleanup
    } -result {3000}

    #-------------------------------------------------------------------
    # Rule: LOCAL_UNEMPLOYMENT_RATE

    test LOCAL_UNEMPLOYMENT_RATE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_UNEMPLOYMENT_RATE construct
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_UNEMPLOYMENT_RATE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_UNEMPLOYMENT_RATE validate {}
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_UNEMPLOYMENT_RATE-3.1 {narrative} -body {
        ::gofer::NUMBER::LOCAL_UNEMPLOYMENT_RATE narrative {}
    } -result {local_unemp()}

    test LOCAL_UNEMPLOYMENT_RATE-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_UNEMPLOYMENT_RATE eval {}
    } -cleanup {
        cleanup
    } -result {0.00}

    test LOCAL_UNEMPLOYMENT_RATE-4.1 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::LOCAL_UNEMPLOYMENT_RATE eval {}
    } -cleanup {
        cleanup
    } -result {4.00}

    #-------------------------------------------------------------------
    # Rule: LOCAL_WORKERS

    test LOCAL_WORKERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_WORKERS construct
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_WORKERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_WORKERS validate {}
    } -cleanup {
        cleanup
    } -result {}

    test LOCAL_WORKERS-3.1 {narrative} -body {
        ::gofer::NUMBER::LOCAL_WORKERS narrative {}
    } -result {local_workers()}

    test LOCAL_WORKERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::LOCAL_WORKERS eval {}
    } -cleanup {
        cleanup
    } -result {0}

    test LOCAL_WORKERS-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::LOCAL_WORKERS eval {}
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # Rule: MOBILIZED

    test MOBILIZED-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOBILIZED construct {BLUE}
    } -cleanup {
        cleanup
    } -result {glist BLUE}

    test MOBILIZED-1.2 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOBILIZED construct {BLUE BRIT}
    } -cleanup {
        cleanup
    } -result {glist {BLUE BRIT}}

    test MOBILIZED-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOBILIZED validate {glist {blue brit}}
    } -cleanup {
        cleanup
    } -result {glist {BLUE BRIT}}

    test MOBILIZED-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOBILIZED validate {glist {NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test MOBILIZED-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOBILIZED validate {glist {BLUE NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force/org group "NONESUCH",*}

    test MOBILIZED-3.1 {narrative} -body {
        ::gofer::NUMBER::MOBILIZED narrative {glist {BLUE BRIT}}
    } -result {mobilized("BLUE","BRIT")}

    test MOBILIZED-3.2 {narrative} -body {
        ::gofer::NUMBER::MOBILIZED narrative {glist {BLUE}}
    } -result {mobilized("BLUE")}

    test MOBILIZED-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOBILIZED eval {glist BLUE}
    } -cleanup {
        cleanup
    } -result {0}

    test MOBILIZED-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::MOBILIZED eval {glist BLUE}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: MOOD

    test MOOD-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOOD construct SHIA
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test MOOD-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOOD validate {g shia}
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test MOOD-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::MOOD validate {g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test MOOD-3.1 {narrative} -body {
        ::gofer::NUMBER::MOOD narrative {g SHIA}
    } -result {mood("SHIA")}

    test MOOD-4.1 {eval} -setup {
        setup
        ted lock
        
    } -body {
        rdb eval {UPDATE uram_civ_g SET mood=50.0}
        ::gofer::NUMBER::MOOD eval {g SHIA}
    } -cleanup {
        cleanup
    } -result {50.0}

    #-------------------------------------------------------------------
    # Rule: NBCONSUMERS

    test NBCONSUMERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCONSUMERS construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NBCONSUMERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCONSUMERS validate {nlist {nb1 nb2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NBCONSUMERS-2.2 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCONSUMERS validate {nlist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBCONSUMERS-2.3 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCONSUMERS validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBCONSUMERS-3.1 {narrative} -body {
        ::gofer::NUMBER::NBCONSUMERS narrative {nlist {NB2 NB1}}
    } -result {nbconsumers("NB2","NB1")}

    test NBCONSUMERS-3.2 {narrative} -body {
        ::gofer::NUMBER::NBCONSUMERS narrative {nlist {NB2}}
    } -result {nbconsumers("NB2")}

    test NBCONSUMERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCONSUMERS eval {nlist NB1}
    } -cleanup {
        cleanup
    } -result {0}

    test NBCONSUMERS-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBCONSUMERS eval {nlist NB1}
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # Rule: NBCOOP

    test NBCOOP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP construct NB1 BLUE
    } -cleanup {
        cleanup
    } -result {n NB1 g BLUE}

    test NBCOOP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP validate {n nb1 g blue}
    } -cleanup {
        cleanup
    } -result {n NB1 g BLUE}

    test NBCOOP-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP validate {n NONESUCH g BLUE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBCOOP-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBCOOP validate {n NB1 g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid force group,*}

    test NBCOOP-3.1 {narrative} -body {
        ::gofer::NUMBER::NBCOOP narrative {n NB1 g BLUE}
    } -result {nbcoop("NB1","BLUE")}

    test NBCOOP-4.1 {eval} -setup {
        setup
        # Set NBCOOP to 25.0
        ted order COOP:UPDATE \
            id {SHIA BLUE} base 25.0 regress_to NATURAL natural 25.0
        ted lock
    } -body {
        ::gofer::NUMBER::NBCOOP eval {n NB1 g BLUE}
    } -cleanup {
        cleanup
    } -result {37.5}

    #-------------------------------------------------------------------
    # Rule: NB_GOODS_CAP

    test NB_GOODS_CAP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_GOODS_CAP construct NB1
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NB_GOODS_CAP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_GOODS_CAP validate {n nb1}
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NB_GOODS_CAP-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_GOODS_CAP validate {n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NB_GOODS_CAP-3.1 {narrative} -body {
        ::gofer::NUMBER::NB_GOODS_CAP narrative {n NB1}
    } -result {nbgoodscap("NB1")}

    test NB_GOODS_CAP-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_GOODS_CAP eval {n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test NB_GOODS_CAP-4.2 {eval lock} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::NB_GOODS_CAP eval {n NB1}
    } -cleanup {
        cleanup
    } -result {22302558935.59318}

    #-------------------------------------------------------------------
    # Rule: NBMOOD

    test NBMOOD-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBMOOD construct NB1
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NBMOOD-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBMOOD validate {n nb1}
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NBMOOD-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBMOOD validate {n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBMOOD-3.1 {narrative} -body {
        ::gofer::NUMBER::NBMOOD narrative {n NB1}
    } -result {nbmood("NB1")}

    test NBMOOD-4.1 {eval} -setup {
        setup
        ted lock
        rdb eval {UPDATE uram_n SET nbmood=25.0 WHERE n='NB1'}
        
    } -body {
        ::gofer::NUMBER::NBMOOD eval {n NB1}
    } -cleanup {
        cleanup
    } -result {25.0}

    #-------------------------------------------------------------------
    # Rule: NB_PLANTS

    test NB_PLANTS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_PLANTS construct NB1
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NB_PLANTS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_PLANTS validate {n nb1}
    } -cleanup {
        cleanup
    } -result {n NB1}

    test NB_PLANTS-2.2 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_PLANTS validate {n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NB_PLANTS-3.1 {narrative} -body {
        ::gofer::NUMBER::NB_PLANTS narrative {n NB1}
    } -result {nbplants("NB1")}

    test NB_PLANTS-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_PLANTS eval {n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test NB_PLANTS-4.2 {eval lock} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::NB_PLANTS eval {n NB1}
    } -cleanup {
        cleanup
    } -result {23.0}

    #-------------------------------------------------------------------
    # Rule: NBPOPULATION

    test NBPOPULATION-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBPOPULATION construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NBPOPULATION-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBPOPULATION validate {nlist {nb1 nb2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NBPOPULATION-2.2 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBPOPULATION validate {nlist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBPOPULATION-2.3 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBPOPULATION validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBPOPULATION-3.1 {narrative} -body {
        ::gofer::NUMBER::NBPOPULATION narrative {nlist {NB2 NB1}}
    } -result {nbpop("NB2","NB1")}

    test NBPOPULATION-3.2 {narrative} -body {
        ::gofer::NUMBER::NBPOPULATION narrative {nlist {NB2}}
    } -result {nbpop("NB2")}

    test NBPOPULATION-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBPOPULATION eval {nlist NB2}
    } -cleanup {
        cleanup
    } -result {0}

    test NBPOPULATION-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBPOPULATION eval {nlist NB2}
    } -cleanup {
        cleanup
    } -result {1000}

    test NBPOPULATION-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBPOPULATION eval {nlist {NB2 NB1}}
    } -cleanup {
        cleanup
    } -result {3000}

    #-------------------------------------------------------------------
    # Rule: NBSUPPORT

    test NBSUPPORT-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT construct JOE NB1
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test NBSUPPORT-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT validate {a joe n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test NBSUPPORT-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT validate {a NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test NBSUPPORT-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBSUPPORT validate {a JOE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBSUPPORT-3.1 {narrative} -body {
        ::gofer::NUMBER::NBSUPPORT narrative {a JOE n NB1}
    } -result {nbsupport("JOE","NB1")}

    test NBSUPPORT-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBSUPPORT eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: NB_UNEMPLOYMENT_RATE

    test NB_UNEMPLOYMENT_RATE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NB_UNEMPLOYMENT_RATE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE validate {nlist {nb1 nb2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NB_UNEMPLOYMENT_RATE-2.2 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE validate {nlist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NB_UNEMPLOYMENT_RATE-2.3 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NB_UNEMPLOYMENT_RATE-3.1 {narrative} -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE narrative {nlist {NB2 NB1}}
    } -result {nbunemp("NB2","NB1")}

    test NB_UNEMPLOYMENT_RATE-3.2 {narrative} -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE narrative {nlist {NB2}}
    } -result {nbunemp("NB2")}

    test NB_UNEMPLOYMENT_RATE-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE eval {nlist NB1}
    } -cleanup {
        cleanup
    } -result {0.00}

    test NB_UNEMPLOYMENT_RATE-4.2 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE eval {nlist NB1}
    } -cleanup {
        cleanup
    } -result {4.00}

    test NB_UNEMPLOYMENT_RATE-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE eval {nlist NB2}
    } -cleanup {
        cleanup
    } -result {0.00}

    test NB_UNEMPLOYMENT_RATE-4.4 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::NB_UNEMPLOYMENT_RATE eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {4.00}

    #-------------------------------------------------------------------
    # Rule: NBWORKERS

    test NBWORKERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBWORKERS construct {NB1 NB2}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NBWORKERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBWORKERS validate {nlist {nb1 nb2}}
    } -cleanup {
        cleanup
    } -result {nlist {NB1 NB2}}

    test NBWORKERS-2.2 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBWORKERS validate {nlist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBWORKERS-2.3 {validate, invalid N} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBWORKERS validate {nlist {NB1 NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test NBWORKERS-3.1 {narrative} -body {
        ::gofer::NUMBER::NBWORKERS narrative {nlist {NB2 NB1}}
    } -result {nbworkers("NB2","NB1")}

    test NBWORKERS-3.2 {narrative} -body {
        ::gofer::NUMBER::NBWORKERS narrative {nlist {NB2}}
    } -result {nbworkers("NB2")}

    test NBWORKERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::NBWORKERS eval {nlist NB1}
    } -cleanup {
        cleanup
    } -result {0}

    test NBWORKERS-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBWORKERS eval {nlist NB1}
    } -cleanup {
        cleanup
    } -result {1200}

    test NBWORKERS-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::NBWORKERS eval {nlist {NB1 NB2}}
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # Rule: CASH_ON_HAND

    test CASH_ON_HAND-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_ON_HAND construct JOE
    } -cleanup {
        cleanup
    } -result {a JOE}

    test CASH_ON_HAND-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_ON_HAND validate {a joe}
    } -cleanup {
        cleanup
    } -result {a JOE}

    test CASH_ON_HAND-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_ON_HAND validate {a NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test CASH_ON_HAND-3.1 {narrative} -body {
        ::gofer::NUMBER::CASH_ON_HAND narrative {a JOE}
    } -result {onhand("JOE")}

    test CASH_ON_HAND-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_ON_HAND eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.00}

    test CASH_ON_HAND-4.2 {eval lock} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::CASH_ON_HAND eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: PLAYBOX_CONSUMERS

    test PLAYBOX_CONSUMERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_CONSUMERS construct
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_CONSUMERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_CONSUMERS validate {}
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_CONSUMERS-3.1 {narrative} -body {
        ::gofer::NUMBER::PLAYBOX_CONSUMERS narrative {}
    } -result {pbconsumers()}

    test PLAYBOX_CONSUMERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_CONSUMERS eval {}
    } -cleanup {
        cleanup
    } -result {0}

    test PLAYBOX_CONSUMERS-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::PLAYBOX_CONSUMERS eval {}
    } -cleanup {
        cleanup
    } -result {2000}

    #-------------------------------------------------------------------
    # Rule: PLAYBOX_GOODS_CAP

    test PLAYBOX_GOODS_CAP-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_GOODS_CAP construct 
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_GOODS_CAP-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_GOODS_CAP validate {}
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_GOODS_CAP-3.1 {narrative} -body {
        ::gofer::NUMBER::PLAYBOX_GOODS_CAP narrative {}
    } -result {pbgoodscap()}

    test PLAYBOX_GOODS_CAP-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_GOODS_CAP eval {}
    } -cleanup {
        cleanup
    } -result {0.0}

    test PLAYBOX_GOODS_CAP-4.2 {eval lock} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::PLAYBOX_GOODS_CAP eval {}
    } -cleanup {
        cleanup
    } -result {22302558935.59318}

    #-------------------------------------------------------------------
    # Rule: PLAYBOX_PLANTS

    test PLAYBOX_PLANTS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_PLANTS construct
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_PLANTS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_PLANTS validate {}
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_PLANTS-3.1 {narrative} -body {
        ::gofer::NUMBER::PLAYBOX_PLANTS narrative {}
    } -result {pbplants()}

    test PLAYBOX_PLANTS-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_PLANTS eval {}
    } -cleanup {
        cleanup
    } -result {0.0}

    test PLAYBOX_PLANTS-4.2 {eval lock} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::PLAYBOX_PLANTS eval {}
    } -cleanup {
        cleanup
    } -result {23.0}

    #-------------------------------------------------------------------
    # Rule: PLAYBOX_POPULATION

    test PLAYBOX_POPULATION-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_POPULATION construct
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_POPULATION-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_POPULATION validate {}
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_POPULATION-3.1 {narrative} -body {
        ::gofer::NUMBER::PLAYBOX_POPULATION narrative {}
    } -result {pbpop()}

    test PLAYBOX_POPULATION-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_POPULATION eval {}
    } -cleanup {
        cleanup
    } -result {0}

    test PLAYBOX_POPULATION-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::PLAYBOX_POPULATION eval {}
    } -cleanup {
        cleanup
    } -result {3000}

    #-------------------------------------------------------------------
    # Rule: PLAYBOX_UNEMPLOYMENT_RATE

    test PLAYBOX_UNEMPLOYMENT_RATE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_UNEMPLOYMENT_RATE construct
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_UNEMPLOYMENT_RATE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_UNEMPLOYMENT_RATE validate {}
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_UNEMPLOYMENT_RATE-3.1 {narrative} -body {
        ::gofer::NUMBER::PLAYBOX_UNEMPLOYMENT_RATE narrative {}
    } -result {pbunemp()}

    test PLAYBOX_UNEMPLOYMENT_RATE-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_UNEMPLOYMENT_RATE eval {}
    } -cleanup {
        cleanup
    } -result {0.00}

    test PLAYBOX_UNEMPLOYMENT_RATE-4.1 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::PLAYBOX_UNEMPLOYMENT_RATE eval {}
    } -cleanup {
        cleanup
    } -result {4.00}

    #-------------------------------------------------------------------
    # Rule: PLAYBOX_WORKERS

    test PLAYBOX_WORKERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_WORKERS construct
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_WORKERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_WORKERS validate {}
    } -cleanup {
        cleanup
    } -result {}

    test PLAYBOX_WORKERS-3.1 {narrative} -body {
        ::gofer::NUMBER::PLAYBOX_WORKERS narrative {}
    } -result {pbworkers()}

    test PLAYBOX_WORKERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLAYBOX_WORKERS eval {}
    } -cleanup {
        cleanup
    } -result {0}

    test PLAYBOX_WORKERS-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::PLAYBOX_WORKERS eval {}
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # Rule: PCTCONTROL

    test PCTCONTROL-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PCTCONTROL construct {JOE BOB}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test PCTCONTROL-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PCTCONTROL validate {alist {joe bob}}
    } -cleanup {
        cleanup
    } -result {alist {JOE BOB}}

    test PCTCONTROL-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PCTCONTROL validate {alist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test PCTCONTROL-3.1 {narrative} -body {
        ::gofer::NUMBER::PCTCONTROL narrative {alist {JOE BOB}}
    } -result {pctcontrol("JOE","BOB")}

    test PCTCONTROL-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::PCTCONTROL eval {alist JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: PLANTS

    test PLANTS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLANTS construct JOE NB1
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test PLANTS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLANTS validate {a joe n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test PLANTS-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLANTS validate {a NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid agent,*}

    test PLANTS-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLANTS validate {a JOE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test PLANTS-3.1 {narrative} -body {
        ::gofer::NUMBER::PLANTS narrative {a JOE n NB1}
    } -result {plants("JOE","NB1")}

    test PLANTS-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::PLANTS eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test PLANTS-4.2 {eval lock} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::PLANTS eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: GROUP_POPULATION

    test GROUP_POPULATION-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_POPULATION construct {SHIA SUNN}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_POPULATION-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_POPULATION validate {glist {shia sunn}}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_POPULATION-2.2 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_POPULATION validate {glist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_POPULATION-2.3 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_POPULATION validate {glist {SHIA NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_POPULATION-3.1 {narrative} -body {
        ::gofer::NUMBER::GROUP_POPULATION narrative {glist {SUNN SHIA}}
    } -result {pop("SUNN","SHIA")}

    test GROUP_POPULATION-3.2 {narrative} -body {
        ::gofer::NUMBER::GROUP_POPULATION narrative {glist {SUNN}}
    } -result {pop("SUNN")}

    test GROUP_POPULATION-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_POPULATION eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {0}

    test GROUP_POPULATION-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::GROUP_POPULATION eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {1000}

    #-------------------------------------------------------------------
    # Rule: REPAIR

    test REPAIR-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::REPAIR construct JOE NB1
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test REPAIR-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::REPAIR validate {a joe n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE n NB1}

    test REPAIR-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::REPAIR validate {a NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test REPAIR-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::REPAIR validate {a JOE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test REPAIR-3.1 {narrative} -body {
        ::gofer::NUMBER::REPAIR narrative {a JOE n NB1}
    } -result {repair("JOE","NB1")}

    test REPAIR-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::REPAIR eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    test REPAIR-4.2 {eval lock} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::REPAIR eval {a JOE n NB1}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: CASH_RESERVE

    test CASH_RESERVE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_RESERVE construct JOE
    } -cleanup {
        cleanup
    } -result {a JOE}

    test CASH_RESERVE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_RESERVE validate {a joe}
    } -cleanup {
        cleanup
    } -result {a JOE}

    test CASH_RESERVE-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_RESERVE validate {a NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test CASH_RESERVE-3.1 {narrative} -body {
        ::gofer::NUMBER::CASH_RESERVE narrative {a JOE}
    } -result {reserve("JOE")}

    test CASH_RESERVE-4.1 {eval prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::CASH_RESERVE eval {a JOE}
    } -cleanup {
        cleanup
    } -result {0.00}

    test CASH_RESERVE-4.2 {eval lock} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::CASH_RESERVE eval {a JOE}
    } -cleanup {
        cleanup
    } -result {200000.00}

    #-------------------------------------------------------------------
    # Rule: SAT

    test SAT-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT construct SHIA SFT
    } -cleanup {
        cleanup
    } -result {g SHIA c SFT}

    test SAT-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT validate {g shia c sft}
    } -cleanup {
        cleanup
    } -result {g SHIA c SFT}

    test SAT-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT validate {g NONESUCH c SFT}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test SAT-2.3 {validate, invalid c} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SAT validate {g SHIA c NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {invalid value "NONESUCH", should be one of: AUT, SFT, CUL, QOL}

    test SAT-3.1 {narrative} -body {
        ::gofer::NUMBER::SAT narrative {g SHIA c SFT}
    } -result {sat("SHIA","SFT")}

    test SAT-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        rdb eval {UPDATE ucurve_curves_t SET a=25.0}
        ::gofer::NUMBER::SAT eval {g SHIA c SFT}
    } -cleanup {
        cleanup
    } -result {25.0}

    #-------------------------------------------------------------------
    # Rule: SECURITY_CIV

    test SECURITY_CIV-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY_CIV construct SHIA
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test SECURITY_CIV-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY_CIV validate {g shia}
    } -cleanup {
        cleanup
    } -result {g SHIA}

    test SECURITY_CIV-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY_CIV validate {g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test SECURITY_CIV-3.1 {narrative} -body {
        ::gofer::NUMBER::SECURITY_CIV narrative {g SHIA}
    } -result {security("SHIA")}

    test SECURITY_CIV-4.1 {eval} -setup {
        setup
        #Setup sets the security_civ to 31
        ted lock
    } -body {
        ::gofer::NUMBER::SECURITY_CIV eval {g SHIA}
    } -cleanup {
        cleanup
    } -result {31}

    test SECURITY_CIV-4.1 {eval no data} -setup {
        setup
        #Setup sets the security_civ to 31
    } -body {
        ::gofer::NUMBER::SECURITY_CIV eval {g SHIA}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: SECURITY

    test SECURITY-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY construct SHIA NB1
    } -cleanup {
        cleanup
    } -result {g SHIA n NB1}

    test SECURITY-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY validate {g shia n nb1}
    } -cleanup {
        cleanup
    } -result {g SHIA n NB1}

    test SECURITY-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY validate {g NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test SECURITY-2.3 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY validate {g SHIA n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test SECURITY-3.1 {narrative} -body {
        ::gofer::NUMBER::SECURITY narrative {g SHIA n NB1}
    } -result {security("SHIA","NB1")}

    test SECURITY-4.1 {eval} -setup {
        setup
        #Setup sets the security to 31
        ted lock
    } -body {
        ::gofer::NUMBER::SECURITY eval {g SHIA n NB1}
    } -cleanup {
        cleanup
    } -result {31}

    test SECURITY-4.2 {eval no data} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SECURITY eval {g SHIA n NB1}
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # Rule: SUPPORT_CIV

    test SUPPORT_CIV-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV construct JOE SUNN
    } -cleanup {
        cleanup
    } -result {a JOE g SUNN}

    test SUPPORT_CIV-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV validate {a joe g sunn}
    } -cleanup {
        cleanup
    } -result {a JOE g SUNN}

    test SUPPORT_CIV-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV validate {a NONESUCH g SUNN}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test SUPPORT_CIV-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV validate {a JOE g NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test SUPPORT_CIV-3.1 {narrative} -body {
        ::gofer::NUMBER::SUPPORT_CIV narrative {a JOE g SUNN}
    } -result {support("JOE","SUNN")}

    test SUPPORT_CIV-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::SUPPORT_CIV eval {a JOE g SUNN}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: SUPPORT

    test SUPPORT-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT construct JOE BLUE NB1
    } -cleanup {
        cleanup
    } -result {a JOE g BLUE n NB1}

    test SUPPORT-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a joe g blue n nb1}
    } -cleanup {
        cleanup
    } -result {a JOE g BLUE n NB1}

    test SUPPORT-2.2 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a NONESUCH g BLUE n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test SUPPORT-2.3 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a JOE g NONESUCH n NB1}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test SUPPORT-2.4 {validate, invalid n} -setup {
        setup
    } -body {
        ::gofer::NUMBER::SUPPORT validate {a JOE g BLUE n NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid neighborhood,*}

    test SUPPORT-3.1 {narrative} -body {
        ::gofer::NUMBER::SUPPORT narrative {a JOE g BLUE n NB1}
    } -result {support("JOE","BLUE","NB1")}

    test SUPPORT-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::SUPPORT eval {a JOE g BLUE n NB1}
    } -cleanup {
        cleanup
    } -result {0.00}

    #-------------------------------------------------------------------
    # Rule: GROUP_UNEMPLOYMENT_RATE

    test GROUP_UNEMPLOYMENT_RATE-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE construct {SHIA SUNN}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_UNEMPLOYMENT_RATE-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE validate {glist {shia sunn}}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_UNEMPLOYMENT_RATE-2.2 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE validate {glist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_UNEMPLOYMENT_RATE-2.3 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE validate {glist {SHIA NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_UNEMPLOYMENT_RATE-3.1 {narrative} -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE narrative {glist {SUNN SHIA}}
    } -result {unemp("SUNN","SHIA")}

    test GROUP_UNEMPLOYMENT_RATE-3.2 {narrative} -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE narrative {glist {SUNN}}
    } -result {unemp("SUNN")}

    test GROUP_UNEMPLOYMENT_RATE-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {0.00}

    test GROUP_UNEMPLOYMENT_RATE-4.2 {eval} -setup {
        setup -econ
        ted lock
    } -body {
        ::gofer::NUMBER::GROUP_UNEMPLOYMENT_RATE eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {4.00}

    #-------------------------------------------------------------------
    # Rule: VREL

    test VREL-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::VREL construct SHIA JOE
    } -cleanup {
        cleanup
    } -result {g SHIA a JOE}

    test VREL-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::VREL validate {g shia a joe}
    } -cleanup {
        cleanup
    } -result {g SHIA a JOE}

    test VREL-2.2 {validate, invalid g} -setup {
        setup
    } -body {
        ::gofer::NUMBER::VREL validate {g NONESUCH a JOE}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid group,*}

    test VREL-2.3 {validate, invalid a} -setup {
        setup
    } -body {
        ::gofer::NUMBER::VREL validate {g SHIA a NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid actor,*}

    test VREL-3.1 {narrative} -body {
        ::gofer::NUMBER::VREL narrative {g SHIA a JOE}
    } -result {vrel("SHIA","JOE")}

    test VREL-4.1 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::VREL eval {g SHIA a JOE}
    } -cleanup {
        cleanup
    } -result {0.0}

    #-------------------------------------------------------------------
    # Rule: GROUP_WORKERS

    test GROUP_WORKERS-1.1 {construct, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS construct {SHIA SUNN}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_WORKERS-2.1 {validate, valid} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS validate {glist {shia sunn}}
    } -cleanup {
        cleanup
    } -result {glist {SHIA SUNN}}

    test GROUP_WORKERS-2.2 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS validate {glist NONESUCH}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_WORKERS-2.3 {validate, invalid G} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS validate {glist {SHIA NONESUCH}}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -match glob -result {Invalid civilian group,*}

    test GROUP_WORKERS-3.1 {narrative} -body {
        ::gofer::NUMBER::GROUP_WORKERS narrative {glist {SUNN SHIA}}
    } -result {workers("SUNN","SHIA")}

    test GROUP_WORKERS-3.2 {narrative} -body {
        ::gofer::NUMBER::GROUP_WORKERS narrative {glist {SUNN}}
    } -result {workers("SUNN")}

    test GROUP_WORKERS-4.1 {prelock} -setup {
        setup
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {0}

    test GROUP_WORKERS-4.2 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS eval {glist SUNN}
    } -cleanup {
        cleanup
    } -result {600}

    test GROUP_WORKERS-4.3 {eval} -setup {
        setup
        ted lock
    } -body {
        ::gofer::NUMBER::GROUP_WORKERS eval {glist {SUNN SHIA}}
    } -cleanup {
        cleanup
    } -result {1200}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::

