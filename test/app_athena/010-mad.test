# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-mad.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    mad(sim) tests.
#
#    This test suite tests the mad(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard MADs

    set m1 {
        narrative "The First MAD" 
        cause     UNIQUE
        s         1.0
        p         1.0
        q         0.9
    }

    set m2 {
        narrative "The Second MAD"
        cause     CIVCAS
        s         0.9
        p         0.8
        q         0.7
    }

    set m3 {
        narrative "The Third MAD"
        cause     PATROL
        s         0.7
        p         0.6
        q         0.5
    }



    # Lock scenario during setup
    
    proc lock {} {
        ted create JOE NB1 BLUE USAID SHIA
        ted lock
        
        # Delete existing drivers, to make things simpler
        rdb eval {DELETE FROM drivers}
        rdb eval {DELETE FROM rule_firings}
        rdb eval {DELETE FROM rule_inputs}
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    # empty g
    #
    # Makes g an empty group.

    proc empty {g} {
        rdb eval {UPDATE demog_g SET population=0 WHERE g=$g}
    }

    # Do an initial clean-up; this will remove the Adjustments
    # MAD.
    cleanup

    #-------------------------------------------------------------------
    # mutate create

    test create-1.1 {MADs are created} -setup {
        ted create NB1 BLUE USAID SHIA 
    } -body {
        mad mutate create $m1
        mad mutate create $m2
        mad mutate create $m3

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
mad_id narrative      cause  s   p   q   
------ -------------- ------ --- --- --- 
1      The First MAD  UNIQUE 1.0 1.0 0.9 
2      The Second MAD CIVCAS 0.9 0.8 0.7 
3      The Third MAD  PATROL 0.7 0.6 0.5 
    }


    test create-2.1 {undo deletes the mad} -setup {
        mad mutate create $m1
        set undo [mad mutate create $m2]
    } -body {
        eval $undo
        rdb eval {SELECT mad_id FROM mads}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # mutate delete

    test delete-1.1 {MAD is deleted} -setup {
        mad mutate create $m1   ;# 1
        mad mutate create $m2   ;# 2
    } -body {
        mad mutate delete 1

        # Is 1 gone?
        rdb eval {SELECT mad_id FROM mads}
    } -cleanup {
        cleanup
    } -result {2}


    test delete-2.1 {Undo restores MAD} -setup {
        mad mutate create $m1  ;# 1
        set undo [mad mutate delete 1]
    } -body {
        {*}$undo

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
mad_id narrative     cause  s   p   q   
------ ------------- ------ --- --- --- 
1      The First MAD UNIQUE 1.0 1.0 0.9 
    }


    #-------------------------------------------------------------------
    # mutate update

    test update-1.1 {MAD is updated} -setup {
        mad mutate create $m1  ;# 1
    } -body {
        mad mutate update {
            mad_id    1 
            narrative Modified
            cause     HUNGER
            s         0.5
            p         0.1
            q         0.0
        }

        ted query {SELECT * FROM mads}
    } -cleanup {
        cleanup
    } -result {
mad_id narrative cause  s   p   q   
------ --------- ------ --- --- --- 
1      Modified  HUNGER 0.5 0.1 0.0 
    }

    test update-2.1 {undo undoes the change} -setup {
        mad mutate create $m1  ;# 1
    } -body {
        set a [ted query {SELECT * FROM mads}]

        set undo [mad mutate update {
            mad_id 1 
            narrative Modified
            cause     HUNGER
            p         0.1
            q         0.0
        }]

        {*}$undo

        set b [ted query {SELECT * FROM mads}]

        expr {$a eq $b}
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # hrel

    test hrel-1.1 {rule_firings created} -setup {
        lock

        mad mutate create $m1
    } -body {
        mad mutate hrel {
            mad_id 1 mode persistent f SHIA g BLUE mag 5
        }

        ted querylist {SELECT * FROM rule_firings}
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          0
driver_id  1000
ruleset    MAGIC
rule       MAGIC-1-1
fdict      dtype MAGIC mad_id 1 atype hrel mode P mag 5 f SHIA g BLUE
    }


    #-------------------------------------------------------------------
    # vrel

    test vrel-1.1 {creates rule_firings entry} -setup {
        lock

        mad mutate create $m1
    } -body {
        mad mutate vrel {
            mad_id 1 mode persistent g SHIA a JOE mag 5
        }

        ted querylist {SELECT * FROM rule_firings}
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          0
driver_id  1000
ruleset    MAGIC
rule       MAGIC-2-1
fdict      dtype MAGIC mad_id 1 atype vrel mode P mag 5 g SHIA a JOE
    }

    #-------------------------------------------------------------------
    # sat

    test sat-1.1 {creates rule_firings entry} -setup {
        lock

        mad mutate create $m1  ;# 1
    } -body {
        mad mutate sat {
            mad_id 1 mode transient g SHIA c AUT mag 5 
        }

        ted querylist {SELECT * FROM rule_firings}
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          0
driver_id  1000
ruleset    MAGIC
rule       MAGIC-3-1
fdict      dtype MAGIC mad_id 1 atype sat mode T mag 5 g SHIA c AUT
    }


    #-------------------------------------------------------------------
    # coop

    test coop-1.1 {Level input sends report} -setup {
        lock

        mad mutate create $m1
    } -body {
        mad mutate coop {
            mad_id 1 mode persistent f SHIA g BLUE mag 5
        }

        ted querylist {SELECT * FROM rule_firings}
    } -cleanup {
        cleanup
    } -result {
firing_id  1
t          0
driver_id  1000
ruleset    MAGIC
rule       MAGIC-4-1
fdict      dtype MAGIC mad_id 1 atype coop mode P mag 5 f SHIA g BLUE
    }
    

    #-------------------------------------------------------------------
    # names

    test names-1.1 {Returns names: none defined} -body {
        mad names
    } -cleanup {
        cleanup
    } -result {}


    test names-1.2 {Returns names} -setup {
        mad mutate create $m1
        mad mutate create $m2
    } -body {
        mad names
    } -cleanup {
        cleanup
    } -result {1 2}


    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {Invalid ID} -body {
        mad validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {MAD does not exist: "NONESUCH"}


    test validate-2.1 {Valid ID} -setup {
        mad mutate create $m1  ;# 1
    } -body {
        mad validate 1
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # initial names

    test initial_names-1.1 {Returns names: none defined} -body {
        mad initial names
    } -cleanup {
        cleanup
    } -result {}


    test initial_names-1.2 {Returns names} -setup {
        mad mutate create $m1  ;# 1
        mad mutate create $m2  ;# 2
        mad mutate create $m3  ;# 3
    } -body {
        mad initial names
    } -cleanup {
        cleanup
    } -result {1 2 3}

    test initial_names-1.3 {Names with inputs are excluded} -setup {
        lock

        mad mutate create $m1  ;# 1
        mad mutate create $m2  ;# 2
        mad mutate create $m3  ;# 3

        mad mutate coop {
            mad_id 2 mode persistent f SHIA g BLUE mag 5
        }
    } -body {
        mad initial names
    } -cleanup {
        cleanup
    } -result {1 3}


    #-------------------------------------------------------------------
    # initial validate

    test initial_validate-1.1 {Invalid ID} -body {
        mad initial validate NONESUCH
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {MAD does not exist or is not in initial state: "NONESUCH"}

    test initial_validate-1.2 {Not in initial state} -setup {
        lock
        
        mad mutate create $m1  ;# 1
        mad mutate create $m2  ;# 2
        mad mutate create $m3  ;# 3

        mad mutate coop {
            mad_id 2 mode persistent f SHIA g BLUE mag 5
        }
    } -body {
        mad initial validate 2
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {MAD does not exist or is not in initial state: "2"}

    test initial_validate-2.1 {Valid ID} -setup {
        lock
        
        mad mutate create $m1  ;# 1
        mad mutate create $m2  ;# 2
        mad mutate create $m3  ;# 3

        mad mutate coop {
            mad_id 2 mode persistent f SHIA g BLUE mag 5
        }
    } -body {
        mad initial validate 3
    } -cleanup {
        cleanup
    } -result {3}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





