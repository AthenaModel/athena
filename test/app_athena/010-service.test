# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-service.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    service(sim) tests.
#
#    This test suite tests service(sim).
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    proc setup {} {
        ted create JOE BOB BLUE USAID NB1 NB2 SHIA SUNN KURD
        demog start
        rdb eval {
            UPDATE demog_g SET population=10000 WHERE g='SHIA';
            UPDATE demog_g SET population=20000 WHERE g='SUNN';
            UPDATE demog_g SET population=40000 WHERE g='KURD';
        }
    }

    #-------------------------------------------------------------------
    # srcompute
    test srcompute-1.1 {srcompute populates sr_service in PREP} -setup {
        setup
    } -body {
        service srcompute
        ted query {SELECT * FROM sr_service}
    } -cleanup {
        cleanup
    } -result {
g    req_funding sat_funding 
---- ----------- ----------- 
SHIA 240.0       400.0       
SUNN 240.0       400.0       
KURD 20.0        100.0       
    }

    test srcompute-1.2 {srcompute populates sr_service on LOCK} -setup {
        ted create JOE BOB BLUE USAID NB1 NB2 SHIA SUNN KURD
        ted lock
    } -body {
        service srcompute
        ted query {SELECT * FROM sr_service}
    } -cleanup {
        cleanup
    } -result {
g    req_funding sat_funding 
---- ----------- ----------- 
SHIA 240.0       400.0       
SUNN 240.0       400.0       
KURD 20.0        100.0       
    }


    #-------------------------------------------------------------------
    # start

    test start-1.1 {start populates service_ga} -setup {
        setup
    } -body {
        service start
        ted query {SELECT * FROM service_ga ORDER BY g, a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding credit 
---- --- ------- ------ 
KURD BOB 0.0     0.0    
KURD JOE 0.0     0.0    
SHIA BOB 0.0     0.0    
SHIA JOE 0.0     0.0    
SUNN BOB 0.0     0.0    
SUNN JOE 0.0     0.0    
    }

    test start-1.2 {start populates service_g} -setup {
        setup
    } -body {
        service start
        ted querylist {SELECT * FROM service_g ORDER BY g}
    } -cleanup {
        cleanup
    } -result {
g                   KURD
saturation_funding  0.0
required            0.0
funding             0.0
actual              0.0
expected            0.0
expectf             0.0
needs               0.0

g                   SHIA
saturation_funding  0.0
required            0.0
funding             0.0
actual              0.0
expected            0.0
expectf             0.0
needs               0.0

g                   SUNN
saturation_funding  0.0
required            0.0
funding             0.0
actual              0.0
expected            0.0
expectf             0.0
needs               0.0
    }

    #-------------------------------------------------------------------
    # load

    test load-1.1 {loads working_service_ga} -setup {
        setup
        service start
    } -body {
        service load
        ted query {SELECT * FROM working_service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding 
---- --- ------- 
KURD BOB 0.0     
KURD JOE 0.0     
SHIA BOB 0.0     
SHIA JOE 0.0     
SUNN BOB 0.0     
SUNN JOE 0.0     
    }


    #-------------------------------------------------------------------
    # fundeni

    test fundeni-1.1 {Increments funding for a group} -setup {
        setup
        service start
        service load
    } -body {
        service fundeni JOE 2000 SHIA
        ted query {SELECT * FROM working_service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding 
---- --- ------- 
KURD BOB 0.0     
KURD JOE 0.0     
SHIA BOB 0.0     
SHIA JOE 2000.0  
SUNN BOB 0.0     
SUNN JOE 0.0     
    }

    test fundeni-1.2 {Increments for groups in proportion to pop} -setup {
        setup
        service start
        service load
    } -body {
        service fundeni BOB 3000 {SHIA SUNN}
        ted query {SELECT * FROM working_service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding 
---- --- ------- 
KURD BOB 0.0     
KURD JOE 0.0     
SHIA BOB 1000.0  
SHIA JOE 0.0     
SUNN BOB 2000.0  
SUNN JOE 0.0     
    }

    test fundeni-1.3 {Fund one group several times} -setup {
        setup
        service start
        service load
    } -body {
        service fundeni JOE 2000 SHIA
        service fundeni JOE 3000 SHIA
        ted query {SELECT * FROM working_service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding 
---- --- ------- 
KURD BOB 0.0     
KURD JOE 0.0     
SHIA BOB 0.0     
SHIA JOE 5000.0  
SUNN BOB 0.0     
SUNN JOE 0.0     
    }

    #-------------------------------------------------------------------
    # fundlevel

    test fundlevel-1.1 {Returns funding level for groups} -setup {
        setup
        service start
        service load
    } -body {
        service save
        service fundlevel 100 {SUNN SHIA}
    } -cleanup {
        cleanup
    } -result {12000.0}

    test fundlevel-1.2 {Returns funding level for groups, smaller %} -setup {
        setup
        service start
        service load
    } -body {
        service save
        service fundlevel 50 {SUNN SHIA}
    } -cleanup {
        cleanup
    } -result {6000.0}

    #-------------------------------------------------------------------
    # save

    test save-1.1 {Logs changed funding levels} -setup {
        setup
        service start
        service load
        service fundeni JOE 7000.0 {SHIA SUNN KURD}
    } -body {
        service save

        rdb eval {SELECT count(event_id) FROM sigevents}
    } -cleanup {
        cleanup
    } -result {3}

    test save-2.1 {Saves service back to service_g} -setup {
        setup
        service start
        service load
        service fundeni JOE 7000.0 {SHIA SUNN KURD}
    } -body {
        service save

        ted query {SELECT * FROM service_ga ORDER BY g,a}
    } -cleanup {
        cleanup
    } -result {
g    a   funding credit 
---- --- ------- ------ 
KURD BOB 0.0     0.0    
KURD JOE 1750.0  0.0    
SHIA BOB 0.0     0.0    
SHIA JOE 1750.0  0.0    
SUNN BOB 0.0     0.0    
SUNN JOE 3500.0  0.0    
    }


    test save-3.1 {Computes saturation funding} -setup {
        setup
        service start
        service load
    } -body {
        service save

        # saturation_funding is population.g * S.urb;
        # NB1.urb = URBAN, S.URBAN = 0.2 (SHIA, SUNN)
        # NB2.urb = RURAL, S.RURAL = 0.1 (KURD)
        ted query {SELECT g, saturation_funding FROM service_g ORDER BY g}
    } -cleanup {
        cleanup
    } -result {
g    saturation_funding 
---- ------------------ 
KURD 4000.0             
SHIA 4000.0             
SUNN 8000.0             
    }
    
    test save-3.2 {Retrieves required fraction} -setup {
        setup
        service start
        service load
    } -body {
        service save

        ted query {SELECT g, required FROM service_g ORDER BY g}
    } -cleanup {
        cleanup
    } -result {
g    required 
---- -------- 
KURD 0.2      
SHIA 0.6      
SUNN 0.6      
    }

    test save-3.3 {Computes funding: zero funding} -setup {
        setup
        service start
        service load
    } -body {
        service save

        ted query {SELECT g, funding FROM service_g ORDER BY g}
    } -cleanup {
        cleanup
    } -result {
g    funding 
---- ------- 
KURD 0.0     
SHIA 0.0     
SUNN 0.0     
    }

    test save-3.4 {Computes funding: JOE and BOB fund} -setup {
        setup
        service start
        service load
        service fundeni JOE 700.0  {SHIA SUNN KURD}
        service fundeni BOB 1400.0 {SHIA SUNN KURD}
    } -body {
        service save

        # Groups get funding in proportion to their size.
        # So from JOE the groups get 100, 200, and 400
        # and from BOB, they get 200, 400, and 800
        ted query {SELECT g, funding FROM service_g ORDER BY g}
    } -cleanup {
        cleanup
    } -result {
g    funding 
---- ------- 
KURD 525.0   
SHIA 525.0   
SUNN 1050.0  
    }

    test save-3.5 {Computes actual level of service fraction} -setup {
        setup
        service start
        service load
        service fundeni JOE 700.0  {SHIA SUNN KURD}
        service fundeni BOB 1400.0 {SHIA SUNN KURD}
    } -body {
        service save

        ted query {
            SELECT g, 
                   funding, 
                   saturation_funding,
                   funding/saturation_funding,
                   actual 
            FROM service_g ORDER BY g
        }
    } -cleanup {
        cleanup
    } -result {
g    funding saturation_funding funding/saturation_funding actual  
---- ------- ------------------ -------------------------- ------- 
KURD 525.0   4000.0             0.13125                    0.13125 
SHIA 525.0   4000.0             0.13125                    0.13125 
SUNN 1050.0  8000.0             0.13125                    0.13125 
    }

    test save-3.6 {Computes expected LOS fraction at time 0} -setup {
        setup
        service start
        service load
        service save
        service fundeni JOE 700.0  {SHIA SUNN KURD}
        service fundeni BOB 1400.0 {SHIA SUNN KURD}
    } -body {
        service save

        # The expected will be between 0 and actual
        ted query {
            SELECT g, actual, expected FROM service_g ORDER BY g
        }
    } -cleanup {
        cleanup
    } -result {
g    actual  expected 
---- ------- -------- 
KURD 0.13125 0.065625 
SHIA 0.13125 0.065625 
SUNN 0.13125 0.065625 
    }


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






