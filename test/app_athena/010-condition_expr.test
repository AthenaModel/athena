# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-condition_expr.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    condition_expr(sim) tests.
#
#    This test suite tests the condition_expr(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable B1
        variable C1

        set B1 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 EXPR]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        expression {}
        id         *
        metflag    {}
        name       C*
        parent     *
        pot        *::pot
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set C1 [condition::EXPR new -parent DUMMY]
        $C1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}


    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, initial state} -setup {
        setup
    } -body {
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Expression: ???}

    test narrative-1.2 {narrative, with group} -setup {
        setup
        $C1 configure -expression "1 + 1 == 2"
    } -body {
        $C1 narrative
    } -cleanup {
        cleanup
    } -result {Expression: 1 + 1 == 2}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {check: expression is empty} -setup {
        setup
        $C1 configure -expression ""
    } -body {
        ted pdicts [$C1 check]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        expression {No expression has been specified}
    }

    test check-1.2 {check: successful} -setup {
        setup
        $C1 configure -expression {1 + 2 == 2}
    } -body {
        $C1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # eval

    test eval-1.1 {Test is true} -setup {
        setup
    } -body {
        $C1 configure -expression {1 + 1 == 2}
        $C1 eval
    } -cleanup {
        cleanup
    } -result {1}

    test eval-1.2 {Test is false} -setup {
        setup
    } -body {
        $C1 configure -expression {1 + 1 != 2}
        $C1 eval
    } -cleanup {
        cleanup
    } -result {0}

    test eval-1.3 {Error in expression} -setup {
        setup
    } -body {
        $C1 configure -expression {NONESUCH} -state normal
        list [$C1 eval] [$C1 state]
    } -cleanup {
        cleanup
    } -result {0 invalid}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








