# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_build.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    tactic_build(sim) tests.
#
#    This test suite tests the tactic::BUILD ensemble.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 SHIA SUNN KURD BLUE

        rdb eval {
            INSERT INTO plants_shares(n, a, num, rho)
            VALUES('NB1', 'JOE', 1, 0.9);
        }

        plant start
        cash load

        set coffer [coffer new JOE]

        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 BUILD]
    }

    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        variable coffer
        $coffer destroy
        ted cleanup
    }

       
    #-------------------------------------------------------------------
    # constructor
    
    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0
        done       0
        execstatus NONE
        faildict   {}
        id         *
        mode       CASH
        n          {}
        name       T*
        num        1
        parent     *
        percent    0
        pot        ::pot
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::BUILD new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Use at most $0/week to build infrastructure in ???.}

    test narrative-1.2 {narrative, mode CASH} -setup {
        setup
        $T1 set mode CASH
        $T1 set n NB1
        $T1 set amount 10000.0
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Use at most $10,000/week to build infrastructure in {nbhood:NB1}.}

    test narrative-1.3 {narrative, mode EFFORT} -setup {
        setup
        $T1 set mode EFFORT
        $T1 set n NB1
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Use up to all remaining cash-on-hand each week to fund 1 work-weeks each week in {nbhood:NB1}.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails}  -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {n {No neighborhood selected.}}

    test check-1.2 {check: n no longer exists} -setup {
        setup
        $T1 set n NB2
        rdb eval {DELETE FROM nbhoods WHERE n='NB2'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {n {No such neighborhood: "NB2".}}

    test check-1.3 {check: n no longer local} -setup {
        setup
        $T1 set n NB2
        rdb eval {UPDATE nbhoods SET local=0 WHERE n='NB2'}
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {n {Neighborhood "NB2" is not local, should be.}}

    test check-1.4 {check: mode is EFFORT, no effort specified} -setup {
        setup
        $T1 set n NB2
        $T1 set mode EFFORT
        $T1 set num 0
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {num {Must specify > 0 plants to build.}}

    #-------------------------------------------------------------------
    # obligate

    test obligate-1.1 {mode CASH} -setup {
        setup
        $T1 set n NB1
        $T1 set mode CASH
        $T1 set amount 10000.0
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    test obligate-1.2 {mode EFFORT} -setup {
        setup
        $T1 set n NB1
        $T1 set mode EFFORT
        $T1 set num 5
    } -body {
        set a [$coffer cash]
        set b [$T1 obligate $coffer]
        set c [$coffer cash]
        list $a $b $c
    } -cleanup {
        cleanup
    } -result {10000.0 1 0.0}

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {execute: succeeds} -setup {
        setup
        $T1 set n NB1
        $T1 set mode CASH
        $T1 set amount 10000
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_cash}
    } -cleanup {
        cleanup
    } -result {
a   cash_reserve income  cash_on_hand gifts 
--- ------------ ------- ------------ ----- 
JOE 200000.0     10000.0 0.0          0.0   
BOB 150000.0     5000.0  5000.0       0.0   
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





