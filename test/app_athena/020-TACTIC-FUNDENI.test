# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-TACTIC-FUNDENI.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) TACTIC:FUNDENI:* order tests.
#
#    This test suite tests the FUNDENI tactic's orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests
    proc setup {} {
        ted create JOE NB1 NB2 SHIA SUNN KURD
        variable S1
        variable B1
        variable T1

        set S1 [strategy getname JOE]
        ted order STRATEGY:BLOCK:ADD agent JOE
        lassign [$S1 blocks] B1
        ted order BLOCK:TACTIC:ADD block_id [$B1 id] typename FUNDENI
        lassign [$B1 tactics] T1
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # TACTIC:FUNDENI

    test TACTIC:FUNDENI-1.1 {required parms} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI
    } -result {
        tactic_id {required value}
    }

    test TACTIC:FUNDENI-1.2 {tactic_id is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id NONESUCH
    } -cleanup {
        cleanup
    } -result {
        tactic_id {Invalid FUNDENI ID: "NONESUCH"}
    }

    test TACTIC:FUNDENI-1.3 {mode is unknown} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] mode NONESUCH
    } -cleanup {
        cleanup
    } -result {
        mode {invalid value "NONESUCH", should be one of: ALL, EXACT, UPTO, PERCENT, EXCESS}
    }

    test TACTIC:FUNDENI-1.4 {amount is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] amount NONESUCH
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:FUNDENI-1.5 {percent is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] percent NONESUCH
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "NONESUCH", expected double}
    }

    test TACTIC:FUNDENI-1.6 {los is non-numeric} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] los NONESUCH
    } -cleanup {
        cleanup
    } -result {
        los {invalid value "NONESUCH", expected double}
    }

    test TACTIC:FUNDENI-1.7 {amount is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] amount -1
    } -cleanup {
        cleanup
    } -result {
        amount {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test TACTIC:FUNDENI-1.8 {percent is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] percent -1
    } -cleanup {
        cleanup
    } -result {
        percent {invalid value "-1", expected double in range 0.0, 100.0}
    }

    test TACTIC:FUNDENI-1.8 {los is negative} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI tactic_id [$T1 id] los -1
    } -cleanup {
        cleanup
    } -result {
        los {invalid value "-1", expected double in range 0.0, 100.0}
    }

    test TACTIC:FUNDENI-1.9 {mode requires amount, no amount} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI \
            tactic_id [$T1 id] mode EXACT amount 0.0
    } -cleanup {
        cleanup
    } -result {
        amount {You must specify an amount > 0.0}
    }

    test TACTIC:FUNDENI-1.10 {mode requires percent, no percent} -setup {
        setup
    } -body {
        ted order -reject TACTIC:FUNDENI \
            tactic_id [$T1 id] mode PERCENT percent 0.0
    } -cleanup {
        cleanup
    } -result {
        percent {You must specify a percent > 0.0}
    }

    test TACTIC:FUNDENI-2.1 {tactic is created} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI tactic_id [$T1 id] \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        cmode      CAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule BY_VALUE raw_value {SHIA SUNN KURD}}
        id         *
        los        100.0
        mode       ALL
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test TACTIC:FUNDENI-2.2 {tactic is created, EXACT} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI tactic_id [$T1 id] mode EXACT amount 10.0 \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     10.0
        cmode      CAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule BY_VALUE raw_value {SHIA SUNN KURD}}
        id         *
        los        100.0
        mode       EXACT
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test TACTIC:FUNDENI-2.3 {tactic is created, UPTO} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI tactic_id [$T1 id] mode UPTO amount 10.0 \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     10.0
        cmode      CAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule BY_VALUE raw_value {SHIA SUNN KURD}}
        id         *
        los        100.0
        mode       UPTO
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test TACTIC:FUNDENI-2.4 {tactic is created, PERCENT} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI tactic_id [$T1 id] mode PERCENT percent 10.0 \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     0.0
        cmode      CAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule BY_VALUE raw_value {SHIA SUNN KURD}}
        id         *
        los        100.0
        mode       PERCENT
        parent     ::bean::block*
        percent    10.0
        state      normal
    }

    test TACTIC:FUNDENI-2.5 {tactic is created, EXCESS} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI tactic_id [$T1 id] mode EXCESS amount 10.0 \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     10.0
        cmode      CAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule BY_VALUE raw_value {SHIA SUNN KURD}}
        id         *
        los        100.0
        mode       EXCESS
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test TACTIC:FUNDENI-2.6 {tactic is created, UNCAPPED} -setup {
        setup
    } -body {
        ted order TACTIC:FUNDENI tactic_id [$T1 id] cmode UNCAPPED amount 10.0 \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]

        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        amount     10.0
        cmode      UNCAPPED
        execstatus NONE
        faildict   {}
        glist      {_type CIVGROUPS _rule BY_VALUE raw_value {SHIA SUNN KURD}}
        id         *
        los        100.0
        mode       ALL
        parent     ::bean::block*
        percent    0.0
        state      normal
    }

    test TACTIC:FUNDENI-2.7 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order TACTIC:FUNDENI tactic_id [$T1 id] \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::projectlib::bean <Monitor>}
    }


    test TACTIC:FUNDENI-3.1 {undo effects} -setup {
        setup
        ted order TACTIC:FUNDENI tactic_id [$T1 id] \
            glist [gofer construct CIVGROUPS BY_VALUE {SHIA SUNN KURD}]
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::projectlib::bean <Monitor>}
    }

    test TACTIC:FUNDENI-3.1 {identity} -setup {
        setup
    } -body {
        ted tactic identity $T1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





