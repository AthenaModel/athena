# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-hook.test
#
# AUTHOR:
#    Dave Hanks
#
# DESCRIPTION:
#    hook(sim) tests.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Clean up after a test
    proc cleanup {} {
        ted cleanup
    }

    set h1 [dict create \
                hook_id PUPG                \
                longname "Puppies are good"]

    set t1 [dict create \
                hook_id  PUPG \
                topic_id 1    \
                position 0.9]

    set m1 [dict create \
                iom_id M1          \
                longname "IOM One" \
                hook_id PUPG]

    # mktopic 
    #
    # Makes a bsys topic with ID 1 and name TBD.

    proc mktopic {} {
        bsys topic add 1
        bsys topic configure 1 -name TBD
    }

    #-----------------------------------------------------------------
    # Semantic hook creation

    test create-1.1 {Hook is created} -setup {
    } -body {
        hook mutate create $h1

        ted querylist {SELECT * FROM hooks}
    } -cleanup {
        cleanup
    } -result {
hook_id   PUPG
longname  Puppies are good
    }

    test create-1.2 {Undo deletes the hook} -setup {
        set undo [hook mutate create $h1]
    } -body {
        {*}$undo
        rdb query {SELECT hook_id FROM hooks}
    } -cleanup {
        cleanup
    } -result {}

    #---------------------------------------------------------------
    # Semantic hook update

    test update-1.1 {Hook is updated} -setup {
        hook mutate create $h1
    } -body {
        set parms(hook_id) [rdb onecolumn {SELECT hook_id FROM hooks}]
        set parms(longname) "Puppies are evil"
        hook mutate update [array get parms]
        rdb onecolumn {SELECT longname FROM hooks}
    } -cleanup {
        cleanup
    } -result {Puppies are evil}

    test update-1.2 {Hook update is undone} -setup {
        hook mutate create $h1
        set parms(hook_id) [rdb onecolumn {SELECT hook_id FROM hooks}]
        set parms(longname) "Puppies are evil"
        set undo [hook mutate update [array get parms]]
    } -body {
        {*}$undo
        rdb onecolumn {SELECT longname FROM hooks}
    } -cleanup {
        cleanup
    } -result {Puppies are good}

    #--------------------------------------------------------------
    # Semantic hook delete

    test delete-1.1 {Hook is deleted} -setup {
        hook mutate create $h1
    } -body {
        set hook_id [rdb onecolumn {SELECT hook_id FROM hooks}]
        hook mutate delete $hook_id
        rdb query {SELECT * FROM hooks}
    } -cleanup {
        cleanup
    } -result {}

    test delete-1.2 {Hook deletion is undone} -setup {
        hook mutate create $h1
        set hook_id [rdb onecolumn {SELECT hook_id FROM hooks}]
        set undo [hook mutate delete $hook_id]
    } -body {
        {*}$undo
        ted querylist {SELECT * FROM hooks}
    } -cleanup {
        cleanup
    } -result {
hook_id   PUPG
longname  Puppies are good
    }

    test delete-1.3 {IOM reflects hook delete} -setup {
        hook mutate create $h1
        iom mutate create $m1
    } -body {
        set a [ted querylist {SELECT * FROM ioms}]
        set hook_id [rdb onecolumn {SELECT hook_id FROM hooks}]
        hook mutate delete $hook_id
        set b [ted querylist {SELECT * FROM ioms}]
        return $a$b
    } -cleanup {
        cleanup
    } -result {
iom_id    M1
longname  IOM One
hook_id   PUPG
state     normal
    
iom_id    M1
longname  IOM One
hook_id   
state     normal
    }

    test delete-1.4 {Undo restores hook in ioms} -setup {
        hook mutate create $h1
        iom mutate create $m1
        set hook_id [rdb onecolumn {SELECT hook_id FROM hooks}]
        set undo [hook mutate delete $hook_id]
    } -body {
        namespace eval :: $undo
        expr {[rdb onecolumn {SELECT hook_id FROM ioms}] == $hook_id}
    } -cleanup {
        cleanup
    } -result {1}
        
    #---------------------------------------------------------------
    # Semantic hook topic create

    test createtopic-1.1 {Hook topic is created} -setup {
        mktopic
        hook mutate create $h1
    } -body {
        hook mutate topic create $t1
        ted querylist {SELECT * FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {
hook_id   PUPG
topic_id  1
state     normal
position  0.9
    }

    test createtopic-1.2 {Undo deletes the hook topic} -setup {
        mktopic
        hook mutate create $h1
        set undo [hook mutate topic create $t1]
    } -body {
        {*}$undo
        rdb eval {SELECT id FROM hook_topics_view}
    } -cleanup {
        cleanup
    } -result {}

    #---------------------------------------------------------------
    # Semantic hook topic update

    test updatetopic-1.1 {Hook topic is updated} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set parms(id) [rdb onecolumn {SELECT id FROM hook_topics_view}]
        set parms(position) 0.0
        hook mutate topic update [array get parms]
        rdb onecolumn {SELECT position FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {0.0}

    test updatetopic-1.2 {Hook topic update is undone} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
        set parms(id) [rdb onecolumn {SELECT id FROM hook_topics_view}]
        set parms(position) 0.0
        set undo [hook mutate topic update [array get parms]]
    } -body {
        {*}$undo
        rdb onecolumn {SELECT position FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {0.9}

    #--------------------------------------------------------------
    # Semantic hook topic state change

    test state-1.1 {Hook is changed to disabled} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        set state "disabled"
        hook mutate topic state $id $state
        rdb onecolumn {SELECT state FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {disabled}

    test state-1.2 {Undo hook is changed to disabled} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        set state "disabled"
        set undo [hook mutate topic state $id $state]
    } -body {
        {*}$undo
        rdb onecolumn {SELECT state FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {normal}


    #--------------------------------------------------------------
    # Semantic hook topic delete

    test deletetopic-1.1 {Hook topic is deleted} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        hook mutate topic delete $id
        rdb query {SELECT * FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {}

    test deletetopic-1.2 {Hook deletion is undone} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        set undo [hook mutate topic delete $id]
    } -body {
        {*}$undo
        ted querylist {SELECT * FROM hook_topics}
    } -cleanup {
        cleanup
    } -result {
hook_id   PUPG
topic_id  1
state     normal
position  0.9
    }

    #----------------------------------------------------------
    # Public methods

    # names
    test names-1.1 {Hook module returns short names} -setup {
        hook mutate create $h1
    } -body {
        set names [rdb onecolumn {SELECT hook_id FROM hooks}]
        expr {[hook names] eq $names}
    } -cleanup {
        cleanup
    } -result {1}

    # get
    test get-1.1 {Get all hook data} -setup {
        hook mutate create $h1
    } -body {
        set id [rdb onecolumn {SELECT hook_id FROM hooks}]
        ted pdicts [hook get $id]
    } -cleanup {
        cleanup
    } -match dict -result {
        fancy     {PUPG: Puppies are good}
        hook_id   PUPG
        link      {<a href="my://app/hook/PUPG">PUPG</a>}
        longlink  {<a href="my://app/hook/PUPG">PUPG: Puppies are good</a>}
        longname  {Puppies are good}
        narrative {Puppies are good: No position on any topics}
        url       my://app/hook/PUPG
    }

    test get-1.2 {Get an attribute} -setup {
        hook mutate create $h1
    } -body {
        hook get PUPG "longname"
    } -cleanup {
        cleanup
    } -result {Puppies are good}

    # validate
    test validate-1.1 {Hook is valid} -setup {
        hook mutate create $h1
    } -body {
        set id [rdb onecolumn {SELECT hook_id FROM hooks}]
        expr {[hook validate $id] == $id}
    } -cleanup {
        cleanup
    } -result {1}
    
    test validate-1.2 {Hook is invalid} -setup {
        hook mutate create $h1
    } -body {
        hook validate "FOO"
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid hook ID, should be one of: PUPG}
        
    test validate-1.3 {Hook topic is valid} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        expr {[hook topic validate $id] == $id}
    } -cleanup {
        cleanup
    } -result {1}

    test validate-1.4 {Hook topic is invalid; hook id} -setup {
    } -body {
        hook topic validate {FOO BAR}
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid hook ID, none are defined}

    test validate-1.5 {Hook topic is invalid; topic id} -setup {
        hook mutate create $h1
    } -body {
        set hook_id [rdb onecolumn {SELECT hook_id FROM hooks}]
        hook topic validate [list $hook_id FOO]
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Invalid topic ID}

    # topic exists
    test topic_exists-1.1 {Hook topic exists} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        hook topic exists $id
    } -cleanup {
        cleanup
    } -result {1}

    test topic_exists-1.2 {Hook topic does not exist} -setup {
    } -body {
        hook topic exists {FOO BAR}
    } -result {0}

    # topic get
    test topic_get-1.1 {Get all data} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        ted pdicts [hook topic get $id]
    } -cleanup {
        cleanup
    } -match dict -result {
        fancy        {1: TBD}
        hlink        {<a href="my://app/hook/PUPG">PUPG</a>}
        hook_id      PUPG
        id           {PUPG 1}
        narrative    {Passionately For TBD}
        position     0.90
        raw_position 0.9
        state        normal
        topic_id     1
    }

    test topic_get-1.2 {Get one field} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set id [rdb onecolumn {SELECT id FROM hook_topics_view}]
        hook topic get $id "position"
    } -cleanup {
        cleanup
    } -result {0.90}


    # getdict
    test getdict-1.1 {Nothing is returned} -setup {
    } -body {
        hook getdict FOO
    } -result {}

    test getdict-1.2 {dict is returned} -setup {
        mktopic
        hook mutate create $h1
        hook mutate topic create $t1
    } -body {
        set hook_id [rdb onecolumn {SELECT hook_id FROM hooks}]
        hook getdict $hook_id
    } -cleanup {
        cleanup
    } -result {1 0.9}


    cleanupTests
}

namespace delete ::athena_test::tests::

