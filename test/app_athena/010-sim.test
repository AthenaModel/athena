# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-sim.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    sim(sim) tests.
#
#    This test suite tests the sim(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Get initial time 0
    set clockdata [simclock checkpoint]
    
    # Clean up after a test

    proc cleanup {} {
        variable clockdata

        # Clean up the test environment
        simclock restore $clockdata

        if {[sim state] eq "RUNNING"} {
            sim pause
        }

        if {[sim state] eq "PAUSED"} {
            sim unlock
        }

        ted cleanup
    }

    #-------------------------------------------------------------------
    # init
    #
    # Verify initial module state
   

    test init-1.1 {Initial state} -body {
        list \
            [sim now]         \
            [sim state]       \
            [sim stoptime]    \
            [simclock asString]
        
    } -result {0 PREP 0 2012W01}

    #-------------------------------------------------------------------
    # startdate

    test startdate-1.1 {Sets the simclock's start date} -body {
        sim startdate 2014W26
        simclock cget -week0
    } -cleanup {
        cleanup
    } -result {2014W26}

    
    test startdate-1.2 {Sends <Time>} -body {
        ted notifier bind ::adb <Time>
        sim startdate 2014W26
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::adb <Time>}
    }


    test startdate-1.3 {Returns undo script} -body {
        sim startdate 2014W26
    } -cleanup {
        cleanup
    } -match glob -result {* startdate 2012W01}


    test startdate-1.4 {Sets "changed"} -body {
        sim startdate 2014W26
        sim changed
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # starttick

    test starttick-1.1 {Sets the simclock's start tick} -body {
        sim starttick 52
        simclock cget -tick0
    } -cleanup {
        cleanup
    } -result {52}

    
    test starttick-1.2 {Sends <Time>} -body {
        ted notifier bind ::adb <Time>
        sim starttick 52
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::adb <Time>}
    }


    test starttick-1.3 {Returns undo script} -body {
        sim starttick 52
    } -cleanup {
        cleanup
    } -match glob -result {* starttick 0}


    test starttick-1.4 {Sets "changed"} -body {
        sim starttick 52
        sim changed
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # lock

    test lock-1.1 {lock sets state to PAUSED} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock

        sim state
    } -cleanup {
        cleanup
    } -result {PAUSED}


    test lock-1.2 {must be in PREP} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
        sim lock
    } -body {
        sim lock
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Assertion failed: $info(state) eq "PREP"}

    test lock-1.3 {Saves a PREP snapshot} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock

        adb eval {SELECT tick FROM snapshots}
    } -cleanup {
        cleanup
    } -result {-1}

    test lock-1.4 {Initializes URAM} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock

        adb onecolumn {SELECT n FROM uram_n}
    } -cleanup {
        cleanup
    } -result {NB1}

    #-------------------------------------------------------------------
    # run/pause


    test runpause-1.1 {No stop time} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run
        sim stoptime
    } -cleanup {
        cleanup
    } -result {0}

    
    test runpause-1.2 {Run for -ticks} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run -ticks 5
        sim stoptime
    } -cleanup {
        cleanup
    } -result {5}

    test runpause-1.3 {Run -until} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run -until 10
        sim stoptime
    } -cleanup {
        cleanup
    } -result {10}

    test runpause-1.4 {Sets state to "RUNNING"} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run
        sim state
    } -cleanup {
        cleanup
    } -result {RUNNING}


    test runpause-1.5 {Can't run unless "PAUSED"} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run
        sim run
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Assertion failed: $info(state) eq "PAUSED"}


    test runpause-1.6 {Sends <State>} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        ted notifier bind ::adb <State>
        sim run
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::adb <State>}
    }


    test runpause-1.7 {Returns undo script} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run
    } -cleanup {
        cleanup
    } -result {}


    test runpause-2.1 {Pauses if running} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run
        simclock tick
        sim pause
        sim state
    } -cleanup {
        cleanup
    } -result {PAUSED}


    test runpause-2.2 {Sends <State>} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run
        ted notifier bind ::adb <State>
        sim pause
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::adb <State>}
    }

    
    test runpause-2.3 {Returns undo script} -setup {
        ted create NB1 BLUE SHIA
    } -body {
        sim pause
    } -cleanup {
        cleanup
    } -result {}


    test runpause-2.4 {Runs for some number of ticks} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        sim lock
        sim run -ticks 5 -block yes
        list [simclock now] [sim state]
    } -cleanup {
        cleanup
    } -result {5 PAUSED}

    #-------------------------------------------------------------------
    # unlock

    test unlock-1.1 {Can't unlock in PREP} -body {
        sim unlock
    } -returnCodes {
        error
    } -cleanup {
        cleanup
    } -result {Assertion failed: $info(state) eq "PAUSED"}

    test unlock-1.2 {Sets state to PREP} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
        sim lock
    } -body {
        sim unlock
        sim state
    } -cleanup {
        cleanup
    } -result {PREP}

    test unlock-1.3 {Purges snapshot} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
        sim lock
        sim run -ticks 1 -block yes
    } -body {
        sim unlock
        adb eval {SELECT tick FROM snapshots}
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # now

    test now-1.1 {Returns 0 at time 0} -body {
        expr {[sim now] == [simclock now]}
    } -result {1}


    #-------------------------------------------------------------------
    # state

    test state-1.1 {Returns current state} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        set states [list]
        
        lappend states [sim state]
        sim lock
        lappend states [sim state]
        sim run
        simclock tick
        lappend states [sim state]
        sim pause
        lappend states [sim state]
        sim unlock
        lappend states [sim state]

        set states
    } -cleanup {
        cleanup
    } -result {PREP PAUSED RUNNING PAUSED PREP}


    #-------------------------------------------------------------------
    # stoptime

    test stoptime-1.1 {Returns current stoptime} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
    } -body {
        set times [list]

        lappend times [sim stoptime]

        sim lock
        sim run
        lappend times [sim stoptime]
        sim pause
        
        sim run -ticks 5
        lappend times [sim stoptime]
        sim pause

        sim run -until 10
        lappend times [sim stoptime]

        set times
    } -cleanup {
        cleanup
    } -result {0 0 6 10}



    #-------------------------------------------------------------------
    # restart
    #
    # NOTE: sim unlock is tested pretty thoroughly during the "cleanup"
    # process and by the other tests.

    test restart-1.1 {Check results} -setup {
        ted create NB1 BLUE SHIA
        parm set econ.gdpExp 0
        parm set econ.empExp 0
        sim lock
        sim run
        simclock advance 5
        sim pause
        sim startdate 2014W26
    } -body {
        sim unlock

        list \
            [sim state]         \
            [sim now]           \
            [sim changed]       \
            [simclock cget -week0]
    } -cleanup {
        cleanup
    } -result {PREP 0 1 2012W01}
    
    #-------------------------------------------------------------------
    # rebase
    #
    # Note: this tests [sim rebase] specifically; more general
    # rebase testing is done in 010-rebase.test.
    
    test rebase-1.1 {in prep after rebase} -setup {
        ted create NB1 BLUE SHIA
        ted lock
        ted step
        ted step
    } -body {
        sim rebase
        list \
            [sim state] \
            [simclock now] \
            [simclock cget -tick0]
    } -cleanup {
        cleanup
    } -result {PREP 2 2}
        

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::






