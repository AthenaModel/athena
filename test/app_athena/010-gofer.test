# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-gofer.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    gofer(n) tests.
#
#    This test suite tests the gofer manager type.  It makes use of the
#    ACTORS type to test the generic code.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc cleanup {} {
        ted cleanup
    }
    
    #-------------------------------------------------------------------
    # check
    #
    # This test calls gofer's sanity checker, which sanity checks
    # all of the defined gofers, i.e., that each has the BY_VALUE
    # rule, and that the type's form is consistent with its rules.

    test check-1.1 {runs the sanity check} -body {
        adb gofer check
    } -result {OK}

    #-------------------------------------------------------------------
    # keys

    test keys-1.1 {not a dict} -body {
        adb gofer keys ACTORS BY_VALUE
    } -result {raw_value}

    #-------------------------------------------------------------------
    # make

    test make-1.1 {no such type} -body {
        adb gofer make NONESUCH BY_VALUE 1 2 3
    } -returnCodes {
        error
    } -result {No such gofer type: "NONESUCH"}
    
    test make-1.2 {returns new value} -setup {
        ted create JOE BOB DAVE
    } -body {
        adb gofer make ACTORS BY_VALUE {JOE BOB}
    } -cleanup {
        cleanup
    } -result {_type ACTORS _rule BY_VALUE raw_value {JOE BOB}}

    #-------------------------------------------------------------------
    # validate

    test validate-1.1 {not a dict} -body {
        adb gofer validate NONESUCH
    } -returnCodes {
        error
    } -result {Not a gofer value}
    
    test validate-1.2 {no _type given} -body {
        adb gofer validate {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -result {Not a gofer value}
    
    test validate-1.3 {no such _type} -body {
        adb gofer validate {_type NONESUCH}
    } -returnCodes {
        error
    } -result {No such gofer type: "NONESUCH"}
    
    test validate-1.4 {bad type parms} -body {
        adb gofer validate {_type ACTORS _rule BY_VALUE raw_value NONESUCH}
    } -returnCodes {
        error
    } -match glob -result {Invalid actor*}

    test validate-1.5 {canonicalizes} -setup {
        ted create BOB
    } -body {
        adb gofer validate {_type actors _rule by_value raw_value BOB}
    } -cleanup {
        cleanup
    } -result {_type ACTORS _rule BY_VALUE raw_value BOB}

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {not a dict} -body {
        adb gofer narrative NONESUCH
    } -result {???}
    
    test narrative-1.2 {no _type given} -body {
        adb gofer narrative {NONESUCH NONESUCH}
    } -result {???}
    
    test narrative-1.3 {no such _type} -body {
        adb gofer narrative {_type NONESUCH}
    } -result {???}
    
    test narrative-1.4 {success} -body {
        adb gofer narrative {
            _type     ACTORS 
            _rule     BY_VALUE 
            raw_value {a b c d e f g h i j}
        }
    } -result {these actors (a, b, c, d, e, f, g, h, i, j)}

    test narrative-1.5 {success, -brief} -body {
        adb gofer narrative {
            _type     ACTORS 
            _rule     BY_VALUE 
            raw_value {a b c d e f g h i j}
        } -brief
    } -result {these actors (a, b, c, d, e, f, g, h, ...)}

    #-------------------------------------------------------------------
    # gofer eval

    test eval-1.1 {not a dict} -body {
        adb gofer eval NONESUCH
    } -returnCodes {
        error
    } -result {Not a gofer value}
    
    test eval-1.2 {no _type given} -body {
        adb gofer eval {NONESUCH NONESUCH}
    } -returnCodes {
        error
    } -result {Not a gofer value}
    
    test eval-1.3 {no such _type} -body {
        adb gofer eval {_type NONESUCH}
    } -returnCodes {
        error
    } -result {No such gofer type: "NONESUCH"}
    
    test eval-1.4 {success} -setup {
        ted create JOE BOB DAVE
    } -body {
        adb gofer eval {
            _type     ACTORS 
            _rule     BY_VALUE 
            raw_value {JOE BOB}
        }
    } -cleanup {
        cleanup    
    } -result {JOE BOB}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





