# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_mobilize.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_mobilize(sim) tests.
#
#    This test suite tests the tactic_mobilize(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    proc setup {} {
        variable T1
        variable coffer
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
        personnel start
        personnel load
        set coffer [coffer new JOE]


        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 MOBILIZE]
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        execstatus NONE
        faildict   {}
        g          {}
        id         *
        mode       ADD
        parent     ::bean::block*
        percent    0
        personnel  1
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::MOBILIZE new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}
    

    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Mobilize 1 more group ??? personnel.}

    test narrative-2.1 {valid narrative, ADD} -setup {
        setup
        $T1 configure -g BLUE -mode ADD -personnel 100
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Mobilize 100 more group {group:BLUE} personnel.}

    test narrative-3.1 {valid narrative, PERCENT} -setup {
        setup
        $T1 configure -g BLUE -mode PERCENT -percent 3.5
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Mobilize 3.5% more group {group:BLUE} personnel.}

    test narrative-4.1 {valid narrative, UPTO} -setup {
        setup
        $T1 configure -g BLUE -mode UPTO -personnel 5000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Mobilize group {group:BLUE} personnel up to a maximum of 5000 personnel.}

    test narrative-5.1 {valid narrative, ENSURE} -setup {
        setup
        $T1 configure -g BLUE -mode ENSURE -personnel 5000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {Mobilize enough group {group:BLUE} personnel to ensure that 5000 personnel are available for deployment.}


    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {No group selected.}}

    test check-1.2 {g owned by another actor} -setup {
        setup
    } -body {
        $T1 configure -g NONESUCH
        $T1 check
    } -cleanup {
        cleanup
    } -result {g {JOE does not own a group called "NONESUCH".}}

    test check-1.3 {Success} -setup {
        setup
    } -body {
        $T1 configure -g BLUE -personnel 100
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate

    # NOTE: Mobilize never fails to obligate: we're pulling personnel
    # out of thin air, after all.

    test obligate-1.1 {ADD mode} -setup {
        setup
    } -body {
        $T1 configure -g BLUE -mode ADD -personnel 100

        list \
            [$coffer troops BLUE mobilized] \
            [$T1 obligate $coffer]          \
            [$coffer troops BLUE mobilized]

    } -cleanup {
        cleanup
    } -result {5000 1 5100}

    test obligate-2.1 {PERCENT mode} -setup {
        setup
    } -body {
        $T1 configure -g BLUE -mode PERCENT -percent 10.0

        list \
            [$coffer troops BLUE mobilized] \
            [$T1 obligate $coffer]          \
            [$coffer troops BLUE mobilized]

    } -cleanup {
        cleanup
    } -result {5000 1 5500}

    test obligate-3.1 {UPTO mode, above current} -setup {
        setup
    } -body {
        $T1 configure -g BLUE -mode UPTO -personnel 6000

        list \
            [$coffer troops BLUE mobilized] \
            [$T1 obligate $coffer]          \
            [$coffer troops BLUE mobilized]

    } -cleanup {
        cleanup
    } -result {5000 1 6000}

    test obligate-3.2 {UPTO mode, below current} -setup {
        setup
    } -body {
        $T1 configure -g BLUE -mode UPTO -personnel 4000

        list \
            [$coffer troops BLUE mobilized] \
            [$T1 obligate $coffer]          \
            [$coffer troops BLUE mobilized]

    } -cleanup {
        cleanup
    } -result {5000 1 5000}

    test obligate-4.1 {ENSURE mode, above current} -setup {
        setup
        $coffer deploy BLUE NB1 [$coffer troops BLUE undeployed]
    } -body {
        # No troops undeployed; should mobilize 1000
        $T1 configure -g BLUE -mode ENSURE -personnel 1000

        list \
            [$coffer troops BLUE mobilized] \
            [$T1 obligate $coffer]          \
            [$coffer troops BLUE mobilized]

    } -cleanup {
        cleanup
    } -result {5000 1 6000}

    test obligate-4.2 {ENSURE mode, below current} -setup {
        setup
    } -body {
        # 5000 troops undeployed; should mobilize 0
        $T1 configure -g BLUE -mode ENSURE -personnel 1000

        list \
            [$coffer troops BLUE mobilized] \
            [$T1 obligate $coffer]          \
            [$coffer troops BLUE mobilized]

    } -cleanup {
        cleanup
    } -result {5000 1 5000}


    #-------------------------------------------------------------------
    # execute
    #
    # NOTE: The actual amount to mobilize is determined during obligation;
    # there is no mode-specific execution code.

    test execute-1.1 {always succeeds} -setup {
        setup
        $T1 configure -g BLUE -mode ADD -personnel 1000
        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT * FROM working_personnel WHERE g='BLUE'}
    } -cleanup {
        cleanup
    } -result {
g    personnel available 
---- --------- --------- 
BLUE 6000      6000      
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








