# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-tactic_assign.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    tactic_assign(sim) tests.
#
#    This test suite tests the tactic_assign(sim) class.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    # If opt is -valid, sets up a valid tactic.
    proc setup {{opt ""}} {
        variable B1
        variable T1
        variable coffer

        # FIRST, create the basic entities.
        ted create JOE BLUE ALQ NB1 NB2 SUNN SHIA KURD USAID

        # NEXT, create a default ASSIGN tactic
        set B1 [ted addblock JOE]
        set T1 [ted addtactic $B1 ASSIGN]

        # NEXT, when desired make it valid.
        if {$opt eq "-valid"} {
            # pmode is ALL by default.
            $T1 configure -g BLUE -n NB1 -activity PATROL
            $T1 check
        }

        # NEXT, prepare for obligation
        cash load
        personnel start
        personnel load
        set coffer [coffer new JOE]
    }

    # Set the cost of the PATROL activity
    proc setcost {cost} {
        parm set activity.FRC.PATROL.cost $cost
    }

    # Set the number of unassigned troops (<= 5000)
    proc settroops {troops} {
        variable coffer
        $coffer deploy BLUE NB1 $troops
    }

    # Clean up after a test

    proc cleanup {} {
        variable coffer
        $coffer destroy
        strategy locking 0
        ted cleanup
    }

    #-------------------------------------------------------------------
    # Constructor

    test constructor-1.1 {default state} -setup {
        setup
    } -body {
        ted pdicts [$T1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        activity   {}
        execstatus NONE
        faildict   {}
        g          {}
        id         5
        max        0
        min        0
        n          {}
        parent     ::bean::block4
        percent    0.0
        personnel  0
        pmode      ALL
        state      invalid
    }

    test constructor-1.2 {can set options} -setup {
        setup
    } -body {
        set T1 [tactic::ASSIGN new -parent DUMMY]
        $T1 get parent
    } -cleanup {
        cleanup
    } -result {DUMMY}



    #-------------------------------------------------------------------
    # narrative

    test narrative-1.1 {narrative, default state} -setup {
        setup
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In ???, assign all of ???'s unassigned personnel to do ???.}

    test narrative-1.2 {pmode ALL} -setup {
        setup
        $T1 configure -g BLUE -n NB1 -activity PATROL
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In {nbhood:NB1}, assign all of {group:BLUE}'s unassigned personnel to do PATROL.}

    test narrative-1.3 {pmode SOME} -setup {
        setup
        $T1 configure -g BLUE -n NB1 -activity PATROL \
            -pmode SOME -personnel 1000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In {nbhood:NB1}, assign 1000 of {group:BLUE}'s unassigned personnel to do PATROL.}

    test narrative-1.4 {pmode UPTO} -setup {
        setup
        $T1 configure -g BLUE -n NB1 -activity PATROL \
            -pmode UPTO -min 100 -max 200
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In {nbhood:NB1}, assign at least 100, up to 200 of {group:BLUE}'s unassigned personnel to do PATROL.}

    test narrative-1.5 {pmode ALLBUT} -setup {
        setup
        $T1 configure -g BLUE -n NB1 -activity PATROL \
            -pmode ALLBUT -personnel 1000
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In {nbhood:NB1}, assign all but 1000 of {group:BLUE}'s unassigned personnel to do PATROL.}

    test narrative-1.6 {pmode PERCENT} -setup {
        setup
        $T1 configure -g BLUE -n NB1 -activity PATROL \
            -pmode PERCENT -percent 50.0
    } -body {
        $T1 narrative
    } -cleanup {
        cleanup
    } -result {In {nbhood:NB1}, assign 50.0% of {group:BLUE}'s unassigned personnel to do PATROL.}

    #-------------------------------------------------------------------
    # check

    test check-1.1 {Initial state fails} -setup {
        setup
    } -body {
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        g        {No group selected.} 
        n        {No neighborhood selected.} 
        activity {No activity selected.}
    }

    test check-1.2 {g doesn't exist or is owned by another actor} -setup {
        setup -valid
    } -body {
        $T1 configure -g NONESUCH
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        g        {JOE does not own a force group called "NONESUCH".} 
        activity {Invalid activity for selected group: "PATROL".}
    }

    test check-1.3 {unknown n} -setup {
        setup -valid
    } -body {
        $T1 configure -n NONESUCH
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        n {No such neighborhood: "NONESUCH".}
    }

    test check-1.4 {unknown activity} -setup {
        setup -valid
    } -body {
        $T1 configure -activity NONESUCH
        ted pdicts [$T1 check]
    } -cleanup {
        cleanup
    } -match dict -result {
        activity {Invalid activity for selected group: "NONESUCH".}
    }

    test check-1.5 {Success} -setup {
        setup -valid
    } -body {
        $T1 check
    } -cleanup {
        cleanup
    } -result {}

    #-------------------------------------------------------------------
    # obligate
    #
    # The following tree shows an outline of the test cases, with 
    # test numbers.
    #
    # 1.*: pmode=ALL
    # 2.*: pmode=SOME
    # 3.*: pmode=UPTO
    # 4.*: pmode=ALLBUT
    # 5.*: pmode=PERCENT

    # 1.*: pmode=ALL

    test obligate-1.1 {pmode=ALL, No troops} -setup {
        setup -valid
        $T1 configure -pmode ALL
    } -body {
        set before [$coffer troops BLUE NB1]
        set flag [$T1 obligate $coffer]
        set after [$coffer troops BLUE NB1]

        # Succeed with empty assignment
        list $flag [expr {$before == $after}]
    } -cleanup {
        cleanup
    } -result {1 1}

    test obligate-1.2 {pmode=ALL, Insufficient cash on tick} -setup {
        setup -valid
        $T1 configure -pmode ALL
        settroops 1000
        setcost 1000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $1,000,000, but had only $10,000.}}

    test obligate-1.3 {pmode=ALL, got resources on tick} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode ALL
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1000 10000.0 1 0 9000.0}

    test obligate-1.4 {pmode=ALL, no cash on lock} -setup {
        setup -valid
        settroops 1000
        setcost 1000
        strategy locking 1
        $T1 configure -pmode ALL
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE NB1]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 0 0.0}


    # 2.*: pmode=SOME

    test obligate-2.1 {pmode=SOME, Insufficient troops} -setup {
        setup -valid
        $T1 configure -pmode SOME -personnel 100
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {PERSONNEL {Required 100 personnel, but had only 0 available.}}

    test obligate-2.2 {pmode=SOME, Insufficient cash on tick} -setup {
        setup -valid
        $T1 configure -pmode SOME -personnel 100
        settroops 1000
        setcost 1000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $100,000, but had only $10,000.}}

    test obligate-2.3 {pmode=SOME, got resources on tick} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode SOME -personnel 100
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1000 10000.0 1 900 9900.0}

    test obligate-2.4 {pmode=SOME, no cash on lock} -setup {
        setup -valid
        settroops 2000
        setcost 1000
        strategy locking 1
        $T1 configure -pmode SOME -personnel 1000
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE NB1]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 1000 0.0}


    # 3.*: pmode=UPTO

    test obligate-3.1 {pmode=UPTO, Insufficient troops} -setup {
        setup -valid
        $T1 configure -pmode UPTO -min 100 -max 200
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {PERSONNEL {Required 100 personnel, but had only 0 available.}}

    test obligate-3.2 {pmode=UPTO, Insufficient cash on tick} -setup {
        setup -valid
        $T1 configure -pmode UPTO -min 100 -max 200
        settroops 1000
        setcost 1000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $100,000, but had only $10,000.}}

    test obligate-3.3 {pmode=UPTO, got max on tick} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode UPTO -min 100 -max 200
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1000 10000.0 1 800 9800.0}

    test obligate-3.4 {pmode=UPTO, cash for less than max} -setup {
        setup -valid
        setcost 10   ;# Can afford 1000
        settroops 2000
        $T1 configure -pmode UPTO -min 100 -max 2000
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {2000 10000.0 1 1000 0.0}

    test obligate-3.5 {pmode=UPTO, personnel for less than max} -setup {
        setup -valid
        setcost 1 ;# Can afford 1000
        settroops 1000
        $T1 configure -pmode UPTO -min 100 -max 2000
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1000 10000.0 1 0 9000.0}

    test obligate-3.6 {pmode=UPTO, no cash on lock} -setup {
        setup -valid
        settroops 2000
        setcost 1000
        strategy locking 1
        $T1 configure -pmode UPTO -min 1000 -max 1500
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE NB1]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 500 0.0}

    # 4.*: pmode=ALLBUT

    test obligate-4.1 {pmode=ALLBUT, No troops} -setup {
        setup -valid
        $T1 configure -pmode ALLBUT -personnel 100
    } -body {
        set before [$coffer troops BLUE NB1]
        set flag [$T1 obligate $coffer]
        set after [$coffer troops BLUE NB1]

        # Succeed with empty assignment
        list $flag [expr {$before == $after}]
    } -cleanup {
        cleanup
    } -result {1 1}

    test obligate-4.2 {pmode=ALLBUT, Insufficient cash on tick} -setup {
        setup -valid
        $T1 configure -pmode ALLBUT -personnel 100
        settroops 1000
        setcost 1000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $900,000, but had only $10,000.}}

    test obligate-4.3 {pmode=ALLBUT, got resources on tick} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode ALLBUT -personnel 100
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1000 10000.0 1 100 9100.0}

    test obligate-4.4 {pmode=ALLBUT, no cash on lock} -setup {
        setup -valid
        settroops 1000
        setcost 1000
        strategy locking 1
        $T1 configure -pmode ALLBUT -personnel 100
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE NB1]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 100 0.0}

    # 5.*: pmode=PERCENT

    test obligate-5.1 {pmode=PERCENT, No troops} -setup {
        setup -valid
        $T1 configure -pmode PERCENT -percent 50.0
    } -body {
        set before [$coffer troops BLUE NB1]
        set flag [$T1 obligate $coffer]
        set after [$coffer troops BLUE NB1]

        # Succeed with empty assignment
        list $flag [expr {$before == $after}]
    } -cleanup {
        cleanup
    } -result {1 1}

    test obligate-5.2 {pmode=PERCENT, Insufficient cash on tick} -setup {
        setup -valid
        $T1 configure -pmode PERCENT -percent 50.0
        settroops 1000
        setcost 1000
    } -body {
        $T1 obligate $coffer
        $T1 faildict
    } -cleanup {
        cleanup
    } -result {CASH {Required $500,000, but had only $10,000.}}

    test obligate-5.3 {pmode=PERCENT, got resources on tick} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode PERCENT -percent 50.0
    } -body {
        set a [$coffer troops BLUE NB1]
        set b [$coffer cash]
        set c [$T1 obligate $coffer]
        set d [$coffer troops BLUE NB1]
        set e [$coffer cash]

        list $a $b $c $d $e
    } -cleanup {
        cleanup
    } -result {1000 10000.0 1 500 9500.0}

    test obligate-5.4 {pmode=PERCENT, no cash on lock} -setup {
        setup -valid
        settroops 1000
        setcost 1000
        strategy locking 1
        $T1 configure -pmode PERCENT -percent 50.0
    } -body {
        set a [$T1 obligate $coffer]
        set b [$coffer troops BLUE NB1]
        set c [$coffer cash]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {1 500 0.0}


    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {assigns troops} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode SOME -personnel 100
        personnel deploy 1 NB1 BLUE 1000

        $T1 obligate $coffer
    } -body {
        $T1 execute
        ted query {SELECT g, personnel FROM units}
    } -cleanup {
        cleanup
    } -match glob -result {
g    personnel 
---- --------- 
BLUE 100       
    }

    test execute-1.2 {expends cash} -setup {
        setup -valid
        setcost 1
        settroops 1000
        $T1 configure -pmode SOME -personnel 100
        personnel deploy 1 NB1 BLUE 1000

        $T1 obligate $coffer
    } -body {
        $T1 execute
        rdb onecolumn {SELECT cash_on_hand FROM working_cash WHERE a='JOE'}
    } -cleanup {
        cleanup
    } -result {9900.0}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::









