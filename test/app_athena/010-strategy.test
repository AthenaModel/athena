# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    010-strategy.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    strategy(sim) tests.
#
#    This test suite tests the strategy(sim) mutators and queries
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    set S1 ::strategy::SYSTEM

    proc setup {} {
        ted create JOE BOB NB1 NB2 BLUE BRIT SHIA SUNN KURD
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #===================================================================
    # Class Methods
    

    #-------------------------------------------------------------------
    # strategy init

    test strategy_init-1.1 {creates predefined agent strategies} -body {
        # init is called automatically when the application is initialized.
        info class instances ::strategy 
    } -result {::strategy::SYSTEM}

    test strategy_init-1.2 {locking is initialized} -body {
        # init is called automatically when the application is initialized.
        strategy locking
    } -result {0}

    #-------------------------------------------------------------------
    # strategy getname

    test strategy_getname-1.1 {defines strategy names} -body {
        strategy getname DUMMY
    } -result {::strategy::DUMMY}

    #-------------------------------------------------------------------
    # strategy locking

    test strategy_locking-1.1 {sets and returns locking flag} -body {
        set a [strategy locking]
        set b [strategy locking 1]
        set c [strategy locking]
        list $a $b $c
    } -cleanup {
        strategy locking 0
    } -result {0 1 1}
    
    
    #-------------------------------------------------------------------
    # strategy create_

    test strategy_create-1.1 {creates a strategy} -body {
        strategy create_ DUMMY

        list \
            [info object class ::strategy::DUMMY] \
            [::strategy::DUMMY agent]
    } -cleanup {
        cleanup
    } -result {::strategy DUMMY}

    test strategy_create-2.1 {create can be undone} -body {
        set undo [strategy create_ DUMMY]
        namespace eval :: $undo

        info object isa object ::strategy::DUMMY
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # strategy delete_

    test strategy_delete-1.1 {deletes a strategy} -setup {
        strategy create_ DUMMY
    } -body {
        strategy delete_ DUMMY

        info object isa object ::strategy::DUMMY
    } -cleanup {
        cleanup
    } -result {0}


    test strategy_delete-2.1 {delete can be undone} -setup {
        strategy create_ DUMMY
    } -body {
        set undo [strategy delete_ DUMMY]
        namespace eval :: $undo

        list \
            [info object class ::strategy::DUMMY] \
            [::strategy::DUMMY agent]
    } -cleanup {
        cleanup
    } -result {::strategy DUMMY}

    #-------------------------------------------------------------------
    # start

    # TBD

    #-------------------------------------------------------------------
    # tock

    # TBD
    


    #===================================================================
    # Instance Methods
    #
    # Since the SYSTEM agent's strategy is created automatically, we'll
    # use it for the following tests.  It is saved to S1.
    

    #-------------------------------------------------------------------
    # constructor

    test constructor-1.1 {strategy is created} -setup {
        setup
    } -body {
        ted pdict [$S1 getdict]
    } -cleanup {
        cleanup
    } -match glob -result {
        id     *
        blocks {}
        agent  SYSTEM
    }


    #-------------------------------------------------------------------
    # agent

    test agent-1.1 {returns agent} -setup {
        setup
    } -body {
        $S1 agent
    } -cleanup {
        cleanup
    } -result {SYSTEM}

    #-------------------------------------------------------------------
    # blocks
    
    test blocks-1.1 {returns blocks} -setup {
        setup
    } -body {
        $S1 set blocks {A B C D}
        $S1 blocks
    } -cleanup {
        cleanup
    } -result {A B C D}

    test blocks-1.2 {returns a specific block} -setup {
        setup
    } -body {
        $S1 set blocks {A B C D}
        $S1 blocks end
    } -cleanup {
        cleanup
    } -result {D}

    #-------------------------------------------------------------------
    # check

    # TBD

    #-------------------------------------------------------------------
    # execute

    test execute-1.1 {executes eligible blocks} -setup {
        setup
        set s [strategy getname SYSTEM]

        # Create a block that executes only at week 10.
        $s addblock_
        set b1 [lindex [$s blocks] end]
        $b1 set tmode AT
        $b1 set t1    10

        $b1 addtactic_ SIGEVENT
        set t1 [lindex [$b1 tactics] end]
        $t1 set msg "B1"

        # Create a block to execute
        $s addblock_
        set b2 [lindex [$s blocks] end]
        $b2 addtactic_ SIGEVENT
        set t2 [lindex [$b2 tactics] end]
        $t2 set msg "B2"

    } -body {
        $s execute

        set a [$b1 execstatus]
        set b [$b2 execstatus]
        set c [rdb onecolumn {
            SELECT narrative FROM sigevents WHERE component='tactic'
        }]

        list $a $b $c
    } -cleanup {
        cleanup
    } -result {SKIP_TIME SUCCESS {SIGEVENT: B2}}

    #-------------------------------------------------------------------
    # addblock_

    test addblock_-1.1 {adds blocks to the scenario} -setup {
        setup
    } -body {
        $S1 addblock_
        $S1 addblock_
        $S1 blocks
    } -cleanup {
        cleanup
    } -match glob -result {::bean::block* ::bean::block*}

    test addblock_-2.1 {undo: blocks is restored} -setup {
        setup
        $S1 addblock_
    } -body {
        set before [$S1 blocks]
        set undo [$S1 addblock_]
        namespace eval :: $undo
        set after [$S1 blocks]
        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}
 
    test addblock_-2.2 {undo: added block is destroyed} -setup {
        setup
        $S1 addblock_
    } -body {
        set undo [$S1 addblock_]
        set B1 [lindex [$S1 blocks] end]
        namespace eval :: $undo
        info object is object $B1
    } -cleanup {
        cleanup
    } -result {0}

    #-------------------------------------------------------------------
    # deleteblock_

    proc lastb {} {
        variable S1
        lindex [$S1 blocks] end
    }

    test deleteblock_-1.1 {deletes blocks from the scenario} -setup {
        setup
        $S1 addblock_
        set B1 [lastb]
        $S1 addblock_
        set B2 [lastb]
    } -body {
        $S1 deleteblock_ [$B1 id]
        expr {[$S1 blocks] eq $B2}
    } -cleanup {
        cleanup
    } -result {1}

    test deleteblock_-2.1 {undo: blocks is restored} -setup {
        setup
        $S1 addblock_
        set B1 [lastb]
        $S1 addblock_
        set B2 [lastb]
    } -body {
        set undo [$S1 deleteblock_ [$B1 id]]
        namespace eval :: $undo
        expr {[$S1 blocks] eq [list $B1 $B2]}
    } -cleanup {
        cleanup
    } -result {1}
 
    test deleteblock_-2.2 {undo: deleted block is restored} -setup {
        setup
        $S1 addblock_
        set B1 [lastb]
        $S1 addblock_
        set B2 [lastb]
    } -body {
        set undo [$S1 deleteblock_ [$B1 id]]
        namespace eval :: $undo
        info object is object $B1
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # moveblock_
    #
    # Since the actual rearrangement is handled by emoveitem, this code
    # will not test all possible moves.

    test moveblock_-1.1 {moves a block} -setup {
        setup
        $S1 addblock_
        set B1 [lastb]
        $S1 addblock_
        set B2 [lastb]
    } -body {
        $S1 moveblock_ [$B2 id] top
        expr {[$S1 blocks] eq [list $B2 $B1]}
    } -cleanup {
        cleanup
    } -result {1}

    test moveblock_-2.1 {undo: blocks is restored} -setup {
        setup
        $S1 addblock_
        set B1 [lastb]
        $S1 addblock_
        set B2 [lastb]
    } -body {
        set before [$S1 blocks]
        set undo [$S1 moveblock_ [$B2 id] top]
        namespace eval :: $undo
        set after [$S1 blocks]
        expr {$before eq $after}
    } -cleanup {
        cleanup
    } -result {1}
 
    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::








