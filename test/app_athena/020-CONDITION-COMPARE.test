# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-CONDITION-COMPARE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    CONDITION:COMPARE:* Orders tests
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Set up for tests

    set S1 ::strategy::SYSTEM

    proc setup {} {
        ted create NB1 BLUE SHIA
        variable S1
        variable B1
        variable C1
        set B1 [ted addblock SYSTEM]
        set C1 [ted addcondition $B1 COMPARE]
    }

    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # CONDITION:COMPARE

    test CONDITION:COMPARE-1.1 {required parameters} -setup {
        setup
    } -body {
        ted order -reject CONDITION:COMPARE
    } -cleanup {
        cleanup
    } -result {
        condition_id {required value}
    }

    test CONDITION:COMPARE-1.2 {unknown condition_id} -setup {
        setup
    } -body {
        ted order -reject CONDITION:COMPARE condition_id NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        condition_id {Invalid COMPARE ID: "NONESUCH"}
    }

    test CONDITION:COMPARE-1.3 {invalid comp} -setup {
        setup
    } -body {
        ted order -reject CONDITION:COMPARE condition_id [$C1 id] comp NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        comp {invalid value "NONESUCH", should be one of: EQ,*}
    }

    test CONDITION:COMPARE-2.1 {condition updated} -setup {
        setup
    } -body {
        ted order CONDITION:COMPARE \
            condition_id [$C1 id] \
            x            [gofer construct NUMBER BY_VALUE 5.0]  \
            comp         gt                                     \
            y            [gofer construct NUMBER BY_VALUE 10.0]

        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        comp    GT
        id      *
        metflag {}
        parent  ::bean::block*
        state   normal
        x       {_type NUMBER _rule BY_VALUE raw_value 5.0}
        y       {_type NUMBER _rule BY_VALUE raw_value 10.0}
    }

    test CONDITION:COMPARE-2.2 {sanity check done} -setup {
        setup
    } -body {
        ted order CONDITION:COMPARE condition_id [$C1 id] x NONESUCH
        ted pdicts [$C1 getdict]
    } -cleanup {
        cleanup
    } -match dictglob -result {
        comp    EQ
        id      *
        metflag {}
        parent  ::bean::block*
        state   invalid
        x       NONESUCH
        y       {_type NUMBER _rule BY_VALUE raw_value 0}
    }

    test CONDITION:COMPARE-2.3 {notifier event} -setup {
        setup
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        ted order CONDITION:COMPARE condition_id [$C1 id] comp LT
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}

    test CONDITION:COMPARE-2.4 {undo notifier event} -setup {
        setup
        ted order CONDITION:COMPARE condition_id [$C1 id] comp LT
    } -body {
        ted notifier bind ::projectlib::bean <Monitor>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -match glob -result {*{::projectlib::bean <Monitor>}*}
 
    test CONDITION:COMPARE-3.1 {identity} -setup {
        setup
    } -body {
        ted condition identity $C1
    } -cleanup {
        cleanup
    } -result {OK}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::





