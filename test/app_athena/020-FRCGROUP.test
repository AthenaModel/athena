# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-GROUP-FORCE.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) FRCGROUP:* order tests.
#
#    This test suite tests the frcgroup-related orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Standard groups

    set blue {
        g              BLUE
        longname       "US Army"
        a              JOE
        color          #0000ff
        forcetype      REGULAR
        training       PROFICIENT
        base_personnel 1000
        demeanor       AVERAGE
        cost           0.0
        local          no
    }

    set brit {
        g              BRIT
        longname       "British Forces"
        a              JOE
        color          #00ffff
        forcetype      REGULAR
        training       FULL
        base_personnel 1000
        demeanor       AVERAGE
        cost           0.0
        local          no
    }


    # Clean up after a test

    proc cleanup {} {
        # Clean up the test environment
        ted cleanup
    }

    #-------------------------------------------------------------------
    # FRCGROUP:CREATE

    test CREATE-1.1 {required parms} -body {
        ted order -reject FRCGROUP:CREATE {}
    } -result {
        g {required value}
    }
    

    test CREATE-1.2 {Duplicate g} -setup {
        ted create JOE
        ted order FRCGROUP:CREATE $blue
    } -body {
        ted order -reject FRCGROUP:CREATE $blue
    } -cleanup {
        cleanup
    } -result {
        g {An entity with this ID already exists}
    }


    test CREATE-1.3 {g is not an ident} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            g "BL&E"
        }]
    } -cleanup {
        cleanup
    } -result {
        g {Identifiers begin with a letter and contain only letters and digits.}
    }

    test CREATE-1.4 {invalid actor} -body {
        ted order -reject FRCGROUP:CREATE $blue
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, none are defined}
    }

    test CREATE-1.5 {invalid color} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            color NONESUCH
        }]
    } -cleanup {
        cleanup
    } -match glob -result {
        color {Invalid hex color*}
    }


    test CREATE-1.7 {invalid forcetype} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            forcetype NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        forcetype {invalid value "NONESUCH", should be one of: REGULAR, PARAMILITARY, POLICE, IRREGULAR, CRIMINAL}
    }

    test CREATE-1.8 {invalid training} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            training NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        training {invalid value "NONESUCH", should be one of: PROFICIENT, FULL, PARTIAL, NONE}
    }

    test CREATE-1.9 {invalid base_personnel} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            base_personnel NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        base_personnel {invalid value "NONESUCH", expected integer}
    }

    test CREATE-1.10 {invalid demeanor} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            demeanor NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        demeanor {invalid value "NONESUCH", should be one of: APATHETIC, AVERAGE, AGGRESSIVE}
    }

    test CREATE-1.11 {invalid cost} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            cost NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        cost {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }

    test CREATE-1.14 {invalid local} -setup {
        ted create JOE
    } -body {
        ted order -reject FRCGROUP:CREATE [dict merge $blue {
            local NONESUCH
        }]
    } -cleanup {
        cleanup
    } -result {
        local {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }

    test CREATE-2.1 {frcgroup is created} -setup {
        ted create JOE
    } -body {
        ted order FRCGROUP:CREATE $blue

        ted querylist {SELECT * FROM frcgroups_view}
    } -cleanup {
        cleanup
    } -result {
g               BLUE
longname        US Army
color           #0000FF
demeanor        AVERAGE
cost            0.0
gtype           FRC
a               JOE
bsid            
forcetype       REGULAR
training        PROFICIENT
base_personnel  1000
local           0
    }

    test CREATE-2.2 {longname defaults to ID} -setup {
        ted create JOE
    } -body {
        ted order FRCGROUP:CREATE [dict merge $blue {longname ""}]

        rdb onecolumn {SELECT longname FROM frcgroups_view}
    } -cleanup {
        cleanup
    } -result {BLUE}

    test CREATE-2.3 {Effects} -setup {
        ted create JOE
    } -body {
        ted notifier bind ::rdb <frcgroups>
        ted order FRCGROUP:CREATE $blue
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
    }


    test CREATE-3.1 {undo effects} -setup {
        ted create JOE
        ted order FRCGROUP:CREATE $blue
    } -body {
        ted notifier bind ::rdb <frcgroups>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> delete BLUE}
    }


    #-------------------------------------------------------------------
    # FRCGROUP:DELETE

    test DELETE-1.1 {required parms} -body {
        ted order -reject FRCGROUP:DELETE {}
    } -result {
        g {required value}
    }

    
    test DELETE-1.2 {unknown g} -body {
        ted order -reject FRCGROUP:DELETE g NONESUCH
    } -result {
        g {Invalid force group, none are defined}
    }


    test DELETE-2.1 {Effects} -setup {
        ted create BLUE
    } -body {
        ted notifier bind ::rdb <frcgroups>
        ted order FRCGROUP:DELETE g BLUE
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> delete BLUE}
    }


    test DELETE-3.1 {Undo effects} -setup {
        ted create BLUE
        ted order FRCGROUP:DELETE g BLUE
    } -body {
        ted notifier bind ::rdb <frcgroups>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
    }


    #-------------------------------------------------------------------
    # FRCGROUP:UPDATE

    test UPDATE-1.1 {required parms} -body {
        ted order -reject FRCGROUP:UPDATE {}
    } -result {
        g {required value}
    }

    test UPDATE-1.2 {invalid actor} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE}
    }

    test UPDATE-1.3 {invalid color} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE color NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        color {Invalid hex color*}
    }


    test UPDATE-1.5 {invalid forcetype} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE forcetype NONESUCH
    } -cleanup {
        cleanup
    } -result {
        forcetype {invalid value "NONESUCH", should be one of: REGULAR, PARAMILITARY, POLICE, IRREGULAR, CRIMINAL}
    }

    test UPDATE-1.6 {invalid training} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE training NONESUCH
    } -cleanup {
        cleanup
    } -result {
        training {invalid value "NONESUCH", should be one of: PROFICIENT, FULL, PARTIAL, NONE}
    }

    test UPDATE-1.7 {invalid base_personnel} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE base_personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        base_personnel {invalid value "NONESUCH", expected integer}
    }


    test UPDATE-1.8 {invalid demeanor} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE demeanor NONESUCH
    } -cleanup {
        cleanup
    } -result {
        demeanor {invalid value "NONESUCH", should be one of: APATHETIC, AVERAGE, AGGRESSIVE}
    }


    test UPDATE-1.9 {invalid cost} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE cost NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cost {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }


    test UPDATE-1.12 {invalid local} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE local NONESUCH
    } -cleanup {
        cleanup
    } -result {
        local {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test UPDATE-2.1 {frcgroup is updated} -setup {
        ted create BOB BLUE
    } -body {
        ted order FRCGROUP:UPDATE {
            g              BLUE
            longname       "Blue Angels"
            a              BOB
            color          "#ff0000"
            forcetype      POLICE
            training       NONE
            base_personnel 10000
            demeanor       AGGRESSIVE
            cost           10.0
            local          yes
        }

        ted querylist {SELECT * FROM frcgroups_view}
    } -cleanup {
        cleanup
    } -result {
g               BLUE
longname        Blue Angels
color           #FF0000
demeanor        AGGRESSIVE
cost            10.0
gtype           FRC
a               BOB
bsid            
forcetype       POLICE
training        NONE
base_personnel  10000
local           1
    }


    test UPDATE-2.2 {table monitor event} -setup {
        ted create BLUE
    } -body {
        ted notifier bind ::rdb <frcgroups>
        ted order FRCGROUP:UPDATE g BLUE longname "Blue Angels"
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
    }


    test UPDATE-3.1 {undo undoes the change} -setup {
        ted create BOB BLUE
        ted order FRCGROUP:UPDATE {
            g              BLUE
            longname       "Blue Angels"
            a              BOB
            color          "#ff0000"
            forcetype      POLICE
            training       NONE
            base_personnel 10000
            demeanor       AGGRESSIVE
            cost           10.0
            local          yes
        }
    } -body {
        ted notifier bind ::rdb <frcgroups>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
    }

    #-------------------------------------------------------------------
    # FRCGROUP:UPDATE:MULTI

    test UPDATE:MULTI-1.1 {required parms} -body {
        ted order -reject FRCGROUP:UPDATE:MULTI {}
    } -result {
        ids {required value}
    }
    

    test UPDATE:MULTI-1.2 {invalid ids, no groups} -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids NONESUCH
    } -result {
        ids {Invalid force group, none are defined}
    }


    test UPDATE:MULTI-1.3 {invalid ids, groups} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids NONESUCH
    } -cleanup {
        cleanup
    } -result {
        ids {Invalid force group, should be one of: BLUE}
    }


    test UPDATE:MULTI-1.4 {invalid actor} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE g BLUE a NONESUCH
    } -cleanup {
        cleanup
    } -result {
        a {Invalid actor, should be one of: JOE}
    }

    test UPDATE:MULTI-1.5 {invalid color} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE color NONESUCH
    } -cleanup {
        cleanup
    } -match glob -result {
        color {Invalid hex color*}
    } 


    test UPDATE:MULTI-1.7 {invalid forcetype} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE forcetype NONESUCH
    } -cleanup {
        cleanup
    } -result {
        forcetype {invalid value "NONESUCH", should be one of: REGULAR, PARAMILITARY, POLICE, IRREGULAR, CRIMINAL}
    }


    test UPDATE:MULTI-1.8 {invalid training} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE training NONESUCH
    } -cleanup {
        cleanup
    } -result {
        training {invalid value "NONESUCH", should be one of: PROFICIENT, FULL, PARTIAL, NONE}
    }

    test UPDATE:MULTI-1.9 {invalid base_personnel} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE base_personnel NONESUCH
    } -cleanup {
        cleanup
    } -result {
        base_personnel {invalid value "NONESUCH", expected integer}
    }


    test UPDATE:MULTI-1.10 {invalid demeanor} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE demeanor NONESUCH
    } -cleanup {
        cleanup
    } -result {
        demeanor {invalid value "NONESUCH", should be one of: APATHETIC, AVERAGE, AGGRESSIVE}
    }


    test UPDATE:MULTI-1.11 {invalid cost} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE cost NONESUCH
    } -cleanup {
        cleanup
    } -result {
        cost {invalid money value "NONESUCH", expected positive numeric value with optional K, M, or B suffix}
    }


    test UPDATE:MULTI-1.14 {invalid local} -setup {
        ted create BLUE
    } -body {
        ted order -reject FRCGROUP:UPDATE:MULTI ids BLUE local NONESUCH
    } -cleanup {
        cleanup
    } -result {
        local {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    }


    test UPDATE:MULTI-2.1 {one group of several is updated} -setup {
        ted create BOB BLUE BRIT
    } -body {
        ted notifier bind ::rdb <frcgroups>

        ted order FRCGROUP:UPDATE:MULTI {
            ids            BLUE 
            a              BOB
            color          "#ff0000"
            forcetype      POLICE
            training       NONE
            base_personnel 10000
            demeanor       AGGRESSIVE
            cost           10.0
            local          yes
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
    }


    test UPDATE:MULTI-2.2 {several groups are updated} -setup {
        ted create BOB BLUE BRIT
    } -body {
        ted notifier bind ::rdb <frcgroups>

        ted order FRCGROUP:UPDATE:MULTI {
            ids            {BLUE BRIT}
            a              BOB
            color          "#ff0000"
            forcetype      POLICE
            training       NONE
            base_personnel 10000
            demeanor       AGGRESSIVE
            cost           10.0
            local          yes
        }

        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
        {::rdb <frcgroups> update BRIT}
    }



    test UPDATE:MULTI-3.1 {undo effects} -setup {
        ted create BLUE BRIT
        ted order FRCGROUP:UPDATE:MULTI {
            ids       {BLUE BRIT}
            color     "#ff0000"
        }
    } -body {
        ted notifier bind ::rdb <frcgroups>
        cif undo -test
        ted notifier received
    } -cleanup {
        cleanup
    } -result {
        {::rdb <frcgroups> update BLUE}
        {::rdb <frcgroups> update BRIT}
    }

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::


