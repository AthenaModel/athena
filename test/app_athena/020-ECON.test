# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    020-ECON.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    app_sim(1) ECON:* order tests.
#
#    This test suite tests the econ model orders.
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n) and athena(1)

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [file dirname [file normalize [info script]]] ted.tcl]

    # Initialize tcltest(n), app_athena(n), et al.
    ted init $argv
}

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::athena_test::tests:: {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    proc setup {} {
        ted create NB1 NB2
    }


    # Clean up after a test

    proc cleanup {} {
        ted cleanup
    }

    #-------------------------------------------------------------------
    # ECON:SAM:UPDATE

    test SAM:UPDATE-1.1 {required parms} -body {
        ted orderx -reject ECON:SAM:UPDATE {}
    } -result {
        id {required value}
        val {required value}
    }
    
    test SAM:UPDATE-1.2 {invalid id} -setup {
        setup
    } -body {
        ted orderx -reject ECON:SAM:UPDATE \
            id NONESUCH val 100000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid SAM cell "NONESUCH", should be one of: *}
    } -match glob

    test SAM:UPDATE-1.3 {invalid val: negative} -setup {
        setup
    } -body {
        ted orderx -reject ECON:SAM:UPDATE \
            id BX.world.world val -1
    } -cleanup {
        cleanup
    } -result {
        val {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test SAM:UPDATE-2.1 {valid order} -setup {
        setup
    } -body {
        ted orderx ECON:SAM:UPDATE id BX.world.world val 10000
    } -cleanup {
        cleanup
    } -result {}

    test SAM:UPDATE-2.2 {monitor cell update event} -setup {
        setup
    } -body {
        ted notifier bind ::econ <SamUpdate>
        ted orderx ECON:SAM:UPDATE id BX.world.world val 10000
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::sam reset
        ::econ::sam solve
    } -result {
        {::econ <SamUpdate> BX.world.world 10000.0}
    }

    test SAM:UPDATE-3.1 {undo undoes the change} -setup {
        setup

        ted orderx ECON:SAM:UPDATE {
            id  BX.world.world
            val 100000
        }
    } -body {
        ted notifier bind ::econ <SamUpdate>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::sam reset
        ::econ::sam solve
    } -result {
        {::econ <SamUpdate> BX.world.world 0.0}
    }

    #-------------------------------------------------------------------
    # ECON:SAM:GLOBAL

    test SAM:GLOBAL-1.1 {required parms} -body {
        ted orderx -reject ECON:SAM:GLOBAL {}
    } -result {
        id {required value}
        val {required value}
    }
    
    test SAM:GLOBAL-1.2 {invalid id} -setup {
        setup
    } -body {
        ted orderx -reject ECON:SAM:GLOBAL \
            id NONESUCH val 100000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid SAM cell "NONESUCH", should be one of: *}
    } -match glob

    test SAM:GLOBAL-2.1 {valid order} -setup {
        setup
    } -body {
        ted orderx ECON:SAM:GLOBAL id BaseUR val 10
    } -cleanup {
        cleanup
    } -result {}

    test SAM:GLOBAL-2.2 {monitor cell update event} -setup {
        setup
    } -body {
        ted notifier bind ::econ <SamUpdate>
        ted orderx ECON:SAM:GLOBAL id BaseUR val 10
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::sam reset
        ::econ::sam solve
    } -result {
        {::econ <SamUpdate> BaseUR 10}
    }

    test SAM:GLOBAL-3.1 {undo undoes the change} -setup {
        setup

        ted orderx ECON:SAM:GLOBAL {
            id  BaseUR
            val 20
        }
    } -body {
        ted notifier bind ::econ <SamUpdate>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::sam reset
        ::econ::sam solve
    } -result {
        {::econ <SamUpdate> BaseUR 10.0}
    }

    #-------------------------------------------------------------------
    # ECON:CGE:UPDATE

    test CGE:UPDATE-1.1 {required parms} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted orderx -reject ECON:CGE:UPDATE {}
    } -cleanup {
        cleanup
    } -result {
        id {required value}
        val {required value}
    }
    
    test CGE:UPDATE-1.2 {invalid id} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted orderx -reject ECON:CGE:UPDATE \
            id NONESUCH val 100000
    } -cleanup {
        cleanup
    } -result {
        id {Invalid CGE cell "NONESUCH", should be one of: *}
    } -match glob

    test CGE:UPDATE-1.3 {invalid val: negative} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted orderx -reject ECON:CGE:UPDATE \
            id BPF.world.black val -1
    } -cleanup {
        cleanup
    } -result {
        val {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test CGE:UPDATE-2.1 {valid order} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted orderx ECON:CGE:UPDATE id BPF.world.black val 10000
    } -cleanup {
        cleanup
    } -result {}

    test CGE:UPDATE-2.2 {monitor cell update event} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted notifier bind ::econ <CgeUpdate>
        ted orderx ECON:CGE:UPDATE id BPF.world.black val 10000
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::cge reset
    } -result {
        {::econ <CgeUpdate>}
    }

    test CGE:UPDATE-3.1 {undo undoes the change} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock

        ted orderx ECON:CGE:UPDATE {
            id  BPF.world.black
            val 100000
        }
    } -body {
        ted notifier bind ::econ <CgeUpdate>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::cge reset
    } -result {
        {::econ <CgeUpdate>}
    }

    #-------------------------------------------------------------------
    # ECON:UPDATE:REMRATE

    test UPDATE:REMRATE-1.1 {required parms} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted orderx -reject ECON:UPDATE:REMRATE {}
    } -cleanup {
        cleanup
    } -result {
        val {required value}
    }
    
    test UPDATE:REMRATE-2.1 {values are updated} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted orderx ECON:UPDATE:REMRATE val 5.0
    } -cleanup {
        cleanup
    } -result {}

    test UPDATE:REMRATE-2.2 {monitor cell update event} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock
    } -body {
        ted notifier bind ::econ <CgeUpdate>
        ted orderx ECON:UPDATE:REMRATE val 5.0
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::cge reset
    } -result {
        {::econ <CgeUpdate>}
    }

    test UPDATE:REMRATE-3.1 {undo undoes the change} -setup {
        setup
        ted create BLUE SHIA KURD
        ted lock

        ted orderx ECON:UPDATE:REMRATE val 5.0
    } -body {
        ted notifier bind ::econ <CgeUpdate>
        flunky undo
        ted notifier received
    } -cleanup {
        cleanup
        ::econ::cge reset
    } -result {
        {::econ <CgeUpdate>}
    }

    #-------------------------------------------------------------------
    # ECON:UPDATE:HIST

    test UPDATE:HIST-1.1 {invalid hist_flag} -body {
        ted orderx -reject ECON:UPDATE:HIST hist_flag NONESUCH
    } -cleanup {
        cleanup
    } -result {
        hist_flag {invalid boolean "NONESUCH", should be one of: 1, 0, true, false, yes, no, on, off}
    } -match glob

    test UPDATE:HIST-1.2 {invalid rem: negative} -body {
        ted orderx -reject ECON:UPDATE:HIST hist_flag 1 rem -1
    } -cleanup {
        cleanup
    } -result {
        rem {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test UPDATE:HIST-1.3 {invalid base_consumers: negative} -body {
        ted orderx -reject ECON:UPDATE:HIST hist_flag 1 base_consumers -1
    } -cleanup {
        cleanup
    } -result {
        base_consumers {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test UPDATE:HIST-1.4 {invalid base_gdp: negative} -body {
        ted orderx -reject ECON:UPDATE:HIST hist_flag 1 base_gdp -1
    } -cleanup {
        cleanup
    } -result {
        base_gdp {invalid money value "-1", expected positive numeric value with optional K, M, or B suffix}
    }

    test UPDATE:HIST-2.1 {valid order} -body {
        ted orderx ECON:UPDATE:HIST hist_flag 1 rem 10B
    } -cleanup {
        cleanup
    } -result {}

    test UPDATE:HIST-3.1 {undo undoes the change} -setup {
        ted orderx ECON:UPDATE:HIST hist_flag 1 base_gdp 1T
    } -body {
        flunky undo
        set pdict [::econ hist]
        dict with pdict {
            expr {$base_gdp == 200000000000.0}
        }
    } -cleanup {
        cleanup
    } -result {1}

    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::athena_test::tests::







